

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Aug 03 11:07:17 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F46K80 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataBANK0
    78  002D08                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for main@F15144
    82  002D08  32                 	db	50
    83  002D09  34                 	db	52
    84  002D0A  00                 	db	0
    85                           
    86                           	psect	smallconst
    87  000F00                     __psmallconst:
    88                           	opt stack 0
    89  000F00  00                 	db	0
    90  000F01                     _dpowers:
    91                           	opt stack 0
    92  000F01  0001               	dw	1
    93  000F03  0000               	dw	0
    94  000F05  000A               	dw	10
    95  000F07  0000               	dw	0
    96  000F09  0064               	dw	100
    97  000F0B  0000               	dw	0
    98  000F0D  03E8               	dw	1000
    99  000F0F  0000               	dw	0
   100  000F11  2710               	dw	10000
   101  000F13  0000               	dw	0
   102  000F15  86A0               	dw	34464
   103  000F17  0001               	dw	1
   104  000F19  4240               	dw	16960
   105  000F1B  000F               	dw	15
   106  000F1D  9680               	dw	38528
   107  000F1F  0098               	dw	152
   108  000F21  E100               	dw	57600
   109  000F23  05F5               	dw	1525
   110  000F25  CA00               	dw	51712
   111  000F27  3B9A               	dw	15258
   112  000F29                     __end_of_dpowers:
   113                           	opt stack 0
   114  000F29                     __powers_:
   115                           	opt stack 0
   116  000F29  00                 	db	0
   117  000F2A  80                 	db	128
   118  000F2B  3F                 	db	63
   119  000F2C  00                 	db	0
   120  000F2D  20                 	db	32
   121  000F2E  41                 	db	65
   122  000F2F  00                 	db	0
   123  000F30  C8                 	db	200
   124  000F31  42                 	db	66
   125  000F32  00                 	db	0
   126  000F33  7A                 	db	122
   127  000F34  44                 	db	68
   128  000F35  40                 	db	64
   129  000F36  1C                 	db	28
   130  000F37  46                 	db	70
   131  000F38  50                 	db	80
   132  000F39  C3                 	db	195
   133  000F3A  47                 	db	71
   134  000F3B  24                 	db	36
   135  000F3C  74                 	db	116
   136  000F3D  49                 	db	73
   137  000F3E  97                 	db	151
   138  000F3F  18                 	db	24
   139  000F40  4B                 	db	75
   140  000F41  BC                 	db	188
   141  000F42  BE                 	db	190
   142  000F43  4C                 	db	76
   143  000F44  6B                 	db	107
   144  000F45  6E                 	db	110
   145  000F46  4E                 	db	78
   146  000F47  03                 	db	3
   147  000F48  15                 	db	21
   148  000F49  50                 	db	80
   149  000F4A  79                 	db	121
   150  000F4B  AD                 	db	173
   151  000F4C  60                 	db	96
   152  000F4D  F3                 	db	243
   153  000F4E  49                 	db	73
   154  000F4F  71                 	db	113
   155  000F50                     __end_of__powers_:
   156                           	opt stack 0
   157  000F50                     __npowers_:
   158                           	opt stack 0
   159  000F50  00                 	db	0
   160  000F51  80                 	db	128
   161  000F52  3F                 	db	63
   162  000F53  CD                 	db	205
   163  000F54  CC                 	db	204
   164  000F55  3D                 	db	61
   165  000F56  D7                 	db	215
   166  000F57  23                 	db	35
   167  000F58  3C                 	db	60
   168  000F59  12                 	db	18
   169  000F5A  83                 	db	131
   170  000F5B  3A                 	db	58
   171  000F5C  B7                 	db	183
   172  000F5D  D1                 	db	209
   173  000F5E  38                 	db	56
   174  000F5F  C6                 	db	198
   175  000F60  27                 	db	39
   176  000F61  37                 	db	55
   177  000F62  38                 	db	56
   178  000F63  86                 	db	134
   179  000F64  35                 	db	53
   180  000F65  C0                 	db	192
   181  000F66  D6                 	db	214
   182  000F67  33                 	db	51
   183  000F68  CC                 	db	204
   184  000F69  2B                 	db	43
   185  000F6A  32                 	db	50
   186  000F6B  70                 	db	112
   187  000F6C  89                 	db	137
   188  000F6D  30                 	db	48
   189  000F6E  E7                 	db	231
   190  000F6F  DB                 	db	219
   191  000F70  2E                 	db	46
   192  000F71  E5                 	db	229
   193  000F72  3C                 	db	60
   194  000F73  1E                 	db	30
   195  000F74  42                 	db	66
   196  000F75  A2                 	db	162
   197  000F76  0D                 	db	13
   198  000F77                     __end_of__npowers_:
   199                           	opt stack 0
   200  0000                     _ANCON1	set	3932
   201  0000                     _ANCON0	set	3933
   202  0000                     _RCREG2	set	3962
   203  0000                     _TXREG2	set	3961
   204  0000                     _PIR3bits	set	4004
   205  0000                     _RCREG	set	4014
   206  0000                     _TXREG1	set	4013
   207  0000                     _PIR1bits	set	3998
   208  0000                     _ADRESL	set	4035
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADCON0bits	set	4034
   211  0000                     _SPBRG1	set	4015
   212  0000                     _BAUDCON1	set	4007
   213  0000                     _RCSTA1	set	4011
   214  0000                     _TXSTA1	set	4012
   215  0000                     _TRISE	set	3990
   216  0000                     _TRISD	set	3989
   217  0000                     _TRISC	set	3988
   218  0000                     _TRISB	set	3987
   219  0000                     _TRISA	set	3986
   220  0000                     _ADCON2	set	4032
   221  0000                     _ADCON1	set	4033
   222  0000                     _ADCON0	set	4034
   223  0000                     _OSCTUNEbits	set	3995
   224  0000                     _OSCCON	set	4051
   225  0000                     _RCIF	set	31989
   226  000F77                     STR_2:
   227  000F77  0A                 	db	10
   228  000F78  56                 	db	86	;'V'
   229  000F79  6F                 	db	111	;'o'
   230  000F7A  6C                 	db	108	;'l'
   231  000F7B  74                 	db	116	;'t'
   232  000F7C  73                 	db	115	;'s'
   233  000F7D  3A                 	db	58	;':'
   234  000F7E  20                 	db	32
   235  000F7F  25                 	db	37
   236  000F80  34                 	db	52	;'4'
   237  000F81  2E                 	db	46
   238  000F82  35                 	db	53	;'5'
   239  000F83  66                 	db	102	;'f'
   240  000F84  0A                 	db	10
   241  000F85  00                 	db	0
   242  000F86                     STR_1:
   243  000F86  0A                 	db	10
   244  000F87  41                 	db	65	;'A'
   245  000F88  44                 	db	68	;'D'
   246  000F89  43                 	db	67	;'C'
   247  000F8A  3A                 	db	58	;':'
   248  000F8B  20                 	db	32
   249  000F8C  25                 	db	37
   250  000F8D  34                 	db	52	;'4'
   251  000F8E  2E                 	db	46
   252  000F8F  35                 	db	53	;'5'
   253  000F90  66                 	db	102	;'f'
   254  000F91  00                 	db	0
   255  000F92                     STR_3:
   256  000F92  41                 	db	65	;'A'
   257  000F93  64                 	db	100	;'d'
   258  000F94  63                 	db	99	;'c'
   259  000F95  3A                 	db	58	;':'
   260  000F96  20                 	db	32
   261  000F97  25                 	db	37
   262  000F98  64                 	db	100	;'d'
   263  000F99  0A                 	db	10
   264  000F9A  00                 	db	0
   265  000F9B  68                 	db	104	;'h'
   266  000F9C  65                 	db	101	;'e'
   267  000F9D  6C                 	db	108	;'l'
   268  000F9E  6C                 	db	108	;'l'
   269  000F9F  00                 	db	0
   270  000FA0  2D                 	db	45
   271  000FA1  00                 	db	0
   272                           
   273                           ; #config settings
   274  000FA2  00                 	db	0	; dummy byte at the end
   275  0000                     
   276                           	psect	cinit
   277  002B76                     __pcinit:
   278                           	opt stack 0
   279  002B76                     start_initialization:
   280                           	opt stack 0
   281  002B76                     __initialization:
   282                           	opt stack 0
   283                           
   284                           ; Initialize objects allocated to BANK0 (3 bytes)
   285                           ; load TBLPTR registers with __pidataBANK0
   286  002B76  0E08               	movlw	low __pidataBANK0
   287  002B78  6EF6               	movwf	tblptrl,c
   288  002B7A  0E2D               	movlw	high __pidataBANK0
   289  002B7C  6EF7               	movwf	tblptrh,c
   290  002B7E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   291  002B80  6EF8               	movwf	tblptru,c
   292  002B82  0009               	tblrd		*+	;fetch initializer
   293  002B84  CFF5 F0D1          	movff	tablat,__pdataBANK0
   294  002B88  0009               	tblrd		*+	;fetch initializer
   295  002B8A  CFF5 F0D2          	movff	tablat,__pdataBANK0+1
   296  002B8E  0009               	tblrd		*+	;fetch initializer
   297  002B90  CFF5 F0D3          	movff	tablat,__pdataBANK0+2
   298                           
   299                           ; Clear objects allocated to BANK1 (68 bytes)
   300  002B94  EE01  F000         	lfsr	0,__pbssBANK1
   301  002B98  0E44               	movlw	68
   302  002B9A                     clear_0:
   303  002B9A  6AEE               	clrf	postinc0,c
   304  002B9C  06E8               	decf	wreg,f,c
   305  002B9E  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to BANK0 (68 bytes)
   308  002BA0  EE00  F060         	lfsr	0,__pbssBANK0
   309  002BA4  0E44               	movlw	68
   310  002BA6                     clear_1:
   311  002BA6  6AEE               	clrf	postinc0,c
   312  002BA8  06E8               	decf	wreg,f,c
   313  002BAA  E1FD               	bnz	clear_1
   314                           
   315                           ; Clear objects allocated to COMRAM (7 bytes)
   316  002BAC  EE00  F04D         	lfsr	0,__pbssCOMRAM
   317  002BB0  0E07               	movlw	7
   318  002BB2                     clear_2:
   319  002BB2  6AEE               	clrf	postinc0,c
   320  002BB4  06E8               	decf	wreg,f,c
   321  002BB6  E1FD               	bnz	clear_2
   322  002BB8                     end_of_initialization:
   323                           	opt stack 0
   324  002BB8                     __end_of__initialization:
   325                           	opt stack 0
   326  002BB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   327  002BBA  6EF8               	movwf	tblptru,c
   328  002BBC  0100               	movlb	0
   329  002BBE  EFAD  F00F         	goto	_main	;jump to C main() function
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	bssCOMRAM
   338  00004D                     __pbssCOMRAM:
   339                           	opt stack 0
   340  00004D                     putNum@F15155:
   341                           	opt stack 0
   342  00004D                     	ds	5
   343  000052                     _delayan:
   344                           	opt stack 0
   345  000052                     	ds	2
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	bssBANK0
   354  000060                     __pbssBANK0:
   355                           	opt stack 0
   356  000060                     _rx_buffer:
   357                           	opt stack 0
   358  000060                     	ds	68
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	dataBANK0
   367  0000D1                     __pdataBANK0:
   368                           	opt stack 0
   369  0000D1                     main@F15144:
   370                           	opt stack 0
   371  0000D1                     	ds	3
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	bssBANK1
   380  000100                     __pbssBANK1:
   381                           	opt stack 0
   382  000100                     _tx_buffer:
   383                           	opt stack 0
   384  000100                     	ds	68
   385                           tblptru	equ	0xFF8
   386                           tblptrh	equ	0xFF7
   387                           tblptrl	equ	0xFF6
   388                           tablat	equ	0xFF5
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           
   392                           	psect	cstackBANK0
   393  0000A4                     __pcstackBANK0:
   394                           	opt stack 0
   395  0000A4                     _printf$931:
   396                           	opt stack 0
   397                           
   398                           ; 3 bytes @ 0x0
   399  0000A4                     	ds	3
   400  0000A7                     printf@ap:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x3
   404  0000A7                     	ds	2
   405  0000A9                     printf@flag:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x5
   409  0000A9                     	ds	2
   410  0000AB                     printf@width:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x7
   414  0000AB                     	ds	2
   415  0000AD                     printf@tmpval:
   416                           	opt stack 0
   417                           
   418                           ; 4 bytes @ 0x9
   419  0000AD                     	ds	4
   420  0000B1                     printf@val:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0xD
   424  0000B1                     	ds	4
   425  0000B5                     printf@exp:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x11
   429  0000B5                     	ds	2
   430  0000B7                     printf@fval:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x13
   434  0000B7                     	ds	3
   435  0000BA                     printf@prec:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x16
   439  0000BA                     	ds	2
   440  0000BC                     printf@c:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x18
   444  0000BC                     	ds	1
   445  0000BD                     main@value:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x19
   449  0000BD                     	ds	3
   450  0000C0                     main@MaxVolt:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x1C
   454  0000C0                     	ds	3
   455  0000C3                     main@adcChannel:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x1F
   459  0000C3                     	ds	2
   460  0000C5                     main@adcResolution:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x21
   464  0000C5                     	ds	2
   465  0000C7                     main@VoltCon:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0x23
   469  0000C7                     	ds	3
   470  0000CA                     main@adc:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x26
   474  0000CA                     	ds	2
   475  0000CC                     main@i:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x28
   479  0000CC                     	ds	2
   480  0000CE                     main@voltMath:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0x2A
   484  0000CE                     	ds	3
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492                           	psect	cstackCOMRAM
   493  000001                     __pcstackCOMRAM:
   494                           	opt stack 0
   495  000001                     ??_isdigit:
   496  000001                     ?_adc_read:
   497                           	opt stack 0
   498  000001                     ?___awmod:
   499                           	opt stack 0
   500  000001                     ?___ftpack:
   501                           	opt stack 0
   502  000001                     ?___ftneg:
   503                           	opt stack 0
   504  000001                     ?__tdiv_to_l_:
   505                           	opt stack 0
   506  000001                     ?__div_to_l_:
   507                           	opt stack 0
   508  000001                     ?___lldiv:
   509                           	opt stack 0
   510  000001                     putch@byte:
   511                           	opt stack 0
   512  000001                     ___awmod@dividend:
   513                           	opt stack 0
   514  000001                     __div_to_l_@f1:
   515                           	opt stack 0
   516  000001                     ___ftpack@arg:
   517                           	opt stack 0
   518  000001                     __tdiv_to_l_@f1:
   519                           	opt stack 0
   520  000001                     ___ftge@ff1:
   521                           	opt stack 0
   522  000001                     ___ftneg@f1:
   523                           	opt stack 0
   524  000001                     ___lldiv@dividend:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x0
   528  000001                     	ds	1
   529  000002                     _isdigit$583:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x1
   533  000002                     	ds	1
   534  000003                     ??_adc_read:
   535  000003                     isdigit@c:
   536                           	opt stack 0
   537  000003                     ___awmod@divisor:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x2
   541  000003                     	ds	1
   542  000004                     ___ftpack@exp:
   543                           	opt stack 0
   544  000004                     __div_to_l_@f2:
   545                           	opt stack 0
   546  000004                     __tdiv_to_l_@f2:
   547                           	opt stack 0
   548  000004                     ___ftge@ff2:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x3
   552  000004                     	ds	1
   553  000005                     adc_read@ch:
   554                           	opt stack 0
   555  000005                     ___awmod@counter:
   556                           	opt stack 0
   557  000005                     ___ftpack@sign:
   558                           	opt stack 0
   559  000005                     ___lldiv@divisor:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x4
   563  000005                     	ds	1
   564  000006                     ??___ftpack:
   565  000006                     ___awmod@sign:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x5
   569  000006                     	ds	1
   570  000007                     ??__tdiv_to_l_:
   571  000007                     ??___ftge:
   572  000007                     ?___awdiv:
   573                           	opt stack 0
   574  000007                     ___awdiv@dividend:
   575                           	opt stack 0
   576  000007                     __div_to_l_@quot:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x6
   580  000007                     	ds	2
   581  000009                     ?___awtoft:
   582                           	opt stack 0
   583  000009                     ?___lltoft:
   584                           	opt stack 0
   585  000009                     ?___lwtoft:
   586                           	opt stack 0
   587  000009                     ___awdiv@divisor:
   588                           	opt stack 0
   589  000009                     ___awtoft@c:
   590                           	opt stack 0
   591  000009                     ___lwtoft@c:
   592                           	opt stack 0
   593  000009                     ___lldiv@quotient:
   594                           	opt stack 0
   595  000009                     ___lltoft@c:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x8
   599  000009                     	ds	1
   600  00000A                     __tdiv_to_l_@quot:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x9
   604  00000A                     	ds	1
   605  00000B                     ___awdiv@counter:
   606                           	opt stack 0
   607  00000B                     __div_to_l_@cntr:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0xA
   611  00000B                     	ds	1
   612  00000C                     ___awdiv@sign:
   613                           	opt stack 0
   614  00000C                     ___awtoft@sign:
   615                           	opt stack 0
   616  00000C                     __div_to_l_@exp1:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0xB
   620  00000C                     	ds	1
   621  00000D                     ??___lltoft:
   622  00000D                     ___lldiv@counter:
   623                           	opt stack 0
   624  00000D                     ___awdiv@quotient:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0xC
   628  00000D                     	ds	1
   629  00000E                     ?___llmod:
   630                           	opt stack 0
   631  00000E                     __tdiv_to_l_@cntr:
   632                           	opt stack 0
   633  00000E                     ___llmod@dividend:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0xD
   637  00000E                     	ds	1
   638  00000F                     ?___wmul:
   639                           	opt stack 0
   640  00000F                     __tdiv_to_l_@exp1:
   641                           	opt stack 0
   642  00000F                     ___wmul@multiplier:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0xE
   646  00000F                     	ds	2
   647  000011                     ___lltoft@exp:
   648                           	opt stack 0
   649  000011                     ___wmul@multiplicand:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x10
   653  000011                     	ds	1
   654  000012                     ___llmod@divisor:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x11
   658  000012                     	ds	1
   659  000013                     ___wmul@product:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x12
   663  000013                     	ds	2
   664  000015                     ?___ftmul:
   665                           	opt stack 0
   666  000015                     ___ftmul@f1:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x14
   670  000015                     	ds	1
   671  000016                     ___llmod@counter:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x15
   675  000016                     	ds	2
   676  000018                     ___ftmul@f2:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x17
   680  000018                     	ds	3
   681  00001B                     ??___ftmul:
   682                           
   683                           ; 1 bytes @ 0x1A
   684  00001B                     	ds	3
   685  00001E                     ___ftmul@exp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x1D
   689  00001E                     	ds	1
   690  00001F                     ___ftmul@f3_as_product:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x1E
   694  00001F                     	ds	3
   695  000022                     ___ftmul@cntr:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x21
   699  000022                     	ds	1
   700  000023                     ___ftmul@sign:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x22
   704  000023                     	ds	1
   705  000024                     ?___ftdiv:
   706                           	opt stack 0
   707  000024                     ?_fround:
   708                           	opt stack 0
   709  000024                     ?_scale:
   710                           	opt stack 0
   711  000024                     ___ftdiv@f1:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x23
   715  000024                     	ds	3
   716  000027                     ___ftdiv@f2:
   717                           	opt stack 0
   718  000027                     _fround$929:
   719                           	opt stack 0
   720  000027                     _scale$930:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x26
   724  000027                     	ds	3
   725  00002A                     ??___ftdiv:
   726  00002A                     scale@scl:
   727                           	opt stack 0
   728  00002A                     _fround$928:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x29
   732  00002A                     	ds	1
   733  00002B                     ?___fttol:
   734                           	opt stack 0
   735  00002B                     ___fttol@f1:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x2A
   739  00002B                     	ds	2
   740  00002D                     fround@prec:
   741                           	opt stack 0
   742  00002D                     ___ftdiv@cntr:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x2C
   746  00002D                     	ds	1
   747  00002E                     ?___ftadd:
   748                           	opt stack 0
   749  00002E                     ___ftadd@f1:
   750                           	opt stack 0
   751  00002E                     ___ftdiv@f3:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0x2D
   755  00002E                     	ds	1
   756  00002F                     ??___fttol:
   757                           
   758                           ; 1 bytes @ 0x2E
   759  00002F                     	ds	2
   760  000031                     ___ftdiv@exp:
   761                           	opt stack 0
   762  000031                     ___ftadd@f2:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x30
   766  000031                     	ds	1
   767  000032                     ___ftdiv@sign:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x31
   771  000032                     	ds	2
   772  000034                     ??___ftadd:
   773  000034                     ___fttol@sign1:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x33
   777  000034                     	ds	1
   778  000035                     ___fttol@lval:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x34
   782  000035                     	ds	2
   783  000037                     ___ftadd@sign:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x36
   787  000037                     	ds	1
   788  000038                     ___ftadd@exp2:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x37
   792  000038                     	ds	1
   793  000039                     ___ftadd@exp1:
   794                           	opt stack 0
   795  000039                     ___fttol@exp1:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x38
   799  000039                     	ds	1
   800  00003A                     ?___ftsub:
   801                           	opt stack 0
   802  00003A                     ___ftsub@f1:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x39
   806  00003A                     	ds	3
   807  00003D                     ___ftsub@f2:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x3C
   811  00003D                     	ds	3
   812  000040                     ?_printf:
   813                           	opt stack 0
   814  000040                     printf@f:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x3F
   818  000040                     	ds	5
   819  000045                     ??_printf:
   820                           
   821                           ; 1 bytes @ 0x44
   822  000045                     	ds	6
   823  00004B                     ??_main:
   824                           
   825                           ; 1 bytes @ 0x4A
   826  00004B                     	ds	2
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           
   834 ;;
   835 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   836 ;;
   837 ;; *************** function _main *****************
   838 ;; Defined at:
   839 ;;		line 25 in file "Main.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  i               2   40[BANK0 ] int 
   844 ;;  voltMath        3   42[BANK0 ] float 
   845 ;;  VoltCon         3   35[BANK0 ] float 
   846 ;;  MaxVolt         3   28[BANK0 ] float 
   847 ;;  value           3   25[BANK0 ] unsigned char [3]
   848 ;;  adc             2   38[BANK0 ] unsigned int 
   849 ;;  adcResolutio    2   33[BANK0 ] int 
   850 ;;  adcChannel      2   31[BANK0 ] unsigned int 
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   861 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   862 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   863 ;;      Totals:         2      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   864 ;;Total ram usage:       22 bytes
   865 ;; Hardware stack levels required when called:    4
   866 ;; This function calls:
   867 ;;		___awtoft
   868 ;;		___ftadd
   869 ;;		___ftdiv
   870 ;;		___ftmul
   871 ;;		___lwtoft
   872 ;;		_adc_read
   873 ;;		_printf
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text0
   880  001F5A                     __ptext0:
   881                           	opt stack 0
   882  001F5A                     _main:
   883                           	opt stack 27
   884                           
   885                           ;Main.c: 26: OSCCON = 0b01110000;
   886                           
   887                           ;incstack = 0
   888  001F5A  0E70               	movlw	112
   889  001F5C  6ED3               	movwf	4051,c	;volatile
   890                           
   891                           ;Main.c: 27: OSCTUNEbits.PLLEN = 1;
   892  001F5E  8C9B               	bsf	3995,6,c	;volatile
   893                           
   894                           ;Main.c: 28: ADCON0 = 1;
   895  001F60  0E01               	movlw	1
   896  001F62  6EC2               	movwf	4034,c	;volatile
   897                           
   898                           ;Main.c: 29: ADCON1 = 0b00011000;
   899  001F64  0E18               	movlw	24
   900  001F66  6EC1               	movwf	4033,c	;volatile
   901                           
   902                           ;Main.c: 30: ADCON2 = 0b10010110;
   903  001F68  0E96               	movlw	150
   904  001F6A  6EC0               	movwf	4032,c	;volatile
   905                           
   906                           ;Main.c: 31: ANCON0 = 0b00000001;
   907  001F6C  0E01               	movlw	1
   908  001F6E  010F               	movlb	15	; () banked
   909  001F70  6F5D               	movwf	93,b	;volatile
   910                           
   911                           ;Main.c: 32: ANCON1 = 0;
   912  001F72  0E00               	movlw	0
   913  001F74  6F5C               	movwf	92,b	;volatile
   914                           
   915                           ;Main.c: 33: TRISA = 0b00000001;
   916  001F76  0E01               	movlw	1
   917  001F78  6E92               	movwf	3986,c	;volatile
   918                           
   919                           ;Main.c: 34: TRISB = 0b00000000;
   920  001F7A  0E00               	movlw	0
   921  001F7C  6E93               	movwf	3987,c	;volatile
   922                           
   923                           ;Main.c: 35: TRISC = 0b00000000;
   924  001F7E  0E00               	movlw	0
   925  001F80  6E94               	movwf	3988,c	;volatile
   926                           
   927                           ;Main.c: 36: TRISD = 0b00000000;
   928  001F82  0E00               	movlw	0
   929  001F84  6E95               	movwf	3989,c	;volatile
   930                           
   931                           ;Main.c: 37: TRISE = 0b00000000;
   932  001F86  0E00               	movlw	0
   933  001F88  6E96               	movwf	3990,c	;volatile
   934                           
   935                           ;Main.c: 50: TXSTA1 = 0b10100010;
   936  001F8A  0EA2               	movlw	162
   937  001F8C  6EAC               	movwf	4012,c	;volatile
   938                           
   939                           ;Main.c: 51: RCSTA1 = 152;
   940  001F8E  0E98               	movlw	152
   941  001F90  6EAB               	movwf	4011,c	;volatile
   942                           
   943                           ;Main.c: 52: BAUDCON1 = 0b01000000;
   944  001F92  0E40               	movlw	64
   945  001F94  6EA7               	movwf	4007,c	;volatile
   946                           
   947                           ;Main.c: 53: SPBRG1 = 103;
   948  001F96  0E67               	movlw	103
   949  001F98  6EAF               	movwf	4015,c	;volatile
   950                           
   951                           ; BSR set to: 15
   952                           ;Main.c: 59: char value[] = "24";
   953  001F9A  C0D1  F0BD         	movff	main@F15144,main@value
   954  001F9E  C0D2  F0BE         	movff	main@F15144+1,main@value+1
   955  001FA2  C0D3  F0BF         	movff	main@F15144+2,main@value+2
   956                           
   957                           ;Main.c: 60: unsigned int adc = 0;
   958  001FA6  0E00               	movlw	0
   959  001FA8  0100               	movlb	0	; () banked
   960  001FAA  6FCB               	movwf	(main@adc+1)& (0+255),b
   961  001FAC  0E00               	movlw	0
   962  001FAE  6FCA               	movwf	main@adc& (0+255),b
   963                           
   964                           ;Main.c: 61: unsigned int adcChannel = 0;
   965  001FB0  0E00               	movlw	0
   966  001FB2  6FC4               	movwf	(main@adcChannel+1)& (0+255),b
   967  001FB4  0E00               	movlw	0
   968  001FB6  6FC3               	movwf	main@adcChannel& (0+255),b
   969                           
   970                           ;Main.c: 62: float VoltCon = 0;
   971  001FB8  0E00               	movlw	0
   972  001FBA  6FC7               	movwf	main@VoltCon& (0+255),b
   973  001FBC  0E00               	movlw	0
   974  001FBE  6FC8               	movwf	(main@VoltCon+1)& (0+255),b
   975  001FC0  0E00               	movlw	0
   976  001FC2  6FC9               	movwf	(main@VoltCon+2)& (0+255),b
   977                           
   978                           ;Main.c: 63: float voltMath = 0;
   979  001FC4  0E00               	movlw	0
   980  001FC6  6FCE               	movwf	main@voltMath& (0+255),b
   981  001FC8  0E00               	movlw	0
   982  001FCA  6FCF               	movwf	(main@voltMath+1)& (0+255),b
   983  001FCC  0E00               	movlw	0
   984  001FCE  6FD0               	movwf	(main@voltMath+2)& (0+255),b
   985                           
   986                           ;Main.c: 64: double MaxVolt = 5;
   987  001FD0  0E00               	movlw	0
   988  001FD2  6FC0               	movwf	main@MaxVolt& (0+255),b
   989  001FD4  0EA0               	movlw	160
   990  001FD6  6FC1               	movwf	(main@MaxVolt+1)& (0+255),b
   991  001FD8  0E40               	movlw	64
   992  001FDA  6FC2               	movwf	(main@MaxVolt+2)& (0+255),b
   993                           
   994                           ;Main.c: 65: int adcResolution = 4095;
   995  001FDC  0E0F               	movlw	15
   996  001FDE  6FC6               	movwf	(main@adcResolution+1)& (0+255),b
   997  001FE0  69C5               	setf	main@adcResolution& (0+255),b
   998  001FE2                     l57:
   999                           
  1000                           ;Main.c: 69: {
  1001                           ;Main.c: 70: for (int i = 0; i <= 10000; i++){
  1002  001FE2  0E00               	movlw	0
  1003  001FE4  0100               	movlb	0	; () banked
  1004  001FE6  6FCD               	movwf	(main@i+1)& (0+255),b
  1005  001FE8  0E00               	movlw	0
  1006  001FEA  6FCC               	movwf	main@i& (0+255),b
  1007  001FEC                     l2818:
  1008                           
  1009                           ; BSR set to: 0
  1010  001FEC  BFCD               	btfsc	(main@i+1)& (0+255),7,b
  1011  001FEE  D006               	goto	l58
  1012  001FF0  0E11               	movlw	17
  1013  001FF2  5DCC               	subwf	main@i& (0+255),w,b
  1014  001FF4  0E27               	movlw	39
  1015  001FF6  59CD               	subwfb	(main@i+1)& (0+255),w,b
  1016  001FF8  B0D8               	btfsc	status,0,c
  1017  001FFA  D025               	goto	u3130
  1018  001FFC                     l58:
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;Main.c: 71: adc = adc_read(adcChannel);
  1022                           
  1023                           ; BSR set to: 0
  1024  001FFC  51C3               	movf	main@adcChannel& (0+255),w,b
  1025  001FFE  EC1D  F016         	call	_adc_read
  1026  002002  C001  F0CA         	movff	?_adc_read,main@adc
  1027  002006  C002  F0CB         	movff	?_adc_read+1,main@adc+1
  1028                           
  1029                           ;Main.c: 72: voltMath = voltMath + adc;
  1030  00200A  C0CA  F009         	movff	main@adc,___lwtoft@c
  1031  00200E  C0CB  F00A         	movff	main@adc+1,___lwtoft@c+1
  1032  002012  EC5D  F016         	call	___lwtoft	;wreg free
  1033  002016  C009  F02E         	movff	?___lwtoft,___ftadd@f1
  1034  00201A  C00A  F02F         	movff	?___lwtoft+1,___ftadd@f1+1
  1035  00201E  C00B  F030         	movff	?___lwtoft+2,___ftadd@f1+2
  1036  002022  C0CE  F031         	movff	main@voltMath,___ftadd@f2
  1037  002026  C0CF  F032         	movff	main@voltMath+1,___ftadd@f2+1
  1038  00202A  C0D0  F033         	movff	main@voltMath+2,___ftadd@f2+2
  1039  00202E  EC96  F010         	call	___ftadd	;wreg free
  1040  002032  C02E  F0CE         	movff	?___ftadd,main@voltMath
  1041  002036  C02F  F0CF         	movff	?___ftadd+1,main@voltMath+1
  1042  00203A  C030  F0D0         	movff	?___ftadd+2,main@voltMath+2
  1043  00203E  0100               	movlb	0	; () banked
  1044  002040  4BCC               	infsnz	main@i& (0+255),f,b
  1045  002042  2BCD               	incf	(main@i+1)& (0+255),f,b
  1046  002044  D7D3               	goto	l2818
  1047  002046                     u3130:
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;Main.c: 73: }
  1051                           ;Main.c: 74: voltMath = voltMath /10000;
  1052                           
  1053                           ; BSR set to: 0
  1054  002046  C0CE  F024         	movff	main@voltMath,___ftdiv@f1
  1055  00204A  C0CF  F025         	movff	main@voltMath+1,___ftdiv@f1+1
  1056  00204E  C0D0  F026         	movff	main@voltMath+2,___ftdiv@f1+2
  1057  002052  0E40               	movlw	64
  1058  002054  6E27               	movwf	___ftdiv@f2,c
  1059  002056  0E1C               	movlw	28
  1060  002058  6E28               	movwf	___ftdiv@f2+1,c
  1061  00205A  0E46               	movlw	70
  1062  00205C  6E29               	movwf	___ftdiv@f2+2,c
  1063  00205E  EC8D  F013         	call	___ftdiv	;wreg free
  1064  002062  C024  F0CE         	movff	?___ftdiv,main@voltMath
  1065  002066  C025  F0CF         	movff	?___ftdiv+1,main@voltMath+1
  1066  00206A  C026  F0D0         	movff	?___ftdiv+2,main@voltMath+2
  1067                           
  1068                           ;Main.c: 76: VoltCon = (MaxVolt*voltMath)/adcResolution;
  1069  00206E  C0CE  F018         	movff	main@voltMath,___ftmul@f2
  1070  002072  C0CF  F019         	movff	main@voltMath+1,___ftmul@f2+1
  1071  002076  C0D0  F01A         	movff	main@voltMath+2,___ftmul@f2+2
  1072  00207A  C0C0  F015         	movff	main@MaxVolt,___ftmul@f1
  1073  00207E  C0C1  F016         	movff	main@MaxVolt+1,___ftmul@f1+1
  1074  002082  C0C2  F017         	movff	main@MaxVolt+2,___ftmul@f1+2
  1075  002086  EC99  F012         	call	___ftmul	;wreg free
  1076  00208A  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1077  00208E  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1078  002092  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1079  002096  C0C5  F009         	movff	main@adcResolution,___awtoft@c
  1080  00209A  C0C6  F00A         	movff	main@adcResolution+1,___awtoft@c+1
  1081  00209E  EC01  F016         	call	___awtoft	;wreg free
  1082  0020A2  C009  F027         	movff	?___awtoft,___ftdiv@f2
  1083  0020A6  C00A  F028         	movff	?___awtoft+1,___ftdiv@f2+1
  1084  0020AA  C00B  F029         	movff	?___awtoft+2,___ftdiv@f2+2
  1085  0020AE  EC8D  F013         	call	___ftdiv	;wreg free
  1086  0020B2  C024  F0C7         	movff	?___ftdiv,main@VoltCon
  1087  0020B6  C025  F0C8         	movff	?___ftdiv+1,main@VoltCon+1
  1088  0020BA  C026  F0C9         	movff	?___ftdiv+2,main@VoltCon+2
  1089                           
  1090                           ;Main.c: 80: _delay(16000);
  1091  0020BE  0E15               	movlw	21
  1092  0020C0  6E4B               	movwf	??_main& (0+255),c
  1093  0020C2  0EC6               	movlw	198
  1094  0020C4                     u3197:
  1095  0020C4  2EE8               	decfsz	wreg,f,c
  1096  0020C6  D7FE               	bra	u3197
  1097  0020C8  2E4B               	decfsz	??_main& (0+255),f,c
  1098  0020CA  D7FC               	bra	u3197
  1099  0020CC  D000               	nop2	
  1100                           
  1101                           ;Main.c: 81: printf("\nADC: %4.5f", voltMath);
  1102  0020CE  0E86               	movlw	low STR_1
  1103  0020D0  6E40               	movwf	printf@f,c
  1104  0020D2  0E0F               	movlw	high STR_1
  1105  0020D4  6E41               	movwf	printf@f+1,c
  1106  0020D6  C0CE  F042         	movff	main@voltMath,?_printf+2
  1107  0020DA  C0CF  F043         	movff	main@voltMath+1,?_printf+3
  1108  0020DE  C0D0  F044         	movff	main@voltMath+2,?_printf+4
  1109  0020E2  ECD2  F007         	call	_printf	;wreg free
  1110                           
  1111                           ;Main.c: 82: printf("\nVolts: %4.5f\n", VoltCon);
  1112  0020E6  0E77               	movlw	low STR_2
  1113  0020E8  6E40               	movwf	printf@f,c
  1114  0020EA  0E0F               	movlw	high STR_2
  1115  0020EC  6E41               	movwf	printf@f+1,c
  1116  0020EE  C0C7  F042         	movff	main@VoltCon,?_printf+2
  1117  0020F2  C0C8  F043         	movff	main@VoltCon+1,?_printf+3
  1118  0020F6  C0C9  F044         	movff	main@VoltCon+2,?_printf+4
  1119  0020FA  ECD2  F007         	call	_printf	;wreg free
  1120                           
  1121                           ;Main.c: 83: printf("Adc: %d\n",adc);
  1122  0020FE  0E92               	movlw	low STR_3
  1123  002100  6E40               	movwf	printf@f,c
  1124  002102  0E0F               	movlw	high STR_3
  1125  002104  6E41               	movwf	printf@f+1,c
  1126  002106  C0CA  F042         	movff	main@adc,?_printf+2
  1127  00210A  C0CB  F043         	movff	main@adc+1,?_printf+3
  1128  00210E  ECD2  F007         	call	_printf	;wreg free
  1129                           
  1130                           ;Main.c: 84: _delay(5000000);
  1131  002112  0E1A               	movlw	26
  1132  002114  6E4C               	movwf	(??_main+1)& (0+255),c
  1133  002116  0E5E               	movlw	94
  1134  002118  6E4B               	movwf	??_main& (0+255),c
  1135  00211A  0E6E               	movlw	110
  1136  00211C                     u3207:
  1137  00211C  2EE8               	decfsz	wreg,f,c
  1138  00211E  D7FE               	bra	u3207
  1139  002120  2E4B               	decfsz	??_main& (0+255),f,c
  1140  002122  D7FC               	bra	u3207
  1141  002124  2E4C               	decfsz	(??_main+1)& (0+255),f,c
  1142  002126  D7FA               	bra	u3207
  1143  002128  D000               	nop2	
  1144  00212A  D75B               	goto	l57
  1145  00212C                     __end_of_main:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           postinc0	equ	0xFEE
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _printf *****************
  1156 ;; Defined at:
  1157 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1160 ;;		 -> STR_5(5), STR_3(9), STR_2(15), STR_1(12), 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  val             4   13[BANK0 ] unsigned long 
  1163 ;;  tmpval          4    9[BANK0 ] struct .
  1164 ;;  fval            3   19[BANK0 ] struct .
  1165 ;;  cp              3    0        PTR const unsigned char 
  1166 ;;  prec            2   22[BANK0 ] int 
  1167 ;;  exp             2   17[BANK0 ] int 
  1168 ;;  width           2    7[BANK0 ] int 
  1169 ;;  flag            2    5[BANK0 ] unsigned short 
  1170 ;;  ap              2    3[BANK0 ] PTR void [1]
  1171 ;;		 -> ?_printf(2), 
  1172 ;;  len             2    0        unsigned int 
  1173 ;;  c               1   24[BANK0 ] char 
  1174 ;;  d               1    0        unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  2   63[COMRAM] int 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1184 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1185 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1186 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1187 ;;      Totals:        11      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1188 ;;Total ram usage:       36 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    3
  1191 ;; This function calls:
  1192 ;;		___awdiv
  1193 ;;		___ftadd
  1194 ;;		___ftge
  1195 ;;		___ftmul
  1196 ;;		___ftneg
  1197 ;;		___ftsub
  1198 ;;		___fttol
  1199 ;;		___lldiv
  1200 ;;		___llmod
  1201 ;;		___lltoft
  1202 ;;		___wmul
  1203 ;;		__div_to_l_
  1204 ;;		__tdiv_to_l_
  1205 ;;		_fround
  1206 ;;		_isdigit
  1207 ;;		_putch
  1208 ;;		_scale
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;;		_putNum
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text1
  1216  000FA4                     __ptext1:
  1217                           	opt stack 0
  1218  000FA4                     _printf:
  1219                           	opt stack 27
  1220                           
  1221                           ;doprnt.c: 466: va_list ap;
  1222                           ;doprnt.c: 499: signed char c;
  1223                           ;doprnt.c: 501: int width;
  1224                           ;doprnt.c: 504: int prec;
  1225                           ;doprnt.c: 508: unsigned short flag;
  1226                           ;doprnt.c: 515: char d;
  1227                           ;doprnt.c: 516: double fval;
  1228                           ;doprnt.c: 517: int exp;
  1229                           ;doprnt.c: 523: union {
  1230                           ;doprnt.c: 524: unsigned long vd;
  1231                           ;doprnt.c: 525: double integ;
  1232                           ;doprnt.c: 526: } tmpval;
  1233                           ;doprnt.c: 528: unsigned long val;
  1234                           ;doprnt.c: 529: unsigned len;
  1235                           ;doprnt.c: 530: const char * cp;
  1236                           ;doprnt.c: 533: *ap = __va_start();
  1237                           
  1238                           ;incstack = 0
  1239  000FA4  0E42               	movlw	low (?_printf+2)
  1240  000FA6  0100               	movlb	0	; () banked
  1241  000FA8  6FA7               	movwf	printf@ap& (0+255),b
  1242  000FAA  0E00               	movlw	high (?_printf+2)
  1243  000FAC  6FA8               	movwf	(printf@ap+1)& (0+255),b
  1244                           
  1245                           ;doprnt.c: 536: while(c = *f++) {
  1246  000FAE  EF71  F00C         	goto	u3040
  1247  000FB2                     
  1248                           ; BSR set to: 0
  1249                           ;doprnt.c: 538: if(c != '%')
  1250                           
  1251                           ; BSR set to: 0
  1252  000FB2  0E25               	movlw	37
  1253  000FB4  19BC               	xorwf	printf@c& (0+255),w,b
  1254  000FB6  B4D8               	btfsc	status,2,c
  1255  000FB8  D005               	goto	l173
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;doprnt.c: 540: {
  1259                           ;doprnt.c: 541: (putch(c) );
  1260  000FBA  51BC               	movf	printf@c& (0+255),w,b
  1261  000FBC  EC7E  F016         	call	_putch
  1262                           
  1263                           ;doprnt.c: 542: continue;
  1264  000FC0  EF71  F00C         	goto	u3040
  1265  000FC4                     l173:
  1266                           
  1267                           ;doprnt.c: 543: }
  1268                           ;doprnt.c: 546: width = 0;
  1269  000FC4  0E00               	movlw	0
  1270  000FC6  0100               	movlb	0	; () banked
  1271  000FC8  6FAC               	movwf	(printf@width+1)& (0+255),b
  1272  000FCA  0E00               	movlw	0
  1273  000FCC  6FAB               	movwf	printf@width& (0+255),b
  1274                           
  1275                           ;doprnt.c: 548: flag = 0;
  1276  000FCE  0E00               	movlw	0
  1277  000FD0  6FAA               	movwf	(printf@flag+1)& (0+255),b
  1278  000FD2  0E00               	movlw	0
  1279  000FD4  6FA9               	movwf	printf@flag& (0+255),b
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1283  000FD6  C040  FFF6         	movff	printf@f,tblptrl
  1284  000FDA  C041  FFF7         	movff	printf@f+1,tblptrh
  1285  000FDE                     	if	0	;tblptru may be non-zero
  1286  000FDE                     	endif
  1287  000FDE                     	if	0	;tblptru may be non-zero
  1288  000FDE                     	endif
  1289  000FDE  0008               	tblrd		*
  1290  000FE0  50F5               	movf	tablat,w,c
  1291  000FE2  EC6F  F016         	call	_isdigit
  1292  000FE6  A0D8               	btfss	status,0,c
  1293  000FE8  D034               	goto	u2580
  1294                           
  1295                           ;doprnt.c: 598: width = 0;
  1296  000FEA  0E00               	movlw	0
  1297  000FEC  0100               	movlb	0	; () banked
  1298  000FEE  6FAC               	movwf	(printf@width+1)& (0+255),b
  1299  000FF0  0E00               	movlw	0
  1300  000FF2  6FAB               	movwf	printf@width& (0+255),b
  1301  000FF4                     
  1302                           ;doprnt.c: 600: width *= 10;
  1303                           
  1304                           ; BSR set to: 0
  1305  000FF4  C0AB  F00F         	movff	printf@width,___wmul@multiplier
  1306  000FF8  C0AC  F010         	movff	printf@width+1,___wmul@multiplier+1
  1307  000FFC  0E00               	movlw	0
  1308  000FFE  6E12               	movwf	___wmul@multiplicand+1,c
  1309  001000  0E0A               	movlw	10
  1310  001002  6E11               	movwf	___wmul@multiplicand,c
  1311  001004  EC38  F016         	call	___wmul	;wreg free
  1312  001008  C00F  F0AB         	movff	?___wmul,printf@width
  1313  00100C  C010  F0AC         	movff	?___wmul+1,printf@width+1
  1314                           
  1315                           ;doprnt.c: 601: width += *f++ - '0';
  1316  001010  0ED0               	movlw	208
  1317  001012  6E45               	movwf	??_printf& (0+255),c
  1318  001014  0EFF               	movlw	255
  1319  001016  6E46               	movwf	(??_printf+1)& (0+255),c
  1320  001018  C040  FFF6         	movff	printf@f,tblptrl
  1321  00101C  C041  FFF7         	movff	printf@f+1,tblptrh
  1322  001020                     	if	0	;tblptru may be non-zero
  1323  001020                     	endif
  1324  001020                     	if	0	;tblptru may be non-zero
  1325  001020                     	endif
  1326  001020  0008               	tblrd		*
  1327  001022  50F5               	movf	tablat,w,c
  1328  001024  6E47               	movwf	(??_printf+2)& (0+255),c
  1329  001026  6A48               	clrf	(??_printf+3)& (0+255),c
  1330  001028  5045               	movf	??_printf,w,c
  1331  00102A  2647               	addwf	??_printf+2,f,c
  1332  00102C  5046               	movf	??_printf+1,w,c
  1333  00102E  2248               	addwfc	??_printf+3,f,c
  1334  001030  5047               	movf	??_printf+2,w,c
  1335  001032  0100               	movlb	0	; () banked
  1336  001034  27AB               	addwf	printf@width& (0+255),f,b
  1337  001036  5048               	movf	??_printf+3,w,c
  1338  001038  23AC               	addwfc	(printf@width+1)& (0+255),f,b
  1339                           
  1340                           ; BSR set to: 0
  1341  00103A  4A40               	infsnz	printf@f,f,c
  1342  00103C  2A41               	incf	printf@f+1,f,c
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1346  00103E  C040  FFF6         	movff	printf@f,tblptrl
  1347  001042  C041  FFF7         	movff	printf@f+1,tblptrh
  1348  001046                     	if	0	;tblptru may be non-zero
  1349  001046                     	endif
  1350  001046                     	if	0	;tblptru may be non-zero
  1351  001046                     	endif
  1352  001046  0008               	tblrd		*
  1353  001048  50F5               	movf	tablat,w,c
  1354  00104A  EC6F  F016         	call	_isdigit
  1355  00104E  B0D8               	btfsc	status,0,c
  1356  001050  D7D1               	goto	l175
  1357  001052                     u2580:
  1358                           
  1359                           ;doprnt.c: 608: }
  1360                           ;doprnt.c: 611: if(*f == '.') {
  1361  001052  C040  FFF6         	movff	printf@f,tblptrl
  1362  001056  C041  FFF7         	movff	printf@f+1,tblptrh
  1363  00105A                     	if	0	;tblptru may be non-zero
  1364  00105A                     	endif
  1365  00105A                     	if	0	;tblptru may be non-zero
  1366  00105A                     	endif
  1367  00105A  0008               	tblrd		*
  1368  00105C  50F5               	movf	tablat,w,c
  1369  00105E  0A2E               	xorlw	46
  1370  001060  A4D8               	btfss	status,2,c
  1371  001062  D030               	goto	l177
  1372                           
  1373                           ;doprnt.c: 612: flag |= 0x4000;
  1374  001064  0100               	movlb	0	; () banked
  1375  001066  8DAA               	bsf	(printf@flag+1)& (0+255),6,b
  1376                           
  1377                           ;doprnt.c: 613: f++;
  1378  001068  4A40               	infsnz	printf@f,f,c
  1379  00106A  2A41               	incf	printf@f+1,f,c
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;doprnt.c: 620: {
  1383                           ;doprnt.c: 621: prec = 0;
  1384  00106C  0E00               	movlw	0
  1385  00106E  6FBB               	movwf	(printf@prec+1)& (0+255),b
  1386  001070  0E00               	movlw	0
  1387  001072  6FBA               	movwf	printf@prec& (0+255),b
  1388                           
  1389                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1390  001074  D01C               	goto	l178
  1391  001076                     
  1392                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1393                           
  1394                           ; BSR set to: 0
  1395  001076  C0BA  F00F         	movff	printf@prec,___wmul@multiplier
  1396  00107A  C0BB  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1397  00107E  0E00               	movlw	0
  1398  001080  6E12               	movwf	___wmul@multiplicand+1,c
  1399  001082  0E0A               	movlw	10
  1400  001084  6E11               	movwf	___wmul@multiplicand,c
  1401  001086  EC38  F016         	call	___wmul	;wreg free
  1402  00108A  C040  FFF6         	movff	printf@f,tblptrl
  1403  00108E  C041  FFF7         	movff	printf@f+1,tblptrh
  1404  001092                     	if	0	;tblptru may be non-zero
  1405  001092                     	endif
  1406  001092                     	if	0	;tblptru may be non-zero
  1407  001092                     	endif
  1408  001092  0008               	tblrd		*
  1409  001094  50F5               	movf	tablat,w,c
  1410  001096  260F               	addwf	?___wmul,f,c
  1411  001098  0E00               	movlw	0
  1412  00109A  2210               	addwfc	?___wmul+1,f,c
  1413  00109C  0ED0               	movlw	208
  1414  00109E  240F               	addwf	?___wmul,w,c
  1415  0010A0  0100               	movlb	0	; () banked
  1416  0010A2  6FBA               	movwf	printf@prec& (0+255),b
  1417  0010A4  0EFF               	movlw	255
  1418  0010A6  2010               	addwfc	?___wmul+1,w,c
  1419  0010A8  6FBB               	movwf	(printf@prec+1)& (0+255),b
  1420                           
  1421                           ; BSR set to: 0
  1422  0010AA  4A40               	infsnz	printf@f,f,c
  1423  0010AC  2A41               	incf	printf@f+1,f,c
  1424  0010AE                     l178:
  1425                           
  1426                           ; BSR set to: 0
  1427                           
  1428                           ; BSR set to: 0
  1429  0010AE  C040  FFF6         	movff	printf@f,tblptrl
  1430  0010B2  C041  FFF7         	movff	printf@f+1,tblptrh
  1431  0010B6                     	if	0	;tblptru may be non-zero
  1432  0010B6                     	endif
  1433  0010B6                     	if	0	;tblptru may be non-zero
  1434  0010B6                     	endif
  1435  0010B6  0008               	tblrd		*
  1436  0010B8  50F5               	movf	tablat,w,c
  1437  0010BA  EC6F  F016         	call	_isdigit
  1438  0010BE  A0D8               	btfss	status,0,c
  1439  0010C0  D00A               	goto	l182
  1440  0010C2  D7D9               	goto	l179
  1441  0010C4                     l177:
  1442                           
  1443                           ;doprnt.c: 626: prec = 0;
  1444  0010C4  0E00               	movlw	0
  1445  0010C6  0100               	movlb	0	; () banked
  1446  0010C8  6FBB               	movwf	(printf@prec+1)& (0+255),b
  1447  0010CA  0E00               	movlw	0
  1448  0010CC  6FBA               	movwf	printf@prec& (0+255),b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 628: flag |= 0x1000;
  1452  0010CE  89AA               	bsf	(printf@flag+1)& (0+255),4,b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;doprnt.c: 630: }
  1456                           ;doprnt.c: 635: switch(c = *f++) {
  1457  0010D0  D002               	goto	l182
  1458  0010D2                     
  1459                           ; BSR set to: 0
  1460                           ;doprnt.c: 663: flag |= 0x400;
  1461                           
  1462                           ; BSR set to: 0
  1463  0010D2  85AA               	bsf	(printf@flag+1)& (0+255),2,b
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;doprnt.c: 698: case 'i':
  1467                           ;doprnt.c: 699: break;
  1468                           
  1469                           ; BSR set to: 0
  1470                           
  1471                           ;doprnt.c: 697: case 'd':
  1472                           
  1473                           ;doprnt.c: 664: break;
  1474  0010D4  D017               	goto	l186
  1475  0010D6                     l182:
  1476                           
  1477                           ; BSR set to: 0
  1478  0010D6  C040  FFF6         	movff	printf@f,tblptrl
  1479  0010DA  C041  FFF7         	movff	printf@f+1,tblptrh
  1480  0010DE  4A40               	infsnz	printf@f,f,c
  1481  0010E0  2A41               	incf	printf@f+1,f,c
  1482  0010E2                     	if	0	;tblptru may be non-zero
  1483  0010E2                     	endif
  1484  0010E2                     	if	0	;tblptru may be non-zero
  1485  0010E2                     	endif
  1486  0010E2  0008               	tblrd		*
  1487  0010E4  CFF5 F0BC          	movff	tablat,printf@c
  1488  0010E8  0100               	movlb	0	; () banked
  1489  0010EA  51BC               	movf	printf@c& (0+255),w,b
  1490                           
  1491                           ; Switch size 1, requested type "space"
  1492                           ; Number of cases is 4, Range of values is 0 to 105
  1493                           ; switch strategies available:
  1494                           ; Name         Instructions Cycles
  1495                           ; simple_byte           13     7 (average)
  1496                           ;	Chosen strategy is simple_byte
  1497  0010EC  0A00               	xorlw	0	; case 0
  1498  0010EE  B4D8               	btfsc	status,2,c
  1499  0010F0  0012               	return	
  1500  0010F2  0A64               	xorlw	100	; case 100
  1501  0010F4  B4D8               	btfsc	status,2,c
  1502  0010F6  D006               	goto	l186
  1503  0010F8  0A02               	xorlw	2	; case 102
  1504  0010FA  B4D8               	btfsc	status,2,c
  1505  0010FC  D7EA               	goto	l185
  1506  0010FE  0A0F               	xorlw	15	; case 105
  1507  001100  A4D8               	btfss	status,2,c
  1508  001102  D3EF               	goto	u3040
  1509  001104                     l186:
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;doprnt.c: 825: if(flag & (0x700)) {
  1513                           
  1514                           ; BSR set to: 0
  1515  001104  0E07               	movlw	7
  1516  001106  15AA               	andwf	(printf@flag+1)& (0+255),w,b
  1517  001108  B4D8               	btfsc	status,2,c
  1518  00110A  D2E5               	goto	l190
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;doprnt.c: 827: if(flag & 0x1000)
  1522  00110C  A9AA               	btfss	(printf@flag+1)& (0+255),4,b
  1523  00110E  D004               	goto	l191
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;doprnt.c: 829: prec = 6;
  1527  001110  0E00               	movlw	0
  1528  001112  6FBB               	movwf	(printf@prec+1)& (0+255),b
  1529  001114  0E06               	movlw	6
  1530  001116  6FBA               	movwf	printf@prec& (0+255),b
  1531  001118                     l191:
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1535                           
  1536                           ; BSR set to: 0
  1537  001118  C0A7  FFD9         	movff	printf@ap,fsr2l
  1538  00111C  C0A8  FFDA         	movff	printf@ap+1,fsr2h
  1539  001120  CFDE F0B7          	movff	postinc2,printf@fval
  1540  001124  CFDE F0B8          	movff	postinc2,printf@fval+1
  1541  001128  CFDD F0B9          	movff	postdec2,printf@fval+2
  1542                           
  1543                           ; BSR set to: 0
  1544  00112C  0E03               	movlw	3
  1545  00112E  27A7               	addwf	printf@ap& (0+255),f,b
  1546  001130  0E00               	movlw	0
  1547  001132  23A8               	addwfc	(printf@ap+1)& (0+255),f,b
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;doprnt.c: 831: if(fval < 0.0) {
  1551  001134  AFB9               	btfss	(printf@fval+2)& (0+255),7,b
  1552  001136  D011               	goto	l192
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;doprnt.c: 832: fval = -fval;
  1556  001138  C0B7  F001         	movff	printf@fval,___ftneg@f1
  1557  00113C  C0B8  F002         	movff	printf@fval+1,___ftneg@f1+1
  1558  001140  C0B9  F003         	movff	printf@fval+2,___ftneg@f1+2
  1559  001144  EC4B  F016         	call	___ftneg	;wreg free
  1560  001148  C001  F0B7         	movff	?___ftneg,printf@fval
  1561  00114C  C002  F0B8         	movff	?___ftneg+1,printf@fval+1
  1562  001150  C003  F0B9         	movff	?___ftneg+2,printf@fval+2
  1563                           
  1564                           ;doprnt.c: 833: flag |= 0x03;
  1565  001154  0E03               	movlw	3
  1566  001156  0100               	movlb	0	; () banked
  1567  001158  13A9               	iorwf	printf@flag& (0+255),f,b
  1568  00115A                     l192:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;doprnt.c: 834: }
  1572                           ;doprnt.c: 835: exp = 0;
  1573                           
  1574                           ; BSR set to: 0
  1575  00115A  0E00               	movlw	0
  1576  00115C  6FB6               	movwf	(printf@exp+1)& (0+255),b
  1577  00115E  0E00               	movlw	0
  1578  001160  6FB5               	movwf	printf@exp& (0+255),b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 836: if( fval!=0) {
  1582  001162  51B7               	movf	printf@fval& (0+255),w,b
  1583  001164  11B8               	iorwf	(printf@fval+1)& (0+255),w,b
  1584  001166  11B9               	iorwf	(printf@fval+2)& (0+255),w,b
  1585  001168  B4D8               	btfsc	status,2,c
  1586  00116A  D086               	goto	l197
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1590  00116C  0E82               	movlw	130
  1591  00116E  6E45               	movwf	??_printf& (0+255),c
  1592  001170  0EFF               	movlw	255
  1593  001172  6E46               	movwf	(??_printf+1)& (0+255),c
  1594  001174  C0B7  F047         	movff	printf@fval,??_printf+2
  1595  001178  C0B8  F048         	movff	printf@fval+1,??_printf+3
  1596  00117C  C0B9  F049         	movff	printf@fval+2,??_printf+4
  1597  001180  C0BA  F04A         	movff	printf@fval+3,??_printf+5
  1598  001184  0E10               	movlw	16
  1599  001186  D005               	goto	u2650
  1600  001188                     u2655:
  1601  001188  90D8               	bcf	status,0,c
  1602  00118A  324A               	rrcf	??_printf+5,f,c
  1603  00118C  3249               	rrcf	??_printf+4,f,c
  1604  00118E  3248               	rrcf	??_printf+3,f,c
  1605  001190  3247               	rrcf	??_printf+2,f,c
  1606  001192                     u2650:
  1607  001192  2EE8               	decfsz	wreg,f,c
  1608  001194  D7F9               	goto	u2655
  1609  001196  5047               	movf	??_printf+2,w,c
  1610  001198  2445               	addwf	??_printf,w,c
  1611  00119A  6FB5               	movwf	printf@exp& (0+255),b
  1612  00119C  0E00               	movlw	0
  1613  00119E  2046               	addwfc	??_printf+1,w,c
  1614  0011A0  6FB6               	movwf	(printf@exp+1)& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;doprnt.c: 838: exp--;
  1618  0011A2  07B5               	decf	printf@exp& (0+255),f,b
  1619  0011A4  A0D8               	btfss	status,0,c
  1620  0011A6  07B6               	decf	(printf@exp+1)& (0+255),f,b
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;doprnt.c: 839: exp *= 3;
  1624  0011A8  C0B5  F00F         	movff	printf@exp,___wmul@multiplier
  1625  0011AC  C0B6  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1626  0011B0  0E00               	movlw	0
  1627  0011B2  6E12               	movwf	___wmul@multiplicand+1,c
  1628  0011B4  0E03               	movlw	3
  1629  0011B6  6E11               	movwf	___wmul@multiplicand,c
  1630  0011B8  EC38  F016         	call	___wmul	;wreg free
  1631  0011BC  C00F  F0B5         	movff	?___wmul,printf@exp
  1632  0011C0  C010  F0B6         	movff	?___wmul+1,printf@exp+1
  1633                           
  1634                           ;doprnt.c: 840: exp /= 10;
  1635  0011C4  C0B5  F007         	movff	printf@exp,___awdiv@dividend
  1636  0011C8  C0B6  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1637  0011CC  0E00               	movlw	0
  1638  0011CE  6E0A               	movwf	___awdiv@divisor+1,c
  1639  0011D0  0E0A               	movlw	10
  1640  0011D2  6E09               	movwf	___awdiv@divisor,c
  1641  0011D4  EC9F  F014         	call	___awdiv	;wreg free
  1642  0011D8  C007  F0B5         	movff	?___awdiv,printf@exp
  1643  0011DC  C008  F0B6         	movff	?___awdiv+1,printf@exp+1
  1644                           
  1645                           ;doprnt.c: 841: if(exp < 0)
  1646  0011E0  0100               	movlb	0	; () banked
  1647  0011E2  AFB6               	btfss	(printf@exp+1)& (0+255),7,b
  1648  0011E4  D003               	goto	l194
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;doprnt.c: 842: exp--;
  1652  0011E6  07B5               	decf	printf@exp& (0+255),f,b
  1653  0011E8  A0D8               	btfss	status,0,c
  1654  0011EA  07B6               	decf	(printf@exp+1)& (0+255),f,b
  1655  0011EC                     l194:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1659                           
  1660                           ; BSR set to: 0
  1661  0011EC  51B5               	movf	printf@exp& (0+255),w,b
  1662  0011EE  0800               	sublw	0
  1663  0011F0  EC80  F00C         	call	_scale
  1664  0011F4  C024  F0AD         	movff	?_scale,printf@tmpval
  1665  0011F8  C025  F0AE         	movff	?_scale+1,printf@tmpval+1
  1666  0011FC  C026  F0AF         	movff	?_scale+2,printf@tmpval+2
  1667                           
  1668                           ;doprnt.c: 847: tmpval.integ *= fval;
  1669  001200  C0AD  F015         	movff	printf@tmpval,___ftmul@f1
  1670  001204  C0AE  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1671  001208  C0AF  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1672  00120C  C0B7  F018         	movff	printf@fval,___ftmul@f2
  1673  001210  C0B8  F019         	movff	printf@fval+1,___ftmul@f2+1
  1674  001214  C0B9  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1675  001218  EC99  F012         	call	___ftmul	;wreg free
  1676  00121C  C015  F0AD         	movff	?___ftmul,printf@tmpval
  1677  001220  C016  F0AE         	movff	?___ftmul+1,printf@tmpval+1
  1678  001224  C017  F0AF         	movff	?___ftmul+2,printf@tmpval+2
  1679                           
  1680                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1681  001228  C0AD  F001         	movff	printf@tmpval,___ftge@ff1
  1682  00122C  C0AE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1683  001230  C0AF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1684  001234  0E00               	movlw	0
  1685  001236  6E04               	movwf	___ftge@ff2,c
  1686  001238  0E80               	movlw	128
  1687  00123A  6E05               	movwf	___ftge@ff2+1,c
  1688  00123C  0E3F               	movlw	63
  1689  00123E  6E06               	movwf	___ftge@ff2+2,c
  1690  001240  EC57  F014         	call	___ftge	;wreg free
  1691  001244  B0D8               	btfsc	status,0,c
  1692  001246  D005               	goto	l195
  1693                           
  1694                           ;doprnt.c: 849: exp--;
  1695  001248  0100               	movlb	0	; () banked
  1696  00124A  07B5               	decf	printf@exp& (0+255),f,b
  1697  00124C  A0D8               	btfss	status,0,c
  1698  00124E  07B6               	decf	(printf@exp+1)& (0+255),f,b
  1699  001250  D013               	goto	l197
  1700  001252                     l195:
  1701                           
  1702                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1703                           
  1704                           ; BSR set to: 0
  1705  001252  C0AD  F001         	movff	printf@tmpval,___ftge@ff1
  1706  001256  C0AE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1707  00125A  C0AF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1708  00125E  0E00               	movlw	0
  1709  001260  6E04               	movwf	___ftge@ff2,c
  1710  001262  0E20               	movlw	32
  1711  001264  6E05               	movwf	___ftge@ff2+1,c
  1712  001266  0E41               	movlw	65
  1713  001268  6E06               	movwf	___ftge@ff2+2,c
  1714  00126A  EC57  F014         	call	___ftge	;wreg free
  1715  00126E  A0D8               	btfss	status,0,c
  1716  001270  D003               	goto	l197
  1717                           
  1718                           ;doprnt.c: 851: exp++;
  1719  001272  0100               	movlb	0	; () banked
  1720  001274  4BB5               	infsnz	printf@exp& (0+255),f,b
  1721  001276  2BB6               	incf	(printf@exp+1)& (0+255),f,b
  1722  001278                     l197:
  1723                           
  1724                           ;doprnt.c: 852: }
  1725                           ;doprnt.c: 1112: if(prec <= 12)
  1726                           
  1727                           ; BSR set to: 0
  1728                           
  1729                           ; BSR set to: 0
  1730                           
  1731                           ; BSR set to: 0
  1732  001278  0100               	movlb	0	; () banked
  1733  00127A  BFBB               	btfsc	(printf@prec+1)& (0+255),7,b
  1734  00127C  D006               	goto	u2690
  1735  00127E  51BB               	movf	(printf@prec+1)& (0+255),w,b
  1736  001280  E11B               	bnz	l2574
  1737  001282  0E0D               	movlw	13
  1738  001284  5DBA               	subwf	printf@prec& (0+255),w,b
  1739  001286  B0D8               	btfsc	status,0,c
  1740  001288  D017               	goto	l198
  1741  00128A                     u2690:
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;doprnt.c: 1113: fval += fround(prec);
  1745  00128A  C0B7  F02E         	movff	printf@fval,___ftadd@f1
  1746  00128E  C0B8  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1747  001292  C0B9  F030         	movff	printf@fval+2,___ftadd@f1+2
  1748  001296  51BA               	movf	printf@prec& (0+255),w,b
  1749  001298  EC84  F00E         	call	_fround
  1750  00129C  C024  F031         	movff	?_fround,___ftadd@f2
  1751  0012A0  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1752  0012A4  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1753  0012A8  EC96  F010         	call	___ftadd	;wreg free
  1754  0012AC  C02E  F0B7         	movff	?___ftadd,printf@fval
  1755  0012B0  C02F  F0B8         	movff	?___ftadd+1,printf@fval+1
  1756  0012B4  C030  F0B9         	movff	?___ftadd+2,printf@fval+2
  1757  0012B8                     l198:
  1758  0012B8                     l2574:
  1759                           
  1760                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1761  0012B8  0100               	movlb	0	; () banked
  1762  0012BA  BFB6               	btfsc	(printf@exp+1)& (0+255),7,b
  1763  0012BC  D006               	goto	u2700
  1764  0012BE  51B6               	movf	(printf@exp+1)& (0+255),w,b
  1765  0012C0  E120               	bnz	l2582
  1766  0012C2  0E0A               	movlw	10
  1767  0012C4  5DB5               	subwf	printf@exp& (0+255),w,b
  1768  0012C6  B0D8               	btfsc	status,0,c
  1769  0012C8  D01C               	goto	u2730
  1770  0012CA                     u2700:
  1771                           
  1772                           ; BSR set to: 0
  1773  0012CA  51B7               	movf	printf@fval& (0+255),w,b
  1774  0012CC  11B8               	iorwf	(printf@fval+1)& (0+255),w,b
  1775  0012CE  11B9               	iorwf	(printf@fval+2)& (0+255),w,b
  1776  0012D0  B4D8               	btfsc	status,2,c
  1777  0012D2  D056               	goto	l199
  1778                           
  1779                           ; BSR set to: 0
  1780  0012D4  C0B7  F02B         	movff	printf@fval,___fttol@f1
  1781  0012D8  C0B8  F02C         	movff	printf@fval+1,___fttol@f1+1
  1782  0012DC  C0B9  F02D         	movff	printf@fval+2,___fttol@f1+2
  1783  0012E0  EC13  F013         	call	___fttol	;wreg free
  1784  0012E4  502B               	movf	?___fttol,w,c
  1785  0012E6  102C               	iorwf	?___fttol+1,w,c
  1786  0012E8  102D               	iorwf	?___fttol+2,w,c
  1787  0012EA  102E               	iorwf	?___fttol+3,w,c
  1788  0012EC  A4D8               	btfss	status,2,c
  1789  0012EE  D048               	goto	l199
  1790  0012F0  0100               	movlb	0	; () banked
  1791  0012F2  BFB6               	btfsc	(printf@exp+1)& (0+255),7,b
  1792  0012F4  D045               	goto	l199
  1793  0012F6  51B6               	movf	(printf@exp+1)& (0+255),w,b
  1794  0012F8  E104               	bnz	l2582
  1795  0012FA  0E02               	movlw	2
  1796  0012FC  5DB5               	subwf	printf@exp& (0+255),w,b
  1797  0012FE  A0D8               	btfss	status,0,c
  1798  001300  D03F               	goto	l199
  1799  001302                     u2730:
  1800  001302                     l2582:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1804  001302  C0AD  F001         	movff	printf@tmpval,___ftge@ff1
  1805  001306  C0AE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1806  00130A  C0AF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1807  00130E  0E70               	movlw	112
  1808  001310  6E04               	movwf	___ftge@ff2,c
  1809  001312  0E89               	movlw	137
  1810  001314  6E05               	movwf	___ftge@ff2+1,c
  1811  001316  0E40               	movlw	64
  1812  001318  6E06               	movwf	___ftge@ff2+2,c
  1813  00131A  EC57  F014         	call	___ftge	;wreg free
  1814  00131E  B0D8               	btfsc	status,0,c
  1815  001320  D003               	goto	l202
  1816                           
  1817                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1818  001322  0100               	movlb	0	; () banked
  1819  001324  0EF7               	movlw	247
  1820  001326  D002               	goto	L1
  1821  001328                     l202:
  1822                           
  1823                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1824                           
  1825                           ; BSR set to: 0
  1826  001328  0100               	movlb	0	; () banked
  1827  00132A  0EF8               	movlw	248
  1828  00132C                     L1:
  1829  00132C  27B5               	addwf	printf@exp& (0+255),f,b
  1830  00132E  0EFF               	movlw	255
  1831  001330  23B6               	addwfc	(printf@exp+1)& (0+255),f,b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;doprnt.c: 1124: }
  1835                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1836                           
  1837                           ; BSR set to: 0
  1838  001332  51B5               	movf	printf@exp& (0+255),w,b
  1839  001334  EC80  F00C         	call	_scale
  1840  001338  C024  F0AD         	movff	?_scale,printf@tmpval
  1841  00133C  C025  F0AE         	movff	?_scale+1,printf@tmpval+1
  1842  001340  C026  F0AF         	movff	?_scale+2,printf@tmpval+2
  1843                           
  1844                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1845  001344  C0B7  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1846  001348  C0B8  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1847  00134C  C0B9  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1848  001350  C0AD  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1849  001354  C0AE  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1850  001358  C0AF  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1851  00135C  EC6C  F011         	call	__tdiv_to_l_	;wreg free
  1852  001360  C001  F0B1         	movff	?__tdiv_to_l_,printf@val
  1853  001364  C002  F0B2         	movff	?__tdiv_to_l_+1,printf@val+1
  1854  001368  C003  F0B3         	movff	?__tdiv_to_l_+2,printf@val+2
  1855  00136C  C004  F0B4         	movff	?__tdiv_to_l_+3,printf@val+3
  1856                           
  1857                           ;doprnt.c: 1129: fval = 0.0;
  1858  001370  0E00               	movlw	0
  1859  001372  0100               	movlb	0	; () banked
  1860  001374  6FB7               	movwf	printf@fval& (0+255),b
  1861  001376  0E00               	movlw	0
  1862  001378  6FB8               	movwf	(printf@fval+1)& (0+255),b
  1863  00137A  0E00               	movlw	0
  1864  00137C  6FB9               	movwf	(printf@fval+2)& (0+255),b
  1865                           
  1866                           ;doprnt.c: 1130: } else {
  1867  00137E  D033               	goto	l208
  1868  001380                     l199:
  1869                           
  1870                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1871                           
  1872                           ; BSR set to: 0
  1873  001380  C0B7  F02B         	movff	printf@fval,___fttol@f1
  1874  001384  C0B8  F02C         	movff	printf@fval+1,___fttol@f1+1
  1875  001388  C0B9  F02D         	movff	printf@fval+2,___fttol@f1+2
  1876  00138C  EC13  F013         	call	___fttol	;wreg free
  1877  001390  C02B  F0B1         	movff	?___fttol,printf@val
  1878  001394  C02C  F0B2         	movff	?___fttol+1,printf@val+1
  1879  001398  C02D  F0B3         	movff	?___fttol+2,printf@val+2
  1880  00139C  C02E  F0B4         	movff	?___fttol+3,printf@val+3
  1881                           
  1882                           ;doprnt.c: 1132: fval -= (double)val;
  1883  0013A0  C0B7  F03A         	movff	printf@fval,___ftsub@f1
  1884  0013A4  C0B8  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1885  0013A8  C0B9  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1886  0013AC  C0B1  F009         	movff	printf@val,___lltoft@c
  1887  0013B0  C0B2  F00A         	movff	printf@val+1,___lltoft@c+1
  1888  0013B4  C0B3  F00B         	movff	printf@val+2,___lltoft@c+2
  1889  0013B8  C0B4  F00C         	movff	printf@val+3,___lltoft@c+3
  1890  0013BC  EC8D  F015         	call	___lltoft	;wreg free
  1891  0013C0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1892  0013C4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1893  0013C8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1894  0013CC  ECE1  F015         	call	___ftsub	;wreg free
  1895  0013D0  C03A  F0B7         	movff	?___ftsub,printf@fval
  1896  0013D4  C03B  F0B8         	movff	?___ftsub+1,printf@fval+1
  1897  0013D8  C03C  F0B9         	movff	?___ftsub+2,printf@fval+2
  1898                           
  1899                           ;doprnt.c: 1133: exp = 0;
  1900  0013DC  0E00               	movlw	0
  1901  0013DE  0100               	movlb	0	; () banked
  1902  0013E0  6FB6               	movwf	(printf@exp+1)& (0+255),b
  1903  0013E2  0E00               	movlw	0
  1904  0013E4  6FB5               	movwf	printf@exp& (0+255),b
  1905  0013E6                     l208:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;doprnt.c: 1134: }
  1909                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1910                           
  1911                           ; BSR set to: 0
  1912  0013E6  0E01               	movlw	1
  1913  0013E8  6FBC               	movwf	printf@c& (0+255),b
  1914  0013EA                     l2602:
  1915                           
  1916                           ; BSR set to: 0
  1917  0013EA  0E0A               	movlw	10
  1918  0013EC  19BC               	xorwf	printf@c& (0+255),w,b
  1919  0013EE  B4D8               	btfsc	status,2,c
  1920  0013F0  D018               	goto	u2770
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;doprnt.c: 1137: if(val < dpowers[c])
  1924                           
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928  0013F2  51BC               	movf	printf@c& (0+255),w,b
  1929  0013F4  0D04               	mullw	4
  1930  0013F6  0E01               	movlw	low _dpowers
  1931  0013F8  24F3               	addwf	prodl,w,c
  1932  0013FA  6EF6               	movwf	tblptrl,c
  1933  0013FC  0E0F               	movlw	high _dpowers
  1934  0013FE  20F4               	addwfc	prodh,w,c
  1935  001400  6EF7               	movwf	tblptrh,c
  1936  001402                     	if	0	;There are less than 3 active tblptr bytes
  1937  001402                     	endif
  1938  001402  0009               	tblrd		*+
  1939  001404  50F5               	movf	tablat,w,c
  1940  001406  5DB1               	subwf	printf@val& (0+255),w,b
  1941  001408  0009               	tblrd		*+
  1942  00140A  50F5               	movf	tablat,w,c
  1943  00140C  59B2               	subwfb	(printf@val+1)& (0+255),w,b
  1944  00140E  0009               	tblrd		*+
  1945  001410  50F5               	movf	tablat,w,c
  1946  001412  59B3               	subwfb	(printf@val+2)& (0+255),w,b
  1947  001414  0009               	tblrd		*+
  1948  001416  50F5               	movf	tablat,w,c
  1949  001418  59B4               	subwfb	(printf@val+3)& (0+255),w,b
  1950  00141A  A0D8               	btfss	status,0,c
  1951  00141C  D002               	goto	u2770
  1952                           
  1953                           ; BSR set to: 0
  1954                           
  1955                           ; BSR set to: 0
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;doprnt.c: 1138: break;
  1959  00141E  2BBC               	incf	printf@c& (0+255),f,b
  1960  001420  D7E4               	goto	l2602
  1961  001422                     u2770:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1142: width -= prec + c + exp;
  1965                           
  1966                           ; BSR set to: 0
  1967  001422  C0BC  F045         	movff	printf@c,??_printf
  1968  001426  6A46               	clrf	(??_printf+1)& (0+255),c
  1969  001428  BE45               	btfsc	??_printf& (0+255),7,c
  1970  00142A  0646               	decf	(??_printf+1)& (0+255),f,c
  1971  00142C  51BA               	movf	printf@prec& (0+255),w,b
  1972  00142E  2645               	addwf	??_printf,f,c
  1973  001430  51BB               	movf	(printf@prec+1)& (0+255),w,b
  1974  001432  2246               	addwfc	??_printf+1,f,c
  1975  001434  51B5               	movf	printf@exp& (0+255),w,b
  1976  001436  2645               	addwf	??_printf,f,c
  1977  001438  51B6               	movf	(printf@exp+1)& (0+255),w,b
  1978  00143A  2246               	addwfc	??_printf+1,f,c
  1979  00143C  5045               	movf	??_printf,w,c
  1980  00143E  5FAB               	subwf	printf@width& (0+255),f,b
  1981  001440  5046               	movf	??_printf+1,w,c
  1982  001442  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  1983                           
  1984                           ;doprnt.c: 1143: if(
  1985                           ;doprnt.c: 1147: prec)
  1986  001444  51BA               	movf	printf@prec& (0+255),w,b
  1987  001446  11BB               	iorwf	(printf@prec+1)& (0+255),w,b
  1988  001448  B4D8               	btfsc	status,2,c
  1989  00144A  D003               	goto	l212
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;doprnt.c: 1148: width--;
  1993  00144C  07AB               	decf	printf@width& (0+255),f,b
  1994  00144E  A0D8               	btfss	status,0,c
  1995  001450  07AC               	decf	(printf@width+1)& (0+255),f,b
  1996  001452                     l212:
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;doprnt.c: 1149: if(flag & 0x03)
  2000                           
  2001                           ; BSR set to: 0
  2002  001452  0E03               	movlw	3
  2003  001454  15A9               	andwf	printf@flag& (0+255),w,b
  2004  001456  6E45               	movwf	??_printf& (0+255),c
  2005  001458  0E00               	movlw	0
  2006  00145A  15AA               	andwf	(printf@flag+1)& (0+255),w,b
  2007  00145C  6E46               	movwf	(??_printf+1)& (0+255),c
  2008  00145E  5045               	movf	??_printf,w,c
  2009  001460  1046               	iorwf	??_printf+1,w,c
  2010  001462  B4D8               	btfsc	status,2,c
  2011  001464  D008               	goto	l214
  2012  001466  D004               	goto	L2
  2013  001468                     l2622:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 1181: (putch(' ') );
  2017  001468  0E20               	movlw	32
  2018  00146A  EC7E  F016         	call	_putch
  2019                           
  2020                           ;doprnt.c: 1182: width--;
  2021  00146E  0100               	movlb	0	; () banked
  2022  001470                     L2:
  2023  001470  07AB               	decf	printf@width& (0+255),f,b
  2024  001472  A0D8               	btfss	status,0,c
  2025  001474  07AC               	decf	(printf@width+1)& (0+255),f,b
  2026  001476                     l214:
  2027                           
  2028                           ; BSR set to: 0
  2029                           
  2030                           ; BSR set to: 0
  2031  001476  BFAC               	btfsc	(printf@width+1)& (0+255),7,b
  2032  001478  D005               	goto	u2800
  2033  00147A  51AC               	movf	(printf@width+1)& (0+255),w,b
  2034  00147C  E1F5               	bnz	l2622
  2035  00147E  05AB               	decf	printf@width& (0+255),w,b
  2036  001480  B0D8               	btfsc	status,0,c
  2037  001482  D7F2               	goto	l215
  2038  001484                     u2800:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;doprnt.c: 1183: }
  2042                           ;doprnt.c: 1188: if(flag & 0x03)
  2043                           
  2044                           ; BSR set to: 0
  2045  001484  0E03               	movlw	3
  2046  001486  15A9               	andwf	printf@flag& (0+255),w,b
  2047  001488  6E45               	movwf	??_printf& (0+255),c
  2048  00148A  0E00               	movlw	0
  2049  00148C  15AA               	andwf	(printf@flag+1)& (0+255),w,b
  2050  00148E  6E46               	movwf	(??_printf+1)& (0+255),c
  2051  001490  5045               	movf	??_printf,w,c
  2052  001492  1046               	iorwf	??_printf+1,w,c
  2053  001494  B4D8               	btfsc	status,2,c
  2054  001496  D04A               	goto	l218
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;doprnt.c: 1190: (putch('-') );
  2058  001498  0E2D               	movlw	45
  2059  00149A  EC7E  F016         	call	_putch
  2060                           
  2061                           ;doprnt.c: 1195: }
  2062                           ;doprnt.c: 1196: while(c--) {
  2063  00149E  D046               	goto	l218
  2064  0014A0                     
  2065                           ;doprnt.c: 1200: {
  2066                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2067  0014A0  C0B1  F001         	movff	printf@val,___lldiv@dividend
  2068  0014A4  C0B2  F002         	movff	printf@val+1,___lldiv@dividend+1
  2069  0014A8  C0B3  F003         	movff	printf@val+2,___lldiv@dividend+2
  2070  0014AC  C0B4  F004         	movff	printf@val+3,___lldiv@dividend+3
  2071  0014B0  0100               	movlb	0	; () banked
  2072  0014B2  51BC               	movf	printf@c& (0+255),w,b
  2073  0014B4  0D04               	mullw	4
  2074  0014B6  0E01               	movlw	low _dpowers
  2075  0014B8  24F3               	addwf	prodl,w,c
  2076  0014BA  6EF6               	movwf	tblptrl,c
  2077  0014BC  0E0F               	movlw	high _dpowers
  2078  0014BE  20F4               	addwfc	prodh,w,c
  2079  0014C0  6EF7               	movwf	tblptrh,c
  2080  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  2081  0014C2                     	endif
  2082  0014C2  0009               	tblrd		*+
  2083  0014C4  CFF5 F005          	movff	tablat,___lldiv@divisor
  2084  0014C8  0009               	tblrd		*+
  2085  0014CA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2086  0014CE  0009               	tblrd		*+
  2087  0014D0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2088  0014D4  000A               	tblrd		*-
  2089  0014D6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2090  0014DA  ECE1  F014         	call	___lldiv	;wreg free
  2091  0014DE  C001  F0AD         	movff	?___lldiv,printf@tmpval
  2092  0014E2  C002  F0AE         	movff	?___lldiv+1,printf@tmpval+1
  2093  0014E6  C003  F0AF         	movff	?___lldiv+2,printf@tmpval+2
  2094  0014EA  C004  F0B0         	movff	?___lldiv+3,printf@tmpval+3
  2095                           
  2096                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2097  0014EE  C0AD  F00E         	movff	printf@tmpval,___llmod@dividend
  2098  0014F2  C0AE  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2099  0014F6  C0AF  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2100  0014FA  C0B0  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2101  0014FE  0E0A               	movlw	10
  2102  001500  6E12               	movwf	___llmod@divisor,c
  2103  001502  0E00               	movlw	0
  2104  001504  6E13               	movwf	___llmod@divisor+1,c
  2105  001506  0E00               	movlw	0
  2106  001508  6E14               	movwf	___llmod@divisor+2,c
  2107  00150A  0E00               	movlw	0
  2108  00150C  6E15               	movwf	___llmod@divisor+3,c
  2109  00150E  EC5A  F015         	call	___llmod	;wreg free
  2110  001512  C00E  F0AD         	movff	?___llmod,printf@tmpval
  2111  001516  C00F  F0AE         	movff	?___llmod+1,printf@tmpval+1
  2112  00151A  C010  F0AF         	movff	?___llmod+2,printf@tmpval+2
  2113  00151E  C011  F0B0         	movff	?___llmod+3,printf@tmpval+3
  2114                           
  2115                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2116  001522  0100               	movlb	0	; () banked
  2117  001524  51AD               	movf	printf@tmpval& (0+255),w,b
  2118  001526  0F30               	addlw	48
  2119  001528  EC7E  F016         	call	_putch
  2120  00152C                     l218:
  2121  00152C  0100               	movlb	0	; () banked
  2122  00152E  07BC               	decf	printf@c& (0+255),f,b
  2123  001530  29BC               	incf	printf@c& (0+255),w,b
  2124  001532  B4D8               	btfsc	status,2,c
  2125  001534  D008               	goto	l221
  2126  001536  D7B4               	goto	l219
  2127  001538                     l2640:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;doprnt.c: 1208: (putch('0') );
  2131  001538  0E30               	movlw	48
  2132  00153A  EC7E  F016         	call	_putch
  2133                           
  2134                           ;doprnt.c: 1209: exp--;
  2135  00153E  0100               	movlb	0	; () banked
  2136  001540  07B5               	decf	printf@exp& (0+255),f,b
  2137  001542  A0D8               	btfss	status,0,c
  2138  001544  07B6               	decf	(printf@exp+1)& (0+255),f,b
  2139  001546                     l221:
  2140                           
  2141                           ; BSR set to: 0
  2142                           
  2143                           ; BSR set to: 0
  2144  001546  BFB6               	btfsc	(printf@exp+1)& (0+255),7,b
  2145  001548  D005               	goto	u2830
  2146  00154A  51B6               	movf	(printf@exp+1)& (0+255),w,b
  2147  00154C  E1F5               	bnz	l2640
  2148  00154E  05B5               	decf	printf@exp& (0+255),w,b
  2149  001550  B0D8               	btfsc	status,0,c
  2150  001552  D7F2               	goto	l222
  2151  001554                     u2830:
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 1210: }
  2155                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2156                           
  2157                           ; BSR set to: 0
  2158  001554  BFBB               	btfsc	(printf@prec+1)& (0+255),7,b
  2159  001556  D009               	goto	l224
  2160  001558  51BB               	movf	(printf@prec+1)& (0+255),w,b
  2161  00155A  E104               	bnz	u2840
  2162  00155C  0E09               	movlw	9
  2163  00155E  5DBA               	subwf	printf@prec& (0+255),w,b
  2164  001560  A0D8               	btfss	status,0,c
  2165  001562  D003               	goto	l224
  2166  001564                     u2840:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2170  001564  0E08               	movlw	8
  2171  001566  6FBC               	movwf	printf@c& (0+255),b
  2172  001568  D002               	goto	l225
  2173  00156A                     l224:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;doprnt.c: 1213: else
  2177                           ;doprnt.c: 1214: c = prec;
  2178  00156A  C0BA  F0BC         	movff	printf@prec,printf@c
  2179  00156E                     l225:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1215: prec -= c;
  2183                           
  2184                           ; BSR set to: 0
  2185  00156E  51BC               	movf	printf@c& (0+255),w,b
  2186  001570  5FBA               	subwf	printf@prec& (0+255),f,b
  2187  001572  0E00               	movlw	0
  2188  001574  BFBC               	btfsc	printf@c& (0+255),7,b
  2189  001576  0EFF               	movlw	255
  2190  001578  5BBB               	subwfb	(printf@prec+1)& (0+255),f,b
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;doprnt.c: 1219: if(c)
  2194  00157A  51BC               	movf	printf@c& (0+255),w,b
  2195  00157C  B4D8               	btfsc	status,2,c
  2196  00157E  D003               	goto	l226
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 1221: (putch('.') );
  2200  001580  0E2E               	movlw	46
  2201  001582  EC7E  F016         	call	_putch
  2202  001586                     l226:
  2203                           
  2204                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2205  001586  0100               	movlb	0	; () banked
  2206  001588  51BC               	movf	printf@c& (0+255),w,b
  2207  00158A  EC80  F00C         	call	_scale
  2208  00158E  C024  F0A4         	movff	?_scale,_printf$931
  2209  001592  C025  F0A5         	movff	?_scale+1,_printf$931+1
  2210  001596  C026  F0A6         	movff	?_scale+2,_printf$931+2
  2211                           
  2212                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2213  00159A  C0B7  F018         	movff	printf@fval,___ftmul@f2
  2214  00159E  C0B8  F019         	movff	printf@fval+1,___ftmul@f2+1
  2215  0015A2  C0B9  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2216  0015A6  C0A4  F015         	movff	_printf$931,___ftmul@f1
  2217  0015AA  C0A5  F016         	movff	_printf$931+1,___ftmul@f1+1
  2218  0015AE  C0A6  F017         	movff	_printf$931+2,___ftmul@f1+2
  2219  0015B2  EC99  F012         	call	___ftmul	;wreg free
  2220  0015B6  C015  F02B         	movff	?___ftmul,___fttol@f1
  2221  0015BA  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2222  0015BE  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2223  0015C2  EC13  F013         	call	___fttol	;wreg free
  2224  0015C6  C02B  F0B1         	movff	?___fttol,printf@val
  2225  0015CA  C02C  F0B2         	movff	?___fttol+1,printf@val+1
  2226  0015CE  C02D  F0B3         	movff	?___fttol+2,printf@val+2
  2227  0015D2  C02E  F0B4         	movff	?___fttol+3,printf@val+3
  2228                           
  2229                           ;doprnt.c: 1228: while(c--) {
  2230  0015D6  D06D               	goto	l227
  2231  0015D8                     
  2232                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2233  0015D8  C0B1  F001         	movff	printf@val,___lldiv@dividend
  2234  0015DC  C0B2  F002         	movff	printf@val+1,___lldiv@dividend+1
  2235  0015E0  C0B3  F003         	movff	printf@val+2,___lldiv@dividend+2
  2236  0015E4  C0B4  F004         	movff	printf@val+3,___lldiv@dividend+3
  2237  0015E8  0100               	movlb	0	; () banked
  2238  0015EA  51BC               	movf	printf@c& (0+255),w,b
  2239  0015EC  0D04               	mullw	4
  2240  0015EE  0E01               	movlw	low _dpowers
  2241  0015F0  24F3               	addwf	prodl,w,c
  2242  0015F2  6EF6               	movwf	tblptrl,c
  2243  0015F4  0E0F               	movlw	high _dpowers
  2244  0015F6  20F4               	addwfc	prodh,w,c
  2245  0015F8  6EF7               	movwf	tblptrh,c
  2246  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  2247  0015FA                     	endif
  2248  0015FA  0009               	tblrd		*+
  2249  0015FC  CFF5 F005          	movff	tablat,___lldiv@divisor
  2250  001600  0009               	tblrd		*+
  2251  001602  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2252  001606  0009               	tblrd		*+
  2253  001608  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2254  00160C  000A               	tblrd		*-
  2255  00160E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2256  001612  ECE1  F014         	call	___lldiv	;wreg free
  2257  001616  C001  F0AD         	movff	?___lldiv,printf@tmpval
  2258  00161A  C002  F0AE         	movff	?___lldiv+1,printf@tmpval+1
  2259  00161E  C003  F0AF         	movff	?___lldiv+2,printf@tmpval+2
  2260  001622  C004  F0B0         	movff	?___lldiv+3,printf@tmpval+3
  2261                           
  2262                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2263  001626  C0AD  F00E         	movff	printf@tmpval,___llmod@dividend
  2264  00162A  C0AE  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2265  00162E  C0AF  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2266  001632  C0B0  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2267  001636  0E0A               	movlw	10
  2268  001638  6E12               	movwf	___llmod@divisor,c
  2269  00163A  0E00               	movlw	0
  2270  00163C  6E13               	movwf	___llmod@divisor+1,c
  2271  00163E  0E00               	movlw	0
  2272  001640  6E14               	movwf	___llmod@divisor+2,c
  2273  001642  0E00               	movlw	0
  2274  001644  6E15               	movwf	___llmod@divisor+3,c
  2275  001646  EC5A  F015         	call	___llmod	;wreg free
  2276  00164A  C00E  F0AD         	movff	?___llmod,printf@tmpval
  2277  00164E  C00F  F0AE         	movff	?___llmod+1,printf@tmpval+1
  2278  001652  C010  F0AF         	movff	?___llmod+2,printf@tmpval+2
  2279  001656  C011  F0B0         	movff	?___llmod+3,printf@tmpval+3
  2280                           
  2281                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2282  00165A  0100               	movlb	0	; () banked
  2283  00165C  51AD               	movf	printf@tmpval& (0+255),w,b
  2284  00165E  0F30               	addlw	48
  2285  001660  EC7E  F016         	call	_putch
  2286                           
  2287                           ;doprnt.c: 1232: val %= dpowers[c];
  2288  001664  C0B1  F00E         	movff	printf@val,___llmod@dividend
  2289  001668  C0B2  F00F         	movff	printf@val+1,___llmod@dividend+1
  2290  00166C  C0B3  F010         	movff	printf@val+2,___llmod@dividend+2
  2291  001670  C0B4  F011         	movff	printf@val+3,___llmod@dividend+3
  2292  001674  0100               	movlb	0	; () banked
  2293  001676  51BC               	movf	printf@c& (0+255),w,b
  2294  001678  0D04               	mullw	4
  2295  00167A  0E01               	movlw	low _dpowers
  2296  00167C  24F3               	addwf	prodl,w,c
  2297  00167E  6EF6               	movwf	tblptrl,c
  2298  001680  0E0F               	movlw	high _dpowers
  2299  001682  20F4               	addwfc	prodh,w,c
  2300  001684  6EF7               	movwf	tblptrh,c
  2301  001686                     	if	0	;There are less than 3 active tblptr bytes
  2302  001686                     	endif
  2303  001686  0009               	tblrd		*+
  2304  001688  CFF5 F012          	movff	tablat,___llmod@divisor
  2305  00168C  0009               	tblrd		*+
  2306  00168E  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2307  001692  0009               	tblrd		*+
  2308  001694  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2309  001698  000A               	tblrd		*-
  2310  00169A  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2311  00169E  EC5A  F015         	call	___llmod	;wreg free
  2312  0016A2  C00E  F0B1         	movff	?___llmod,printf@val
  2313  0016A6  C00F  F0B2         	movff	?___llmod+1,printf@val+1
  2314  0016AA  C010  F0B3         	movff	?___llmod+2,printf@val+2
  2315  0016AE  C011  F0B4         	movff	?___llmod+3,printf@val+3
  2316  0016B2                     l227:
  2317  0016B2  0100               	movlb	0	; () banked
  2318  0016B4  07BC               	decf	printf@c& (0+255),f,b
  2319  0016B6  29BC               	incf	printf@c& (0+255),w,b
  2320  0016B8  B4D8               	btfsc	status,2,c
  2321  0016BA  D008               	goto	l230
  2322  0016BC  D78D               	goto	l228
  2323  0016BE                     
  2324                           ; BSR set to: 0
  2325                           ;doprnt.c: 1236: (putch('0') );
  2326                           
  2327                           ; BSR set to: 0
  2328  0016BE  0E30               	movlw	48
  2329  0016C0  EC7E  F016         	call	_putch
  2330                           
  2331                           ;doprnt.c: 1237: prec--;
  2332  0016C4  0100               	movlb	0	; () banked
  2333  0016C6  07BA               	decf	printf@prec& (0+255),f,b
  2334  0016C8  A0D8               	btfss	status,0,c
  2335  0016CA  07BB               	decf	(printf@prec+1)& (0+255),f,b
  2336  0016CC                     l230:
  2337                           
  2338                           ; BSR set to: 0
  2339                           
  2340                           ; BSR set to: 0
  2341  0016CC  51BA               	movf	printf@prec& (0+255),w,b
  2342  0016CE  11BB               	iorwf	(printf@prec+1)& (0+255),w,b
  2343  0016D0  B4D8               	btfsc	status,2,c
  2344  0016D2  D107               	goto	u3040
  2345  0016D4  D7F4               	goto	l231
  2346  0016D6                     l190:
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 1246: }
  2350                           ;doprnt.c: 1253: {
  2351                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2352                           
  2353                           ; BSR set to: 0
  2354  0016D6  C0A7  FFD9         	movff	printf@ap,fsr2l
  2355  0016DA  C0A8  FFDA         	movff	printf@ap+1,fsr2h
  2356  0016DE  CFDE F0B1          	movff	postinc2,printf@val
  2357  0016E2  CFDD F0B2          	movff	postdec2,printf@val+1
  2358  0016E6  0E00               	movlw	0
  2359  0016E8  BFB2               	btfsc	(printf@val+1)& (0+255),7,b
  2360  0016EA  0EFF               	movlw	-1
  2361  0016EC  6FB3               	movwf	(printf@val+2)& (0+255),b
  2362  0016EE  6FB4               	movwf	(printf@val+3)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365  0016F0  0E02               	movlw	2
  2366  0016F2  27A7               	addwf	printf@ap& (0+255),f,b
  2367  0016F4  0E00               	movlw	0
  2368  0016F6  23A8               	addwfc	(printf@ap+1)& (0+255),f,b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 1261: if((long)val < 0) {
  2372  0016F8  AFB4               	btfss	(printf@val+3)& (0+255),7,b
  2373  0016FA  D00A               	goto	l233
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1262: flag |= 0x03;
  2377  0016FC  0E03               	movlw	3
  2378  0016FE  13A9               	iorwf	printf@flag& (0+255),f,b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;doprnt.c: 1263: val = -val;
  2382  001700  1FB4               	comf	(printf@val+3)& (0+255),f,b
  2383  001702  1FB3               	comf	(printf@val+2)& (0+255),f,b
  2384  001704  1FB2               	comf	(printf@val+1)& (0+255),f,b
  2385  001706  6DB1               	negf	printf@val& (0+255),b
  2386  001708  0E00               	movlw	0
  2387  00170A  23B2               	addwfc	(printf@val+1)& (0+255),f,b
  2388  00170C  23B3               	addwfc	(printf@val+2)& (0+255),f,b
  2389  00170E  23B4               	addwfc	(printf@val+3)& (0+255),f,b
  2390  001710                     l233:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;doprnt.c: 1264: }
  2394                           ;doprnt.c: 1266: }
  2395                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2396                           
  2397                           ; BSR set to: 0
  2398  001710  51BA               	movf	printf@prec& (0+255),w,b
  2399  001712  11BB               	iorwf	(printf@prec+1)& (0+255),w,b
  2400  001714  A4D8               	btfss	status,2,c
  2401  001716  D008               	goto	l234
  2402                           
  2403                           ; BSR set to: 0
  2404  001718  51B1               	movf	printf@val& (0+255),w,b
  2405  00171A  11B2               	iorwf	(printf@val+1)& (0+255),w,b
  2406  00171C  11B3               	iorwf	(printf@val+2)& (0+255),w,b
  2407  00171E  11B4               	iorwf	(printf@val+3)& (0+255),w,b
  2408  001720  A4D8               	btfss	status,2,c
  2409  001722  D002               	goto	l234
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 1291: prec++;
  2413  001724  4BBA               	infsnz	printf@prec& (0+255),f,b
  2414  001726  2BBB               	incf	(printf@prec+1)& (0+255),f,b
  2415  001728                     l234:
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2419                           
  2420                           ; BSR set to: 0
  2421  001728  0E01               	movlw	1
  2422  00172A  6FBC               	movwf	printf@c& (0+255),b
  2423  00172C                     l2692:
  2424                           
  2425                           ; BSR set to: 0
  2426  00172C  0E0A               	movlw	10
  2427  00172E  19BC               	xorwf	printf@c& (0+255),w,b
  2428  001730  B4D8               	btfsc	status,2,c
  2429  001732  D018               	goto	u2930
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;doprnt.c: 1306: if(val < dpowers[c])
  2433                           
  2434                           ; BSR set to: 0
  2435                           
  2436                           ; BSR set to: 0
  2437  001734  51BC               	movf	printf@c& (0+255),w,b
  2438  001736  0D04               	mullw	4
  2439  001738  0E01               	movlw	low _dpowers
  2440  00173A  24F3               	addwf	prodl,w,c
  2441  00173C  6EF6               	movwf	tblptrl,c
  2442  00173E  0E0F               	movlw	high _dpowers
  2443  001740  20F4               	addwfc	prodh,w,c
  2444  001742  6EF7               	movwf	tblptrh,c
  2445  001744                     	if	0	;There are less than 3 active tblptr bytes
  2446  001744                     	endif
  2447  001744  0009               	tblrd		*+
  2448  001746  50F5               	movf	tablat,w,c
  2449  001748  5DB1               	subwf	printf@val& (0+255),w,b
  2450  00174A  0009               	tblrd		*+
  2451  00174C  50F5               	movf	tablat,w,c
  2452  00174E  59B2               	subwfb	(printf@val+1)& (0+255),w,b
  2453  001750  0009               	tblrd		*+
  2454  001752  50F5               	movf	tablat,w,c
  2455  001754  59B3               	subwfb	(printf@val+2)& (0+255),w,b
  2456  001756  0009               	tblrd		*+
  2457  001758  50F5               	movf	tablat,w,c
  2458  00175A  59B4               	subwfb	(printf@val+3)& (0+255),w,b
  2459  00175C  A0D8               	btfss	status,0,c
  2460  00175E  D002               	goto	u2930
  2461                           
  2462                           ; BSR set to: 0
  2463                           
  2464                           ; BSR set to: 0
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;doprnt.c: 1307: break;
  2468  001760  2BBC               	incf	printf@c& (0+255),f,b
  2469  001762  D7E4               	goto	l2692
  2470  001764                     u2930:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 1339: if(c < prec)
  2474                           
  2475                           ; BSR set to: 0
  2476  001764  0E80               	movlw	128
  2477  001766  BFBC               	btfsc	printf@c& (0+255),7,b
  2478  001768  0E7F               	movlw	127
  2479  00176A  6E45               	movwf	??_printf& (0+255),c
  2480  00176C  51BA               	movf	printf@prec& (0+255),w,b
  2481  00176E  5DBC               	subwf	printf@c& (0+255),w,b
  2482  001770  51BB               	movf	(printf@prec+1)& (0+255),w,b
  2483  001772  0A80               	xorlw	128
  2484  001774  5845               	subwfb	??_printf& (0+255),w,c
  2485  001776  B0D8               	btfsc	status,0,c
  2486  001778  D003               	goto	l238
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 1340: c = prec;
  2490  00177A  C0BA  F0BC         	movff	printf@prec,printf@c
  2491  00177E  D010               	goto	l240
  2492  001780                     l238:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 1341: else if(prec < c)
  2496                           
  2497                           ; BSR set to: 0
  2498  001780  51BB               	movf	(printf@prec+1)& (0+255),w,b
  2499  001782  0A80               	xorlw	128
  2500  001784  6E45               	movwf	??_printf& (0+255),c
  2501  001786  51BC               	movf	printf@c& (0+255),w,b
  2502  001788  5DBA               	subwf	printf@prec& (0+255),w,b
  2503  00178A  0E80               	movlw	128
  2504  00178C  BFBC               	btfsc	printf@c& (0+255),7,b
  2505  00178E  0E7F               	movlw	127
  2506  001790  5845               	subwfb	??_printf& (0+255),w,c
  2507  001792  B0D8               	btfsc	status,0,c
  2508  001794  D005               	goto	l240
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1342: prec = c;
  2512  001796  51BC               	movf	printf@c& (0+255),w,b
  2513  001798  6FBA               	movwf	printf@prec& (0+255),b
  2514  00179A  6BBB               	clrf	(printf@prec+1)& (0+255),b
  2515  00179C  BFBA               	btfsc	printf@prec& (0+255),7,b
  2516  00179E  07BB               	decf	(printf@prec+1)& (0+255),f,b
  2517  0017A0                     l240:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2521                           
  2522                           ; BSR set to: 0
  2523                           
  2524                           ; BSR set to: 0
  2525  0017A0  51AB               	movf	printf@width& (0+255),w,b
  2526  0017A2  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  2527  0017A4  B4D8               	btfsc	status,2,c
  2528  0017A6  D00D               	goto	l241
  2529                           
  2530                           ; BSR set to: 0
  2531  0017A8  0E03               	movlw	3
  2532  0017AA  15A9               	andwf	printf@flag& (0+255),w,b
  2533  0017AC  6E45               	movwf	??_printf& (0+255),c
  2534  0017AE  0E00               	movlw	0
  2535  0017B0  15AA               	andwf	(printf@flag+1)& (0+255),w,b
  2536  0017B2  6E46               	movwf	(??_printf+1)& (0+255),c
  2537  0017B4  5045               	movf	??_printf,w,c
  2538  0017B6  1046               	iorwf	??_printf+1,w,c
  2539  0017B8  B4D8               	btfsc	status,2,c
  2540  0017BA  D003               	goto	l241
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;doprnt.c: 1346: width--;
  2544  0017BC  07AB               	decf	printf@width& (0+255),f,b
  2545  0017BE  A0D8               	btfss	status,0,c
  2546  0017C0  07AC               	decf	(printf@width+1)& (0+255),f,b
  2547  0017C2                     l241:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2551                           
  2552                           ; BSR set to: 0
  2553  0017C2  ADAA               	btfss	(printf@flag+1)& (0+255),6,b
  2554  0017C4  D013               	goto	l244
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;doprnt.c: 1349: if(width > prec)
  2558  0017C6  51AB               	movf	printf@width& (0+255),w,b
  2559  0017C8  5DBA               	subwf	printf@prec& (0+255),w,b
  2560  0017CA  51BB               	movf	(printf@prec+1)& (0+255),w,b
  2561  0017CC  0A80               	xorlw	128
  2562  0017CE  6E45               	movwf	??_printf& (0+255),c
  2563  0017D0  51AC               	movf	(printf@width+1)& (0+255),w,b
  2564  0017D2  0A80               	xorlw	128
  2565  0017D4  5845               	subwfb	??_printf& (0+255),w,c
  2566  0017D6  B0D8               	btfsc	status,0,c
  2567  0017D8  D005               	goto	l243
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;doprnt.c: 1350: width -= prec;
  2571  0017DA  51BA               	movf	printf@prec& (0+255),w,b
  2572  0017DC  5FAB               	subwf	printf@width& (0+255),f,b
  2573  0017DE  51BB               	movf	(printf@prec+1)& (0+255),w,b
  2574  0017E0  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  2575  0017E2  D004               	goto	l244
  2576  0017E4                     l243:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;doprnt.c: 1351: else
  2580                           ;doprnt.c: 1352: width = 0;
  2581                           
  2582                           ; BSR set to: 0
  2583  0017E4  0E00               	movlw	0
  2584  0017E6  6FAC               	movwf	(printf@width+1)& (0+255),b
  2585  0017E8  0E00               	movlw	0
  2586  0017EA  6FAB               	movwf	printf@width& (0+255),b
  2587  0017EC                     l244:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;doprnt.c: 1353: }
  2591                           ;doprnt.c: 1381: if(width > c)
  2592                           
  2593                           ; BSR set to: 0
  2594                           
  2595                           ; BSR set to: 0
  2596  0017EC  0E80               	movlw	128
  2597  0017EE  BFBC               	btfsc	printf@c& (0+255),7,b
  2598  0017F0  0E7F               	movlw	127
  2599  0017F2  6E45               	movwf	??_printf& (0+255),c
  2600  0017F4  51AB               	movf	printf@width& (0+255),w,b
  2601  0017F6  5DBC               	subwf	printf@c& (0+255),w,b
  2602  0017F8  51AC               	movf	(printf@width+1)& (0+255),w,b
  2603  0017FA  0A80               	xorlw	128
  2604  0017FC  5845               	subwfb	??_printf& (0+255),w,c
  2605  0017FE  B0D8               	btfsc	status,0,c
  2606  001800  D007               	goto	l245
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1382: width -= c;
  2610  001802  51BC               	movf	printf@c& (0+255),w,b
  2611  001804  5FAB               	subwf	printf@width& (0+255),f,b
  2612  001806  0E00               	movlw	0
  2613  001808  BFBC               	btfsc	printf@c& (0+255),7,b
  2614  00180A  0EFF               	movlw	255
  2615  00180C  5BAC               	subwfb	(printf@width+1)& (0+255),f,b
  2616  00180E  D004               	goto	l246
  2617  001810                     l245:
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;doprnt.c: 1383: else
  2621                           ;doprnt.c: 1384: width = 0;
  2622                           
  2623                           ; BSR set to: 0
  2624  001810  0E00               	movlw	0
  2625  001812  6FAC               	movwf	(printf@width+1)& (0+255),b
  2626  001814  0E00               	movlw	0
  2627  001816  6FAB               	movwf	printf@width& (0+255),b
  2628  001818                     l246:
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;doprnt.c: 1422: {
  2632                           ;doprnt.c: 1424: if(width
  2633                           ;doprnt.c: 1428: )
  2634                           
  2635                           ; BSR set to: 0
  2636  001818  51AB               	movf	printf@width& (0+255),w,b
  2637  00181A  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  2638  00181C  B4D8               	btfsc	status,2,c
  2639  00181E  D00B               	goto	u3020
  2640  001820                     u3010:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;doprnt.c: 1430: (putch(' ') );
  2644                           
  2645                           ; BSR set to: 0
  2646                           
  2647                           ;doprnt.c: 1429: do
  2648  001820  0E20               	movlw	32
  2649  001822  EC7E  F016         	call	_putch
  2650                           
  2651                           ;doprnt.c: 1431: while(--width);
  2652  001826  0100               	movlb	0	; () banked
  2653  001828  07AB               	decf	printf@width& (0+255),f,b
  2654  00182A  A0D8               	btfss	status,0,c
  2655  00182C  07AC               	decf	(printf@width+1)& (0+255),f,b
  2656  00182E  51AB               	movf	printf@width& (0+255),w,b
  2657  001830  11AC               	iorwf	(printf@width+1)& (0+255),w,b
  2658  001832  A4D8               	btfss	status,2,c
  2659  001834  D7F5               	goto	u3010
  2660  001836                     u3020:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 1438: if(flag & 0x03)
  2664                           
  2665                           ; BSR set to: 0
  2666                           
  2667                           ; BSR set to: 0
  2668  001836  0E03               	movlw	3
  2669  001838  15A9               	andwf	printf@flag& (0+255),w,b
  2670  00183A  6E45               	movwf	??_printf& (0+255),c
  2671  00183C  0E00               	movlw	0
  2672  00183E  15AA               	andwf	(printf@flag+1)& (0+255),w,b
  2673  001840  6E46               	movwf	(??_printf+1)& (0+255),c
  2674  001842  5045               	movf	??_printf,w,c
  2675  001844  1046               	iorwf	??_printf+1,w,c
  2676  001846  B4D8               	btfsc	status,2,c
  2677  001848  D043               	goto	l251
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;doprnt.c: 1439: (putch('-') );
  2681  00184A  0E2D               	movlw	45
  2682  00184C  EC7E  F016         	call	_putch
  2683                           
  2684                           ;doprnt.c: 1469: }
  2685                           ;doprnt.c: 1474: while(prec--) {
  2686  001850  D03F               	goto	l251
  2687  001852                     l2742:
  2688                           
  2689                           ;doprnt.c: 1478: {
  2690                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2691  001852  C0BA  F045         	movff	printf@prec,??_printf
  2692  001856  C0BB  F046         	movff	printf@prec+1,??_printf+1
  2693  00185A  90D8               	bcf	status,0,c
  2694  00185C  3645               	rlcf	??_printf,f,c
  2695  00185E  3646               	rlcf	??_printf+1,f,c
  2696  001860  90D8               	bcf	status,0,c
  2697  001862  3645               	rlcf	??_printf,f,c
  2698  001864  3646               	rlcf	??_printf+1,f,c
  2699  001866  0E01               	movlw	low _dpowers
  2700  001868  2445               	addwf	??_printf,w,c
  2701  00186A  6EF6               	movwf	tblptrl,c
  2702  00186C  0E0F               	movlw	high _dpowers
  2703  00186E  2046               	addwfc	??_printf+1,w,c
  2704  001870  6EF7               	movwf	tblptrh,c
  2705  001872                     	if	0	;There are less than 3 active tblptr bytes
  2706  001872                     	endif
  2707  001872  0009               	tblrd		*+
  2708  001874  CFF5 F005          	movff	tablat,___lldiv@divisor
  2709  001878  0009               	tblrd		*+
  2710  00187A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2711  00187E  0009               	tblrd		*+
  2712  001880  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2713  001884  000A               	tblrd		*-
  2714  001886  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2715  00188A  C0B1  F001         	movff	printf@val,___lldiv@dividend
  2716  00188E  C0B2  F002         	movff	printf@val+1,___lldiv@dividend+1
  2717  001892  C0B3  F003         	movff	printf@val+2,___lldiv@dividend+2
  2718  001896  C0B4  F004         	movff	printf@val+3,___lldiv@dividend+3
  2719  00189A  ECE1  F014         	call	___lldiv	;wreg free
  2720  00189E  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2721  0018A2  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2722  0018A6  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2723  0018AA  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2724  0018AE  0E0A               	movlw	10
  2725  0018B0  6E12               	movwf	___llmod@divisor,c
  2726  0018B2  0E00               	movlw	0
  2727  0018B4  6E13               	movwf	___llmod@divisor+1,c
  2728  0018B6  0E00               	movlw	0
  2729  0018B8  6E14               	movwf	___llmod@divisor+2,c
  2730  0018BA  0E00               	movlw	0
  2731  0018BC  6E15               	movwf	___llmod@divisor+3,c
  2732  0018BE  EC5A  F015         	call	___llmod	;wreg free
  2733  0018C2  500E               	movf	?___llmod,w,c
  2734  0018C4  0F30               	addlw	48
  2735  0018C6  0100               	movlb	0	; () banked
  2736  0018C8  6FBC               	movwf	printf@c& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 1523: }
  2740                           ;doprnt.c: 1524: (putch(c) );
  2741  0018CA  51BC               	movf	printf@c& (0+255),w,b
  2742  0018CC  EC7E  F016         	call	_putch
  2743  0018D0                     l251:
  2744  0018D0  0100               	movlb	0	; () banked
  2745  0018D2  07BA               	decf	printf@prec& (0+255),f,b
  2746  0018D4  A0D8               	btfss	status,0,c
  2747  0018D6  07BB               	decf	(printf@prec+1)& (0+255),f,b
  2748  0018D8  29BA               	incf	printf@prec& (0+255),w,b
  2749  0018DA  E1BB               	bnz	l2742
  2750  0018DC  29BB               	incf	(printf@prec+1)& (0+255),w,b
  2751  0018DE  A4D8               	btfss	status,2,c
  2752  0018E0  D7B8               	goto	l252
  2753  0018E2                     u3040:
  2754                           
  2755                           ; BSR set to: 0
  2756                           
  2757                           ; BSR set to: 0
  2758  0018E2  C040  FFF6         	movff	printf@f,tblptrl
  2759  0018E6  C041  FFF7         	movff	printf@f+1,tblptrh
  2760  0018EA  4A40               	infsnz	printf@f,f,c
  2761  0018EC  2A41               	incf	printf@f+1,f,c
  2762  0018EE                     	if	0	;tblptru may be non-zero
  2763  0018EE                     	endif
  2764  0018EE                     	if	0	;tblptru may be non-zero
  2765  0018EE                     	endif
  2766  0018EE  0008               	tblrd		*
  2767  0018F0  CFF5 F0BC          	movff	tablat,printf@c
  2768  0018F4  0100               	movlb	0	; () banked
  2769  0018F6  51BC               	movf	printf@c& (0+255),w,b
  2770  0018F8  B4D8               	btfsc	status,2,c
  2771  0018FA  0012               	return	
  2772  0018FC  EFD9  F007         	goto	l172
  2773  001900                     __end_of_printf:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _scale *****************
  2790 ;; Defined at:
  2791 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  scl             1    wreg     char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  scl             1   41[COMRAM] char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  3   35[COMRAM] char 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2806 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2808 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2809 ;;Total ram usage:        7 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    2
  2812 ;; This function calls:
  2813 ;;		___awdiv
  2814 ;;		___awmod
  2815 ;;		___ftmul
  2816 ;;		___wmul
  2817 ;; This function is called by:
  2818 ;;		_printf
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text2
  2823  001900                     __ptext2:
  2824                           	opt stack 0
  2825  001900                     _scale:
  2826                           	opt stack 27
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;incstack = 0
  2830                           ;scale@scl stored from wreg
  2831  001900  6E2A               	movwf	scale@scl,c
  2832                           
  2833                           ;doprnt.c: 428: if(scl < 0) {
  2834  001902  AE2A               	btfss	scale@scl,7,c
  2835  001904  D101               	goto	l161
  2836                           
  2837                           ;doprnt.c: 429: scl = -scl;
  2838  001906  6C2A               	negf	scale@scl,c
  2839                           
  2840                           ;doprnt.c: 430: if(scl>=110)
  2841  001908  502A               	movf	scale@scl,w,c
  2842  00190A  0A80               	xorlw	128
  2843  00190C  0F12               	addlw	-238
  2844  00190E  A0D8               	btfss	status,0,c
  2845  001910  D091               	goto	l162
  2846                           
  2847                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2848  001912  0E00               	movlw	0
  2849  001914  6E12               	movwf	___wmul@multiplicand+1,c
  2850  001916  0E03               	movlw	3
  2851  001918  6E11               	movwf	___wmul@multiplicand,c
  2852  00191A  0E00               	movlw	0
  2853  00191C  6E0A               	movwf	___awdiv@divisor+1,c
  2854  00191E  0E0A               	movlw	10
  2855  001920  6E09               	movwf	___awdiv@divisor,c
  2856  001922  0E00               	movlw	0
  2857  001924  6E04               	movwf	___awmod@divisor+1,c
  2858  001926  0E64               	movlw	100
  2859  001928  6E03               	movwf	___awmod@divisor,c
  2860  00192A  502A               	movf	scale@scl,w,c
  2861  00192C  6E01               	movwf	___awmod@dividend,c
  2862  00192E  6A02               	clrf	___awmod@dividend+1,c
  2863  001930  BE01               	btfsc	___awmod@dividend,7,c
  2864  001932  0602               	decf	___awmod@dividend+1,f,c
  2865  001934  EC22  F015         	call	___awmod	;wreg free
  2866  001938  C001  F007         	movff	?___awmod,___awdiv@dividend
  2867  00193C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2868  001940  EC9F  F014         	call	___awdiv	;wreg free
  2869  001944  0E09               	movlw	9
  2870  001946  2407               	addwf	?___awdiv,w,c
  2871  001948  6E0F               	movwf	___wmul@multiplier,c
  2872  00194A  0E00               	movlw	0
  2873  00194C  2008               	addwfc	?___awdiv+1,w,c
  2874  00194E  6E10               	movwf	___wmul@multiplier+1,c
  2875  001950  EC38  F016         	call	___wmul	;wreg free
  2876  001954  0E50               	movlw	low __npowers_
  2877  001956  240F               	addwf	?___wmul,w,c
  2878  001958  6EF6               	movwf	tblptrl,c
  2879  00195A  0E0F               	movlw	high __npowers_
  2880  00195C  2010               	addwfc	?___wmul+1,w,c
  2881  00195E  6EF7               	movwf	tblptrh,c
  2882  001960                     	if	0	;There are less than 3 active tblptr bytes
  2883  001960                     	endif
  2884  001960  0009               	tblrd		*+
  2885  001962  CFF5 F018          	movff	tablat,___ftmul@f2
  2886  001966  0009               	tblrd		*+
  2887  001968  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2888  00196C  000A               	tblrd		*-
  2889  00196E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2890  001972  0E00               	movlw	0
  2891  001974  6E0A               	movwf	___awdiv@divisor+1,c
  2892  001976  0E64               	movlw	100
  2893  001978  6E09               	movwf	___awdiv@divisor,c
  2894  00197A  502A               	movf	scale@scl,w,c
  2895  00197C  6E07               	movwf	___awdiv@dividend,c
  2896  00197E  6A08               	clrf	___awdiv@dividend+1,c
  2897  001980  BE07               	btfsc	___awdiv@dividend,7,c
  2898  001982  0608               	decf	___awdiv@dividend+1,f,c
  2899  001984  EC9F  F014         	call	___awdiv	;wreg free
  2900  001988  0E12               	movlw	18
  2901  00198A  2407               	addwf	?___awdiv,w,c
  2902  00198C  6E0F               	movwf	___wmul@multiplier,c
  2903  00198E  0E00               	movlw	0
  2904  001990  2008               	addwfc	?___awdiv+1,w,c
  2905  001992  6E10               	movwf	___wmul@multiplier+1,c
  2906  001994  0E00               	movlw	0
  2907  001996  6E12               	movwf	___wmul@multiplicand+1,c
  2908  001998  0E03               	movlw	3
  2909  00199A  6E11               	movwf	___wmul@multiplicand,c
  2910  00199C  EC38  F016         	call	___wmul	;wreg free
  2911  0019A0  0E50               	movlw	low __npowers_
  2912  0019A2  240F               	addwf	?___wmul,w,c
  2913  0019A4  6EF6               	movwf	tblptrl,c
  2914  0019A6  0E0F               	movlw	high __npowers_
  2915  0019A8  2010               	addwfc	?___wmul+1,w,c
  2916  0019AA  6EF7               	movwf	tblptrh,c
  2917  0019AC                     	if	0	;There are less than 3 active tblptr bytes
  2918  0019AC                     	endif
  2919  0019AC  0009               	tblrd		*+
  2920  0019AE  CFF5 F015          	movff	tablat,___ftmul@f1
  2921  0019B2  0009               	tblrd		*+
  2922  0019B4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2923  0019B8  000A               	tblrd		*-
  2924  0019BA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2925  0019BE  EC99  F012         	call	___ftmul	;wreg free
  2926  0019C2  C015  F027         	movff	?___ftmul,_scale$930
  2927  0019C6  C016  F028         	movff	?___ftmul+1,_scale$930+1
  2928  0019CA  C017  F029         	movff	?___ftmul+2,_scale$930+2
  2929                           
  2930                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2931  0019CE  C027  F015         	movff	_scale$930,___ftmul@f1
  2932  0019D2  C028  F016         	movff	_scale$930+1,___ftmul@f1+1
  2933  0019D6  C029  F017         	movff	_scale$930+2,___ftmul@f1+2
  2934  0019DA  0E00               	movlw	0
  2935  0019DC  6E12               	movwf	___wmul@multiplicand+1,c
  2936  0019DE  0E03               	movlw	3
  2937  0019E0  6E11               	movwf	___wmul@multiplicand,c
  2938  0019E2  0E00               	movlw	0
  2939  0019E4  6E04               	movwf	___awmod@divisor+1,c
  2940  0019E6  0E0A               	movlw	10
  2941  0019E8  6E03               	movwf	___awmod@divisor,c
  2942  0019EA  502A               	movf	scale@scl,w,c
  2943  0019EC  6E01               	movwf	___awmod@dividend,c
  2944  0019EE  6A02               	clrf	___awmod@dividend+1,c
  2945  0019F0  BE01               	btfsc	___awmod@dividend,7,c
  2946  0019F2  0602               	decf	___awmod@dividend+1,f,c
  2947  0019F4  EC22  F015         	call	___awmod	;wreg free
  2948  0019F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2949  0019FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2950  001A00  EC38  F016         	call	___wmul	;wreg free
  2951  001A04  0E50               	movlw	low __npowers_
  2952  001A06  240F               	addwf	?___wmul,w,c
  2953  001A08  6EF6               	movwf	tblptrl,c
  2954  001A0A  0E0F               	movlw	high __npowers_
  2955  001A0C  2010               	addwfc	?___wmul+1,w,c
  2956  001A0E  6EF7               	movwf	tblptrh,c
  2957  001A10                     	if	0	;There are less than 3 active tblptr bytes
  2958  001A10                     	endif
  2959  001A10  0009               	tblrd		*+
  2960  001A12  CFF5 F018          	movff	tablat,___ftmul@f2
  2961  001A16  0009               	tblrd		*+
  2962  001A18  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2963  001A1C  000A               	tblrd		*-
  2964  001A1E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2965  001A22  EC99  F012         	call	___ftmul	;wreg free
  2966  001A26  C015  F024         	movff	?___ftmul,?_scale
  2967  001A2A  C016  F025         	movff	?___ftmul+1,?_scale+1
  2968  001A2E  C017  F026         	movff	?___ftmul+2,?_scale+2
  2969  001A32  0012               	return	
  2970  001A34                     l162:
  2971                           
  2972                           ;doprnt.c: 432: else if(scl > 10)
  2973  001A34  502A               	movf	scale@scl,w,c
  2974  001A36  0A80               	xorlw	128
  2975  001A38  0F75               	addlw	-139
  2976  001A3A  A0D8               	btfss	status,0,c
  2977  001A3C  D053               	goto	l165
  2978                           
  2979                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2980  001A3E  0E00               	movlw	0
  2981  001A40  6E0A               	movwf	___awdiv@divisor+1,c
  2982  001A42  0E0A               	movlw	10
  2983  001A44  6E09               	movwf	___awdiv@divisor,c
  2984  001A46  502A               	movf	scale@scl,w,c
  2985  001A48  6E07               	movwf	___awdiv@dividend,c
  2986  001A4A  6A08               	clrf	___awdiv@dividend+1,c
  2987  001A4C  BE07               	btfsc	___awdiv@dividend,7,c
  2988  001A4E  0608               	decf	___awdiv@dividend+1,f,c
  2989  001A50  EC9F  F014         	call	___awdiv	;wreg free
  2990  001A54  0E09               	movlw	9
  2991  001A56  2407               	addwf	?___awdiv,w,c
  2992  001A58  6E0F               	movwf	___wmul@multiplier,c
  2993  001A5A  0E00               	movlw	0
  2994  001A5C  2008               	addwfc	?___awdiv+1,w,c
  2995  001A5E  6E10               	movwf	___wmul@multiplier+1,c
  2996  001A60  0E00               	movlw	0
  2997  001A62  6E12               	movwf	___wmul@multiplicand+1,c
  2998  001A64  0E03               	movlw	3
  2999  001A66  6E11               	movwf	___wmul@multiplicand,c
  3000  001A68  EC38  F016         	call	___wmul	;wreg free
  3001  001A6C  0E50               	movlw	low __npowers_
  3002  001A6E  240F               	addwf	?___wmul,w,c
  3003  001A70  6EF6               	movwf	tblptrl,c
  3004  001A72  0E0F               	movlw	high __npowers_
  3005  001A74  2010               	addwfc	?___wmul+1,w,c
  3006  001A76  6EF7               	movwf	tblptrh,c
  3007  001A78                     	if	0	;There are less than 3 active tblptr bytes
  3008  001A78                     	endif
  3009  001A78  0009               	tblrd		*+
  3010  001A7A  CFF5 F015          	movff	tablat,___ftmul@f1
  3011  001A7E  0009               	tblrd		*+
  3012  001A80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3013  001A84  000A               	tblrd		*-
  3014  001A86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3015  001A8A  0E00               	movlw	0
  3016  001A8C  6E12               	movwf	___wmul@multiplicand+1,c
  3017  001A8E  0E03               	movlw	3
  3018  001A90  6E11               	movwf	___wmul@multiplicand,c
  3019  001A92  0E00               	movlw	0
  3020  001A94  6E04               	movwf	___awmod@divisor+1,c
  3021  001A96  0E0A               	movlw	10
  3022  001A98  6E03               	movwf	___awmod@divisor,c
  3023  001A9A  502A               	movf	scale@scl,w,c
  3024  001A9C  6E01               	movwf	___awmod@dividend,c
  3025  001A9E  6A02               	clrf	___awmod@dividend+1,c
  3026  001AA0  BE01               	btfsc	___awmod@dividend,7,c
  3027  001AA2  0602               	decf	___awmod@dividend+1,f,c
  3028  001AA4  EC22  F015         	call	___awmod	;wreg free
  3029  001AA8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3030  001AAC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3031  001AB0  EC38  F016         	call	___wmul	;wreg free
  3032  001AB4  0E50               	movlw	low __npowers_
  3033  001AB6  240F               	addwf	?___wmul,w,c
  3034  001AB8  6EF6               	movwf	tblptrl,c
  3035  001ABA  0E0F               	movlw	high __npowers_
  3036  001ABC  2010               	addwfc	?___wmul+1,w,c
  3037  001ABE  6EF7               	movwf	tblptrh,c
  3038  001AC0                     	if	0	;There are less than 3 active tblptr bytes
  3039  001AC0                     	endif
  3040  001AC0  0009               	tblrd		*+
  3041  001AC2  CFF5 F018          	movff	tablat,___ftmul@f2
  3042  001AC6  0009               	tblrd		*+
  3043  001AC8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3044  001ACC  000A               	tblrd		*-
  3045  001ACE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3046  001AD2  EC99  F012         	call	___ftmul	;wreg free
  3047  001AD6  C015  F024         	movff	?___ftmul,?_scale
  3048  001ADA  C016  F025         	movff	?___ftmul+1,?_scale+1
  3049  001ADE  C017  F026         	movff	?___ftmul+2,?_scale+2
  3050  001AE2  0012               	return	
  3051  001AE4                     l165:
  3052                           
  3053                           ;doprnt.c: 434: return _npowers_[scl];
  3054  001AE4  502A               	movf	scale@scl,w,c
  3055  001AE6  0D03               	mullw	3
  3056  001AE8  0E50               	movlw	low __npowers_
  3057  001AEA  24F3               	addwf	prodl,w,c
  3058  001AEC  6EF6               	movwf	tblptrl,c
  3059  001AEE  0E0F               	movlw	high __npowers_
  3060  001AF0  20F4               	addwfc	prodh,w,c
  3061  001AF2  6EF7               	movwf	tblptrh,c
  3062  001AF4                     	if	0	;There are less than 3 active tblptr bytes
  3063  001AF4                     	endif
  3064  001AF4  0009               	tblrd		*+
  3065  001AF6  CFF5 F024          	movff	tablat,?_scale
  3066  001AFA  0009               	tblrd		*+
  3067  001AFC  CFF5 F025          	movff	tablat,?_scale+1
  3068  001B00  000A               	tblrd		*-
  3069  001B02  CFF5 F026          	movff	tablat,?_scale+2
  3070  001B06  0012               	return	
  3071  001B08                     l161:
  3072                           
  3073                           ;doprnt.c: 435: }
  3074                           ;doprnt.c: 436: if(scl>=110)
  3075  001B08  502A               	movf	scale@scl,w,c
  3076  001B0A  0A80               	xorlw	128
  3077  001B0C  0F12               	addlw	-238
  3078  001B0E  A0D8               	btfss	status,0,c
  3079  001B10  D091               	goto	l166
  3080                           
  3081                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3082  001B12  0E00               	movlw	0
  3083  001B14  6E12               	movwf	___wmul@multiplicand+1,c
  3084  001B16  0E03               	movlw	3
  3085  001B18  6E11               	movwf	___wmul@multiplicand,c
  3086  001B1A  0E00               	movlw	0
  3087  001B1C  6E0A               	movwf	___awdiv@divisor+1,c
  3088  001B1E  0E0A               	movlw	10
  3089  001B20  6E09               	movwf	___awdiv@divisor,c
  3090  001B22  0E00               	movlw	0
  3091  001B24  6E04               	movwf	___awmod@divisor+1,c
  3092  001B26  0E64               	movlw	100
  3093  001B28  6E03               	movwf	___awmod@divisor,c
  3094  001B2A  502A               	movf	scale@scl,w,c
  3095  001B2C  6E01               	movwf	___awmod@dividend,c
  3096  001B2E  6A02               	clrf	___awmod@dividend+1,c
  3097  001B30  BE01               	btfsc	___awmod@dividend,7,c
  3098  001B32  0602               	decf	___awmod@dividend+1,f,c
  3099  001B34  EC22  F015         	call	___awmod	;wreg free
  3100  001B38  C001  F007         	movff	?___awmod,___awdiv@dividend
  3101  001B3C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3102  001B40  EC9F  F014         	call	___awdiv	;wreg free
  3103  001B44  0E09               	movlw	9
  3104  001B46  2407               	addwf	?___awdiv,w,c
  3105  001B48  6E0F               	movwf	___wmul@multiplier,c
  3106  001B4A  0E00               	movlw	0
  3107  001B4C  2008               	addwfc	?___awdiv+1,w,c
  3108  001B4E  6E10               	movwf	___wmul@multiplier+1,c
  3109  001B50  EC38  F016         	call	___wmul	;wreg free
  3110  001B54  0E29               	movlw	low __powers_
  3111  001B56  240F               	addwf	?___wmul,w,c
  3112  001B58  6EF6               	movwf	tblptrl,c
  3113  001B5A  0E0F               	movlw	high __powers_
  3114  001B5C  2010               	addwfc	?___wmul+1,w,c
  3115  001B5E  6EF7               	movwf	tblptrh,c
  3116  001B60                     	if	0	;There are less than 3 active tblptr bytes
  3117  001B60                     	endif
  3118  001B60  0009               	tblrd		*+
  3119  001B62  CFF5 F018          	movff	tablat,___ftmul@f2
  3120  001B66  0009               	tblrd		*+
  3121  001B68  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3122  001B6C  000A               	tblrd		*-
  3123  001B6E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3124  001B72  0E00               	movlw	0
  3125  001B74  6E0A               	movwf	___awdiv@divisor+1,c
  3126  001B76  0E64               	movlw	100
  3127  001B78  6E09               	movwf	___awdiv@divisor,c
  3128  001B7A  502A               	movf	scale@scl,w,c
  3129  001B7C  6E07               	movwf	___awdiv@dividend,c
  3130  001B7E  6A08               	clrf	___awdiv@dividend+1,c
  3131  001B80  BE07               	btfsc	___awdiv@dividend,7,c
  3132  001B82  0608               	decf	___awdiv@dividend+1,f,c
  3133  001B84  EC9F  F014         	call	___awdiv	;wreg free
  3134  001B88  0E12               	movlw	18
  3135  001B8A  2407               	addwf	?___awdiv,w,c
  3136  001B8C  6E0F               	movwf	___wmul@multiplier,c
  3137  001B8E  0E00               	movlw	0
  3138  001B90  2008               	addwfc	?___awdiv+1,w,c
  3139  001B92  6E10               	movwf	___wmul@multiplier+1,c
  3140  001B94  0E00               	movlw	0
  3141  001B96  6E12               	movwf	___wmul@multiplicand+1,c
  3142  001B98  0E03               	movlw	3
  3143  001B9A  6E11               	movwf	___wmul@multiplicand,c
  3144  001B9C  EC38  F016         	call	___wmul	;wreg free
  3145  001BA0  0E29               	movlw	low __powers_
  3146  001BA2  240F               	addwf	?___wmul,w,c
  3147  001BA4  6EF6               	movwf	tblptrl,c
  3148  001BA6  0E0F               	movlw	high __powers_
  3149  001BA8  2010               	addwfc	?___wmul+1,w,c
  3150  001BAA  6EF7               	movwf	tblptrh,c
  3151  001BAC                     	if	0	;There are less than 3 active tblptr bytes
  3152  001BAC                     	endif
  3153  001BAC  0009               	tblrd		*+
  3154  001BAE  CFF5 F015          	movff	tablat,___ftmul@f1
  3155  001BB2  0009               	tblrd		*+
  3156  001BB4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3157  001BB8  000A               	tblrd		*-
  3158  001BBA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3159  001BBE  EC99  F012         	call	___ftmul	;wreg free
  3160  001BC2  C015  F027         	movff	?___ftmul,_scale$930
  3161  001BC6  C016  F028         	movff	?___ftmul+1,_scale$930+1
  3162  001BCA  C017  F029         	movff	?___ftmul+2,_scale$930+2
  3163                           
  3164                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3165  001BCE  C027  F015         	movff	_scale$930,___ftmul@f1
  3166  001BD2  C028  F016         	movff	_scale$930+1,___ftmul@f1+1
  3167  001BD6  C029  F017         	movff	_scale$930+2,___ftmul@f1+2
  3168  001BDA  0E00               	movlw	0
  3169  001BDC  6E12               	movwf	___wmul@multiplicand+1,c
  3170  001BDE  0E03               	movlw	3
  3171  001BE0  6E11               	movwf	___wmul@multiplicand,c
  3172  001BE2  0E00               	movlw	0
  3173  001BE4  6E04               	movwf	___awmod@divisor+1,c
  3174  001BE6  0E0A               	movlw	10
  3175  001BE8  6E03               	movwf	___awmod@divisor,c
  3176  001BEA  502A               	movf	scale@scl,w,c
  3177  001BEC  6E01               	movwf	___awmod@dividend,c
  3178  001BEE  6A02               	clrf	___awmod@dividend+1,c
  3179  001BF0  BE01               	btfsc	___awmod@dividend,7,c
  3180  001BF2  0602               	decf	___awmod@dividend+1,f,c
  3181  001BF4  EC22  F015         	call	___awmod	;wreg free
  3182  001BF8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3183  001BFC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3184  001C00  EC38  F016         	call	___wmul	;wreg free
  3185  001C04  0E29               	movlw	low __powers_
  3186  001C06  240F               	addwf	?___wmul,w,c
  3187  001C08  6EF6               	movwf	tblptrl,c
  3188  001C0A  0E0F               	movlw	high __powers_
  3189  001C0C  2010               	addwfc	?___wmul+1,w,c
  3190  001C0E  6EF7               	movwf	tblptrh,c
  3191  001C10                     	if	0	;There are less than 3 active tblptr bytes
  3192  001C10                     	endif
  3193  001C10  0009               	tblrd		*+
  3194  001C12  CFF5 F018          	movff	tablat,___ftmul@f2
  3195  001C16  0009               	tblrd		*+
  3196  001C18  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3197  001C1C  000A               	tblrd		*-
  3198  001C1E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3199  001C22  EC99  F012         	call	___ftmul	;wreg free
  3200  001C26  C015  F024         	movff	?___ftmul,?_scale
  3201  001C2A  C016  F025         	movff	?___ftmul+1,?_scale+1
  3202  001C2E  C017  F026         	movff	?___ftmul+2,?_scale+2
  3203  001C32  0012               	return	
  3204  001C34                     l166:
  3205                           
  3206                           ;doprnt.c: 438: else if(scl > 10)
  3207  001C34  502A               	movf	scale@scl,w,c
  3208  001C36  0A80               	xorlw	128
  3209  001C38  0F75               	addlw	-139
  3210  001C3A  A0D8               	btfss	status,0,c
  3211  001C3C  D053               	goto	l168
  3212                           
  3213                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3214  001C3E  0E00               	movlw	0
  3215  001C40  6E0A               	movwf	___awdiv@divisor+1,c
  3216  001C42  0E0A               	movlw	10
  3217  001C44  6E09               	movwf	___awdiv@divisor,c
  3218  001C46  502A               	movf	scale@scl,w,c
  3219  001C48  6E07               	movwf	___awdiv@dividend,c
  3220  001C4A  6A08               	clrf	___awdiv@dividend+1,c
  3221  001C4C  BE07               	btfsc	___awdiv@dividend,7,c
  3222  001C4E  0608               	decf	___awdiv@dividend+1,f,c
  3223  001C50  EC9F  F014         	call	___awdiv	;wreg free
  3224  001C54  0E09               	movlw	9
  3225  001C56  2407               	addwf	?___awdiv,w,c
  3226  001C58  6E0F               	movwf	___wmul@multiplier,c
  3227  001C5A  0E00               	movlw	0
  3228  001C5C  2008               	addwfc	?___awdiv+1,w,c
  3229  001C5E  6E10               	movwf	___wmul@multiplier+1,c
  3230  001C60  0E00               	movlw	0
  3231  001C62  6E12               	movwf	___wmul@multiplicand+1,c
  3232  001C64  0E03               	movlw	3
  3233  001C66  6E11               	movwf	___wmul@multiplicand,c
  3234  001C68  EC38  F016         	call	___wmul	;wreg free
  3235  001C6C  0E29               	movlw	low __powers_
  3236  001C6E  240F               	addwf	?___wmul,w,c
  3237  001C70  6EF6               	movwf	tblptrl,c
  3238  001C72  0E0F               	movlw	high __powers_
  3239  001C74  2010               	addwfc	?___wmul+1,w,c
  3240  001C76  6EF7               	movwf	tblptrh,c
  3241  001C78                     	if	0	;There are less than 3 active tblptr bytes
  3242  001C78                     	endif
  3243  001C78  0009               	tblrd		*+
  3244  001C7A  CFF5 F015          	movff	tablat,___ftmul@f1
  3245  001C7E  0009               	tblrd		*+
  3246  001C80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3247  001C84  000A               	tblrd		*-
  3248  001C86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3249  001C8A  0E00               	movlw	0
  3250  001C8C  6E12               	movwf	___wmul@multiplicand+1,c
  3251  001C8E  0E03               	movlw	3
  3252  001C90  6E11               	movwf	___wmul@multiplicand,c
  3253  001C92  0E00               	movlw	0
  3254  001C94  6E04               	movwf	___awmod@divisor+1,c
  3255  001C96  0E0A               	movlw	10
  3256  001C98  6E03               	movwf	___awmod@divisor,c
  3257  001C9A  502A               	movf	scale@scl,w,c
  3258  001C9C  6E01               	movwf	___awmod@dividend,c
  3259  001C9E  6A02               	clrf	___awmod@dividend+1,c
  3260  001CA0  BE01               	btfsc	___awmod@dividend,7,c
  3261  001CA2  0602               	decf	___awmod@dividend+1,f,c
  3262  001CA4  EC22  F015         	call	___awmod	;wreg free
  3263  001CA8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3264  001CAC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3265  001CB0  EC38  F016         	call	___wmul	;wreg free
  3266  001CB4  0E29               	movlw	low __powers_
  3267  001CB6  240F               	addwf	?___wmul,w,c
  3268  001CB8  6EF6               	movwf	tblptrl,c
  3269  001CBA  0E0F               	movlw	high __powers_
  3270  001CBC  2010               	addwfc	?___wmul+1,w,c
  3271  001CBE  6EF7               	movwf	tblptrh,c
  3272  001CC0                     	if	0	;There are less than 3 active tblptr bytes
  3273  001CC0                     	endif
  3274  001CC0  0009               	tblrd		*+
  3275  001CC2  CFF5 F018          	movff	tablat,___ftmul@f2
  3276  001CC6  0009               	tblrd		*+
  3277  001CC8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3278  001CCC  000A               	tblrd		*-
  3279  001CCE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3280  001CD2  EC99  F012         	call	___ftmul	;wreg free
  3281  001CD6  C015  F024         	movff	?___ftmul,?_scale
  3282  001CDA  C016  F025         	movff	?___ftmul+1,?_scale+1
  3283  001CDE  C017  F026         	movff	?___ftmul+2,?_scale+2
  3284  001CE2  0012               	return	
  3285  001CE4                     l168:
  3286                           
  3287                           ;doprnt.c: 440: return _powers_[scl];
  3288  001CE4  502A               	movf	scale@scl,w,c
  3289  001CE6  0D03               	mullw	3
  3290  001CE8  0E29               	movlw	low __powers_
  3291  001CEA  24F3               	addwf	prodl,w,c
  3292  001CEC  6EF6               	movwf	tblptrl,c
  3293  001CEE  0E0F               	movlw	high __powers_
  3294  001CF0  20F4               	addwfc	prodh,w,c
  3295  001CF2  6EF7               	movwf	tblptrh,c
  3296  001CF4                     	if	0	;There are less than 3 active tblptr bytes
  3297  001CF4                     	endif
  3298  001CF4  0009               	tblrd		*+
  3299  001CF6  CFF5 F024          	movff	tablat,?_scale
  3300  001CFA  0009               	tblrd		*+
  3301  001CFC  CFF5 F025          	movff	tablat,?_scale+1
  3302  001D00  000A               	tblrd		*-
  3303  001D02  CFF5 F026          	movff	tablat,?_scale+2
  3304  001D06  0012               	return	
  3305  001D08                     __end_of_scale:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _putch *****************
  3322 ;; Defined at:
  3323 ;;		line 27 in file "H:/MPLabX/SourceHeader/usart.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  byte            1    wreg     unsigned char 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  byte            1    0[COMRAM] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3341 ;;Total ram usage:        1 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_printf
  3347 ;;		_putNum
  3348 ;;		_putS
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text3
  3353  002CFC                     __ptext3:
  3354                           	opt stack 0
  3355  002CFC                     _putch:
  3356                           	opt stack 29
  3357                           
  3358                           ;incstack = 0
  3359                           ;putch@byte stored from wreg
  3360  002CFC  6E01               	movwf	putch@byte,c
  3361  002CFE                     
  3362                           ;usart.c: 29: while(!PIR1bits.TX1IF) continue;
  3363  002CFE  A89E               	btfss	3998,4,c	;volatile
  3364  002D00  D7FE               	goto	l2158
  3365                           
  3366                           ;usart.c: 30: TXREG1 = byte;
  3367  002D02  C001  FFAD         	movff	putch@byte,4013	;volatile
  3368  002D06  0012               	return		;funcret
  3369  002D08                     __end_of_putch:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _isdigit *****************
  3386 ;; Defined at:
  3387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  c               1    wreg     unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  c               1    2[COMRAM] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3403 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3404 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;Total ram usage:        3 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_printf
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           	psect	text4
  3415  002CDE                     __ptext4:
  3416                           	opt stack 0
  3417  002CDE                     _isdigit:
  3418                           	opt stack 29
  3419                           
  3420                           ;incstack = 0
  3421                           ;isdigit@c stored from wreg
  3422  002CDE  6E03               	movwf	isdigit@c,c
  3423  002CE0  0E00               	movlw	0
  3424  002CE2  6E02               	movwf	_isdigit$583,c
  3425  002CE4  0E3A               	movlw	58
  3426  002CE6  6003               	cpfslt	isdigit@c,c
  3427  002CE8  D005               	goto	l619
  3428  002CEA  0E2F               	movlw	47
  3429  002CEC  6403               	cpfsgt	isdigit@c,c
  3430  002CEE  D002               	goto	l619
  3431  002CF0  0E01               	movlw	1
  3432  002CF2  6E02               	movwf	_isdigit$583,c
  3433  002CF4                     l619:
  3434  002CF4  C002  F001         	movff	_isdigit$583,??_isdigit
  3435  002CF8  3001               	rrcf	??_isdigit,w,c
  3436  002CFA  0012               	return	
  3437  002CFC                     __end_of_isdigit:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           postinc0	equ	0xFEE
  3446                           wreg	equ	0xFE8
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _fround *****************
  3454 ;; Defined at:
  3455 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  prec            1    wreg     unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  prec            1   44[COMRAM] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  3   35[COMRAM] unsigned char 
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3469 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3470 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3472 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3473 ;;Total ram usage:       10 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    2
  3476 ;; This function calls:
  3477 ;;		___awdiv
  3478 ;;		___awmod
  3479 ;;		___ftmul
  3480 ;;		___wmul
  3481 ;; This function is called by:
  3482 ;;		_printf
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text5
  3487  001D08                     __ptext5:
  3488                           	opt stack 0
  3489  001D08                     _fround:
  3490                           	opt stack 27
  3491                           
  3492                           ;incstack = 0
  3493                           ;fround@prec stored from wreg
  3494  001D08  6E2D               	movwf	fround@prec,c
  3495                           
  3496                           ;doprnt.c: 413: if(prec>=110)
  3497  001D0A  0E6D               	movlw	109
  3498  001D0C  642D               	cpfsgt	fround@prec,c
  3499  001D0E  D09F               	goto	l155
  3500                           
  3501                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3502  001D10  0E00               	movlw	0
  3503  001D12  6E12               	movwf	___wmul@multiplicand+1,c
  3504  001D14  0E03               	movlw	3
  3505  001D16  6E11               	movwf	___wmul@multiplicand,c
  3506  001D18  0E00               	movlw	0
  3507  001D1A  6E0A               	movwf	___awdiv@divisor+1,c
  3508  001D1C  0E0A               	movlw	10
  3509  001D1E  6E09               	movwf	___awdiv@divisor,c
  3510  001D20  0E00               	movlw	0
  3511  001D22  6E04               	movwf	___awmod@divisor+1,c
  3512  001D24  0E64               	movlw	100
  3513  001D26  6E03               	movwf	___awmod@divisor,c
  3514  001D28  C02D  F001         	movff	fround@prec,___awmod@dividend
  3515  001D2C  6A02               	clrf	___awmod@dividend+1,c
  3516  001D2E  EC22  F015         	call	___awmod	;wreg free
  3517  001D32  C001  F007         	movff	?___awmod,___awdiv@dividend
  3518  001D36  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3519  001D3A  EC9F  F014         	call	___awdiv	;wreg free
  3520  001D3E  0E09               	movlw	9
  3521  001D40  2407               	addwf	?___awdiv,w,c
  3522  001D42  6E0F               	movwf	___wmul@multiplier,c
  3523  001D44  0E00               	movlw	0
  3524  001D46  2008               	addwfc	?___awdiv+1,w,c
  3525  001D48  6E10               	movwf	___wmul@multiplier+1,c
  3526  001D4A  EC38  F016         	call	___wmul	;wreg free
  3527  001D4E  0E50               	movlw	low __npowers_
  3528  001D50  240F               	addwf	?___wmul,w,c
  3529  001D52  6EF6               	movwf	tblptrl,c
  3530  001D54  0E0F               	movlw	high __npowers_
  3531  001D56  2010               	addwfc	?___wmul+1,w,c
  3532  001D58  6EF7               	movwf	tblptrh,c
  3533  001D5A                     	if	0	;There are less than 3 active tblptr bytes
  3534  001D5A                     	endif
  3535  001D5A  0009               	tblrd		*+
  3536  001D5C  CFF5 F018          	movff	tablat,___ftmul@f2
  3537  001D60  0009               	tblrd		*+
  3538  001D62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3539  001D66  000A               	tblrd		*-
  3540  001D68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3541  001D6C  0E00               	movlw	0
  3542  001D6E  6E0A               	movwf	___awdiv@divisor+1,c
  3543  001D70  0E64               	movlw	100
  3544  001D72  6E09               	movwf	___awdiv@divisor,c
  3545  001D74  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3546  001D78  6A08               	clrf	___awdiv@dividend+1,c
  3547  001D7A  EC9F  F014         	call	___awdiv	;wreg free
  3548  001D7E  0E12               	movlw	18
  3549  001D80  2407               	addwf	?___awdiv,w,c
  3550  001D82  6E0F               	movwf	___wmul@multiplier,c
  3551  001D84  0E00               	movlw	0
  3552  001D86  2008               	addwfc	?___awdiv+1,w,c
  3553  001D88  6E10               	movwf	___wmul@multiplier+1,c
  3554  001D8A  0E00               	movlw	0
  3555  001D8C  6E12               	movwf	___wmul@multiplicand+1,c
  3556  001D8E  0E03               	movlw	3
  3557  001D90  6E11               	movwf	___wmul@multiplicand,c
  3558  001D92  EC38  F016         	call	___wmul	;wreg free
  3559  001D96  0E50               	movlw	low __npowers_
  3560  001D98  240F               	addwf	?___wmul,w,c
  3561  001D9A  6EF6               	movwf	tblptrl,c
  3562  001D9C  0E0F               	movlw	high __npowers_
  3563  001D9E  2010               	addwfc	?___wmul+1,w,c
  3564  001DA0  6EF7               	movwf	tblptrh,c
  3565  001DA2                     	if	0	;There are less than 3 active tblptr bytes
  3566  001DA2                     	endif
  3567  001DA2  0009               	tblrd		*+
  3568  001DA4  CFF5 F015          	movff	tablat,___ftmul@f1
  3569  001DA8  0009               	tblrd		*+
  3570  001DAA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3571  001DAE  000A               	tblrd		*-
  3572  001DB0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3573  001DB4  EC99  F012         	call	___ftmul	;wreg free
  3574  001DB8  C015  F02A         	movff	?___ftmul,_fround$928
  3575  001DBC  C016  F02B         	movff	?___ftmul+1,_fround$928+1
  3576  001DC0  C017  F02C         	movff	?___ftmul+2,_fround$928+2
  3577                           
  3578                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3579  001DC4  0E00               	movlw	0
  3580  001DC6  6E12               	movwf	___wmul@multiplicand+1,c
  3581  001DC8  0E03               	movlw	3
  3582  001DCA  6E11               	movwf	___wmul@multiplicand,c
  3583  001DCC  0E00               	movlw	0
  3584  001DCE  6E04               	movwf	___awmod@divisor+1,c
  3585  001DD0  0E0A               	movlw	10
  3586  001DD2  6E03               	movwf	___awmod@divisor,c
  3587  001DD4  C02D  F001         	movff	fround@prec,___awmod@dividend
  3588  001DD8  6A02               	clrf	___awmod@dividend+1,c
  3589  001DDA  EC22  F015         	call	___awmod	;wreg free
  3590  001DDE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3591  001DE2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3592  001DE6  EC38  F016         	call	___wmul	;wreg free
  3593  001DEA  0E50               	movlw	low __npowers_
  3594  001DEC  240F               	addwf	?___wmul,w,c
  3595  001DEE  6EF6               	movwf	tblptrl,c
  3596  001DF0  0E0F               	movlw	high __npowers_
  3597  001DF2  2010               	addwfc	?___wmul+1,w,c
  3598  001DF4  6EF7               	movwf	tblptrh,c
  3599  001DF6                     	if	0	;There are less than 3 active tblptr bytes
  3600  001DF6                     	endif
  3601  001DF6  0009               	tblrd		*+
  3602  001DF8  CFF5 F018          	movff	tablat,___ftmul@f2
  3603  001DFC  0009               	tblrd		*+
  3604  001DFE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3605  001E02  000A               	tblrd		*-
  3606  001E04  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3607  001E08  C02A  F015         	movff	_fround$928,___ftmul@f1
  3608  001E0C  C02B  F016         	movff	_fround$928+1,___ftmul@f1+1
  3609  001E10  C02C  F017         	movff	_fround$928+2,___ftmul@f1+2
  3610  001E14  EC99  F012         	call	___ftmul	;wreg free
  3611  001E18  C015  F027         	movff	?___ftmul,_fround$929
  3612  001E1C  C016  F028         	movff	?___ftmul+1,_fround$929+1
  3613  001E20  C017  F029         	movff	?___ftmul+2,_fround$929+2
  3614                           
  3615                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3616  001E24  C027  F015         	movff	_fround$929,___ftmul@f1
  3617  001E28  C028  F016         	movff	_fround$929+1,___ftmul@f1+1
  3618  001E2C  C029  F017         	movff	_fround$929+2,___ftmul@f1+2
  3619  001E30  0E00               	movlw	0
  3620  001E32  6E18               	movwf	___ftmul@f2,c
  3621  001E34  0E00               	movlw	0
  3622  001E36  6E19               	movwf	___ftmul@f2+1,c
  3623  001E38  0E3F               	movlw	63
  3624  001E3A  6E1A               	movwf	___ftmul@f2+2,c
  3625  001E3C  EC99  F012         	call	___ftmul	;wreg free
  3626  001E40  C015  F024         	movff	?___ftmul,?_fround
  3627  001E44  C016  F025         	movff	?___ftmul+1,?_fround+1
  3628  001E48  C017  F026         	movff	?___ftmul+2,?_fround+2
  3629  001E4C  0012               	return	
  3630  001E4E                     l155:
  3631                           
  3632                           ;doprnt.c: 415: else if(prec > 10)
  3633  001E4E  0E0A               	movlw	10
  3634  001E50  642D               	cpfsgt	fround@prec,c
  3635  001E52  D063               	goto	l158
  3636                           
  3637                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3638  001E54  0E00               	movlw	0
  3639  001E56  6E12               	movwf	___wmul@multiplicand+1,c
  3640  001E58  0E03               	movlw	3
  3641  001E5A  6E11               	movwf	___wmul@multiplicand,c
  3642  001E5C  0E00               	movlw	0
  3643  001E5E  6E04               	movwf	___awmod@divisor+1,c
  3644  001E60  0E0A               	movlw	10
  3645  001E62  6E03               	movwf	___awmod@divisor,c
  3646  001E64  C02D  F001         	movff	fround@prec,___awmod@dividend
  3647  001E68  6A02               	clrf	___awmod@dividend+1,c
  3648  001E6A  EC22  F015         	call	___awmod	;wreg free
  3649  001E6E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3650  001E72  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3651  001E76  EC38  F016         	call	___wmul	;wreg free
  3652  001E7A  0E50               	movlw	low __npowers_
  3653  001E7C  240F               	addwf	?___wmul,w,c
  3654  001E7E  6EF6               	movwf	tblptrl,c
  3655  001E80  0E0F               	movlw	high __npowers_
  3656  001E82  2010               	addwfc	?___wmul+1,w,c
  3657  001E84  6EF7               	movwf	tblptrh,c
  3658  001E86                     	if	0	;There are less than 3 active tblptr bytes
  3659  001E86                     	endif
  3660  001E86  0009               	tblrd		*+
  3661  001E88  CFF5 F018          	movff	tablat,___ftmul@f2
  3662  001E8C  0009               	tblrd		*+
  3663  001E8E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3664  001E92  000A               	tblrd		*-
  3665  001E94  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3666  001E98  0E00               	movlw	0
  3667  001E9A  6E0A               	movwf	___awdiv@divisor+1,c
  3668  001E9C  0E0A               	movlw	10
  3669  001E9E  6E09               	movwf	___awdiv@divisor,c
  3670  001EA0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3671  001EA4  6A08               	clrf	___awdiv@dividend+1,c
  3672  001EA6  EC9F  F014         	call	___awdiv	;wreg free
  3673  001EAA  0E09               	movlw	9
  3674  001EAC  2407               	addwf	?___awdiv,w,c
  3675  001EAE  6E0F               	movwf	___wmul@multiplier,c
  3676  001EB0  0E00               	movlw	0
  3677  001EB2  2008               	addwfc	?___awdiv+1,w,c
  3678  001EB4  6E10               	movwf	___wmul@multiplier+1,c
  3679  001EB6  0E00               	movlw	0
  3680  001EB8  6E12               	movwf	___wmul@multiplicand+1,c
  3681  001EBA  0E03               	movlw	3
  3682  001EBC  6E11               	movwf	___wmul@multiplicand,c
  3683  001EBE  EC38  F016         	call	___wmul	;wreg free
  3684  001EC2  0E50               	movlw	low __npowers_
  3685  001EC4  240F               	addwf	?___wmul,w,c
  3686  001EC6  6EF6               	movwf	tblptrl,c
  3687  001EC8  0E0F               	movlw	high __npowers_
  3688  001ECA  2010               	addwfc	?___wmul+1,w,c
  3689  001ECC  6EF7               	movwf	tblptrh,c
  3690  001ECE                     	if	0	;There are less than 3 active tblptr bytes
  3691  001ECE                     	endif
  3692  001ECE  0009               	tblrd		*+
  3693  001ED0  CFF5 F015          	movff	tablat,___ftmul@f1
  3694  001ED4  0009               	tblrd		*+
  3695  001ED6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3696  001EDA  000A               	tblrd		*-
  3697  001EDC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3698  001EE0  EC99  F012         	call	___ftmul	;wreg free
  3699  001EE4  C015  F02A         	movff	?___ftmul,_fround$928
  3700  001EE8  C016  F02B         	movff	?___ftmul+1,_fround$928+1
  3701  001EEC  C017  F02C         	movff	?___ftmul+2,_fround$928+2
  3702                           
  3703                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3704  001EF0  C02A  F015         	movff	_fround$928,___ftmul@f1
  3705  001EF4  C02B  F016         	movff	_fround$928+1,___ftmul@f1+1
  3706  001EF8  C02C  F017         	movff	_fround$928+2,___ftmul@f1+2
  3707  001EFC  0E00               	movlw	0
  3708  001EFE  6E18               	movwf	___ftmul@f2,c
  3709  001F00  0E00               	movlw	0
  3710  001F02  6E19               	movwf	___ftmul@f2+1,c
  3711  001F04  0E3F               	movlw	63
  3712  001F06  6E1A               	movwf	___ftmul@f2+2,c
  3713  001F08  EC99  F012         	call	___ftmul	;wreg free
  3714  001F0C  C015  F024         	movff	?___ftmul,?_fround
  3715  001F10  C016  F025         	movff	?___ftmul+1,?_fround+1
  3716  001F14  C017  F026         	movff	?___ftmul+2,?_fround+2
  3717  001F18  0012               	return	
  3718  001F1A                     l158:
  3719                           
  3720                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3721  001F1A  502D               	movf	fround@prec,w,c
  3722  001F1C  0D03               	mullw	3
  3723  001F1E  0E50               	movlw	low __npowers_
  3724  001F20  24F3               	addwf	prodl,w,c
  3725  001F22  6EF6               	movwf	tblptrl,c
  3726  001F24  0E0F               	movlw	high __npowers_
  3727  001F26  20F4               	addwfc	prodh,w,c
  3728  001F28  6EF7               	movwf	tblptrh,c
  3729  001F2A                     	if	0	;There are less than 3 active tblptr bytes
  3730  001F2A                     	endif
  3731  001F2A  0009               	tblrd		*+
  3732  001F2C  CFF5 F015          	movff	tablat,___ftmul@f1
  3733  001F30  0009               	tblrd		*+
  3734  001F32  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3735  001F36  000A               	tblrd		*-
  3736  001F38  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3737  001F3C  0E00               	movlw	0
  3738  001F3E  6E18               	movwf	___ftmul@f2,c
  3739  001F40  0E00               	movlw	0
  3740  001F42  6E19               	movwf	___ftmul@f2+1,c
  3741  001F44  0E3F               	movlw	63
  3742  001F46  6E1A               	movwf	___ftmul@f2+2,c
  3743  001F48  EC99  F012         	call	___ftmul	;wreg free
  3744  001F4C  C015  F024         	movff	?___ftmul,?_fround
  3745  001F50  C016  F025         	movff	?___ftmul+1,?_fround+1
  3746  001F54  C017  F026         	movff	?___ftmul+2,?_fround+2
  3747  001F58  0012               	return	
  3748  001F5A                     __end_of_fround:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           postinc2	equ	0xFDE
  3759                           postdec2	equ	0xFDD
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function ___wmul *****************
  3765 ;; Defined at:
  3766 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  multiplier      2   14[COMRAM] unsigned int 
  3769 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  product         2   18[COMRAM] unsigned int 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  2   14[COMRAM] unsigned int 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0, prodl, prodh
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3782 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3784 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;Total ram usage:        6 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_fround
  3791 ;;		_scale
  3792 ;;		_printf
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text6
  3797  002C70                     __ptext6:
  3798                           	opt stack 0
  3799  002C70                     ___wmul:
  3800                           	opt stack 28
  3801                           
  3802                           ;incstack = 0
  3803  002C70  500F               	movf	___wmul@multiplier,w,c
  3804  002C72  0211               	mulwf	___wmul@multiplicand,c
  3805  002C74  CFF3 F013          	movff	prodl,___wmul@product
  3806  002C78  CFF4 F014          	movff	prodh,___wmul@product+1
  3807  002C7C  500F               	movf	___wmul@multiplier,w,c
  3808  002C7E  0212               	mulwf	___wmul@multiplicand+1,c
  3809  002C80  50F3               	movf	prodl,w,c
  3810  002C82  2614               	addwf	___wmul@product+1,f,c
  3811  002C84  5010               	movf	___wmul@multiplier+1,w,c
  3812  002C86  0211               	mulwf	___wmul@multiplicand,c
  3813  002C88  50F3               	movf	prodl,w,c
  3814  002C8A  2614               	addwf	___wmul@product+1,f,c
  3815  002C8C  C013  F00F         	movff	___wmul@product,?___wmul
  3816  002C90  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3817  002C94  0012               	return	
  3818  002C96                     __end_of___wmul:
  3819                           	opt stack 0
  3820                           tblptru	equ	0xFF8
  3821                           tblptrh	equ	0xFF7
  3822                           tblptrl	equ	0xFF6
  3823                           tablat	equ	0xFF5
  3824                           prodh	equ	0xFF4
  3825                           prodl	equ	0xFF3
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postinc2	equ	0xFDE
  3829                           postdec2	equ	0xFDD
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function ___ftmul *****************
  3835 ;; Defined at:
  3836 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  f1              3   20[COMRAM] float 
  3839 ;;  f2              3   23[COMRAM] float 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3842 ;;  sign            1   34[COMRAM] unsigned char 
  3843 ;;  cntr            1   33[COMRAM] unsigned char 
  3844 ;;  exp             1   29[COMRAM] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  3   20[COMRAM] float 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3854 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3855 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3856 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3857 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3858 ;;Total ram usage:       15 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    1
  3861 ;; This function calls:
  3862 ;;		___ftpack
  3863 ;; This function is called by:
  3864 ;;		_main
  3865 ;;		_fround
  3866 ;;		_scale
  3867 ;;		_printf
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text7
  3872  002532                     __ptext7:
  3873                           	opt stack 0
  3874  002532                     ___ftmul:
  3875                           	opt stack 27
  3876                           
  3877                           ;incstack = 0
  3878  002532  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3879  002536  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3880  002538  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3881  00253A  3416               	rlcf	___ftmul@f1+1,w,c
  3882  00253C  361B               	rlcf	??___ftmul& (0+255),f,c
  3883  00253E  E301               	bnc	u1911
  3884  002540  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3885  002542                     u1911:
  3886  002542  501B               	movf	??___ftmul,w,c
  3887  002544  6E1E               	movwf	___ftmul@exp,c
  3888  002546  501E               	movf	___ftmul@exp,w,c
  3889  002548  A4D8               	btfss	status,2,c
  3890  00254A  D007               	goto	l583
  3891  00254C  0E00               	movlw	0
  3892  00254E  6E15               	movwf	?___ftmul,c
  3893  002550  0E00               	movlw	0
  3894  002552  6E16               	movwf	?___ftmul+1,c
  3895  002554  0E00               	movlw	0
  3896  002556  6E17               	movwf	?___ftmul+2,c
  3897  002558  0012               	return	
  3898  00255A                     l583:
  3899  00255A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3900  00255E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3901  002560  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3902  002562  3419               	rlcf	___ftmul@f2+1,w,c
  3903  002564  361B               	rlcf	??___ftmul& (0+255),f,c
  3904  002566  E301               	bnc	u1931
  3905  002568  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3906  00256A                     u1931:
  3907  00256A  501B               	movf	??___ftmul,w,c
  3908  00256C  6E23               	movwf	___ftmul@sign,c
  3909  00256E  5023               	movf	___ftmul@sign,w,c
  3910  002570  A4D8               	btfss	status,2,c
  3911  002572  D007               	goto	l585
  3912  002574  0E00               	movlw	0
  3913  002576  6E15               	movwf	?___ftmul,c
  3914  002578  0E00               	movlw	0
  3915  00257A  6E16               	movwf	?___ftmul+1,c
  3916  00257C  0E00               	movlw	0
  3917  00257E  6E17               	movwf	?___ftmul+2,c
  3918  002580  0012               	return	
  3919  002582                     l585:
  3920  002582  5023               	movf	___ftmul@sign,w,c
  3921  002584  0F7B               	addlw	123
  3922  002586  261E               	addwf	___ftmul@exp,f,c
  3923  002588  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3924  00258C  501A               	movf	___ftmul@f2+2,w,c
  3925  00258E  1A23               	xorwf	___ftmul@sign,f,c
  3926  002590  0E80               	movlw	128
  3927  002592  1623               	andwf	___ftmul@sign,f,c
  3928  002594  8E16               	bsf	___ftmul@f1+1,7,c
  3929  002596  8E19               	bsf	___ftmul@f2+1,7,c
  3930  002598  0EFF               	movlw	255
  3931  00259A  1618               	andwf	___ftmul@f2,f,c
  3932  00259C  0EFF               	movlw	255
  3933  00259E  1619               	andwf	___ftmul@f2+1,f,c
  3934  0025A0  0E00               	movlw	0
  3935  0025A2  161A               	andwf	___ftmul@f2+2,f,c
  3936  0025A4  0E00               	movlw	0
  3937  0025A6  6E1F               	movwf	___ftmul@f3_as_product,c
  3938  0025A8  0E00               	movlw	0
  3939  0025AA  6E20               	movwf	___ftmul@f3_as_product+1,c
  3940  0025AC  0E00               	movlw	0
  3941  0025AE  6E21               	movwf	___ftmul@f3_as_product+2,c
  3942  0025B0  0E07               	movlw	7
  3943  0025B2  6E22               	movwf	___ftmul@cntr,c
  3944  0025B4  A015               	btfss	___ftmul@f1,0,c
  3945  0025B6  D006               	goto	l587
  3946  0025B8  5018               	movf	___ftmul@f2,w,c
  3947  0025BA  261F               	addwf	___ftmul@f3_as_product,f,c
  3948  0025BC  5019               	movf	___ftmul@f2+1,w,c
  3949  0025BE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3950  0025C0  501A               	movf	___ftmul@f2+2,w,c
  3951  0025C2  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3952  0025C4                     l587:
  3953  0025C4  90D8               	bcf	status,0,c
  3954  0025C6  3217               	rrcf	___ftmul@f1+2,f,c
  3955  0025C8  3216               	rrcf	___ftmul@f1+1,f,c
  3956  0025CA  3215               	rrcf	___ftmul@f1,f,c
  3957  0025CC  90D8               	bcf	status,0,c
  3958  0025CE  3618               	rlcf	___ftmul@f2,f,c
  3959  0025D0  3619               	rlcf	___ftmul@f2+1,f,c
  3960  0025D2  361A               	rlcf	___ftmul@f2+2,f,c
  3961  0025D4  2E22               	decfsz	___ftmul@cntr,f,c
  3962  0025D6  D7EE               	goto	l586
  3963  0025D8  0E09               	movlw	9
  3964  0025DA  6E22               	movwf	___ftmul@cntr,c
  3965  0025DC  A015               	btfss	___ftmul@f1,0,c
  3966  0025DE  D006               	goto	l590
  3967  0025E0  5018               	movf	___ftmul@f2,w,c
  3968  0025E2  261F               	addwf	___ftmul@f3_as_product,f,c
  3969  0025E4  5019               	movf	___ftmul@f2+1,w,c
  3970  0025E6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3971  0025E8  501A               	movf	___ftmul@f2+2,w,c
  3972  0025EA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3973  0025EC                     l590:
  3974  0025EC  90D8               	bcf	status,0,c
  3975  0025EE  3217               	rrcf	___ftmul@f1+2,f,c
  3976  0025F0  3216               	rrcf	___ftmul@f1+1,f,c
  3977  0025F2  3215               	rrcf	___ftmul@f1,f,c
  3978  0025F4  90D8               	bcf	status,0,c
  3979  0025F6  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3980  0025F8  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3981  0025FA  321F               	rrcf	___ftmul@f3_as_product,f,c
  3982  0025FC  2E22               	decfsz	___ftmul@cntr,f,c
  3983  0025FE  D7EE               	goto	l589
  3984  002600  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3985  002604  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3986  002608  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3987  00260C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3988  002610  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3989  002614  EC00  F014         	call	___ftpack	;wreg free
  3990  002618  C001  F015         	movff	?___ftpack,?___ftmul
  3991  00261C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3992  002620  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3993  002624  0012               	return	
  3994  002626                     __end_of___ftmul:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function ___awmod *****************
  4011 ;; Defined at:
  4012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  dividend        2    0[COMRAM] int 
  4015 ;;  divisor         2    2[COMRAM] int 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  sign            1    5[COMRAM] unsigned char 
  4018 ;;  counter         1    4[COMRAM] unsigned char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  2    0[COMRAM] int 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4031 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4032 ;;Total ram usage:        6 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_fround
  4038 ;;		_scale
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text8
  4043  002A44                     __ptext8:
  4044                           	opt stack 0
  4045  002A44                     ___awmod:
  4046                           	opt stack 28
  4047                           
  4048                           ;incstack = 0
  4049  002A44  0E00               	movlw	0
  4050  002A46  6E06               	movwf	___awmod@sign,c
  4051  002A48  AE02               	btfss	___awmod@dividend+1,7,c
  4052  002A4A  D006               	goto	l436
  4053  002A4C  6C01               	negf	___awmod@dividend,c
  4054  002A4E  1E02               	comf	___awmod@dividend+1,f,c
  4055  002A50  B0D8               	btfsc	status,0,c
  4056  002A52  2A02               	incf	___awmod@dividend+1,f,c
  4057  002A54  0E01               	movlw	1
  4058  002A56  6E06               	movwf	___awmod@sign,c
  4059  002A58                     l436:
  4060  002A58  AE04               	btfss	___awmod@divisor+1,7,c
  4061  002A5A  D004               	goto	l437
  4062  002A5C  6C03               	negf	___awmod@divisor,c
  4063  002A5E  1E04               	comf	___awmod@divisor+1,f,c
  4064  002A60  B0D8               	btfsc	status,0,c
  4065  002A62  2A04               	incf	___awmod@divisor+1,f,c
  4066  002A64                     l437:
  4067  002A64  5003               	movf	___awmod@divisor,w,c
  4068  002A66  1004               	iorwf	___awmod@divisor+1,w,c
  4069  002A68  B4D8               	btfsc	status,2,c
  4070  002A6A  D018               	goto	l444
  4071  002A6C  0E01               	movlw	1
  4072  002A6E  6E05               	movwf	___awmod@counter,c
  4073  002A70  D004               	goto	l439
  4074  002A72  90D8               	bcf	status,0,c
  4075  002A74  3603               	rlcf	___awmod@divisor,f,c
  4076  002A76  3604               	rlcf	___awmod@divisor+1,f,c
  4077  002A78  2A05               	incf	___awmod@counter,f,c
  4078  002A7A                     l439:
  4079  002A7A  AE04               	btfss	___awmod@divisor+1,7,c
  4080  002A7C  D7FA               	goto	l440
  4081  002A7E                     u2060:
  4082  002A7E  5003               	movf	___awmod@divisor,w,c
  4083  002A80  5C01               	subwf	___awmod@dividend,w,c
  4084  002A82  5004               	movf	___awmod@divisor+1,w,c
  4085  002A84  5802               	subwfb	___awmod@dividend+1,w,c
  4086  002A86  A0D8               	btfss	status,0,c
  4087  002A88  D004               	goto	l443
  4088  002A8A  5003               	movf	___awmod@divisor,w,c
  4089  002A8C  5E01               	subwf	___awmod@dividend,f,c
  4090  002A8E  5004               	movf	___awmod@divisor+1,w,c
  4091  002A90  5A02               	subwfb	___awmod@dividend+1,f,c
  4092  002A92                     l443:
  4093  002A92  90D8               	bcf	status,0,c
  4094  002A94  3204               	rrcf	___awmod@divisor+1,f,c
  4095  002A96  3203               	rrcf	___awmod@divisor,f,c
  4096  002A98  2E05               	decfsz	___awmod@counter,f,c
  4097  002A9A  D7F1               	goto	u2060
  4098  002A9C                     l444:
  4099  002A9C  5006               	movf	___awmod@sign,w,c
  4100  002A9E  B4D8               	btfsc	status,2,c
  4101  002AA0  D004               	goto	l445
  4102  002AA2  6C01               	negf	___awmod@dividend,c
  4103  002AA4  1E02               	comf	___awmod@dividend+1,f,c
  4104  002AA6  B0D8               	btfsc	status,0,c
  4105  002AA8  2A02               	incf	___awmod@dividend+1,f,c
  4106  002AAA                     l445:
  4107  002AAA  C001  F001         	movff	___awmod@dividend,?___awmod
  4108  002AAE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4109  002AB2  0012               	return	
  4110  002AB4                     __end_of___awmod:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postinc2	equ	0xFDE
  4121                           postdec2	equ	0xFDD
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function ___awdiv *****************
  4127 ;; Defined at:
  4128 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  dividend        2    6[COMRAM] int 
  4131 ;;  divisor         2    8[COMRAM] int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quotient        2   12[COMRAM] int 
  4134 ;;  sign            1   11[COMRAM] unsigned char 
  4135 ;;  counter         1   10[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  2    6[COMRAM] int 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4146 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4149 ;;Total ram usage:        8 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_fround
  4155 ;;		_scale
  4156 ;;		_printf
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text9
  4161  00293E                     __ptext9:
  4162                           	opt stack 0
  4163  00293E                     ___awdiv:
  4164                           	opt stack 28
  4165                           
  4166                           ;incstack = 0
  4167  00293E  0E00               	movlw	0
  4168  002940  6E0C               	movwf	___awdiv@sign,c
  4169  002942  AE0A               	btfss	___awdiv@divisor+1,7,c
  4170  002944  D006               	goto	l423
  4171  002946  6C09               	negf	___awdiv@divisor,c
  4172  002948  1E0A               	comf	___awdiv@divisor+1,f,c
  4173  00294A  B0D8               	btfsc	status,0,c
  4174  00294C  2A0A               	incf	___awdiv@divisor+1,f,c
  4175  00294E  0E01               	movlw	1
  4176  002950  6E0C               	movwf	___awdiv@sign,c
  4177  002952                     l423:
  4178  002952  AE08               	btfss	___awdiv@dividend+1,7,c
  4179  002954  D006               	goto	l424
  4180  002956  6C07               	negf	___awdiv@dividend,c
  4181  002958  1E08               	comf	___awdiv@dividend+1,f,c
  4182  00295A  B0D8               	btfsc	status,0,c
  4183  00295C  2A08               	incf	___awdiv@dividend+1,f,c
  4184  00295E  0E01               	movlw	1
  4185  002960  1A0C               	xorwf	___awdiv@sign,f,c
  4186  002962                     l424:
  4187  002962  0E00               	movlw	0
  4188  002964  6E0E               	movwf	___awdiv@quotient+1,c
  4189  002966  0E00               	movlw	0
  4190  002968  6E0D               	movwf	___awdiv@quotient,c
  4191  00296A  5009               	movf	___awdiv@divisor,w,c
  4192  00296C  100A               	iorwf	___awdiv@divisor+1,w,c
  4193  00296E  B4D8               	btfsc	status,2,c
  4194  002970  D01C               	goto	l431
  4195  002972  0E01               	movlw	1
  4196  002974  6E0B               	movwf	___awdiv@counter,c
  4197  002976  D004               	goto	l426
  4198  002978  90D8               	bcf	status,0,c
  4199  00297A  3609               	rlcf	___awdiv@divisor,f,c
  4200  00297C  360A               	rlcf	___awdiv@divisor+1,f,c
  4201  00297E  2A0B               	incf	___awdiv@counter,f,c
  4202  002980                     l426:
  4203  002980  AE0A               	btfss	___awdiv@divisor+1,7,c
  4204  002982  D7FA               	goto	l427
  4205  002984                     u2000:
  4206  002984  90D8               	bcf	status,0,c
  4207  002986  360D               	rlcf	___awdiv@quotient,f,c
  4208  002988  360E               	rlcf	___awdiv@quotient+1,f,c
  4209  00298A  5009               	movf	___awdiv@divisor,w,c
  4210  00298C  5C07               	subwf	___awdiv@dividend,w,c
  4211  00298E  500A               	movf	___awdiv@divisor+1,w,c
  4212  002990  5808               	subwfb	___awdiv@dividend+1,w,c
  4213  002992  A0D8               	btfss	status,0,c
  4214  002994  D005               	goto	l430
  4215  002996  5009               	movf	___awdiv@divisor,w,c
  4216  002998  5E07               	subwf	___awdiv@dividend,f,c
  4217  00299A  500A               	movf	___awdiv@divisor+1,w,c
  4218  00299C  5A08               	subwfb	___awdiv@dividend+1,f,c
  4219  00299E  800D               	bsf	___awdiv@quotient,0,c
  4220  0029A0                     l430:
  4221  0029A0  90D8               	bcf	status,0,c
  4222  0029A2  320A               	rrcf	___awdiv@divisor+1,f,c
  4223  0029A4  3209               	rrcf	___awdiv@divisor,f,c
  4224  0029A6  2E0B               	decfsz	___awdiv@counter,f,c
  4225  0029A8  D7ED               	goto	u2000
  4226  0029AA                     l431:
  4227  0029AA  500C               	movf	___awdiv@sign,w,c
  4228  0029AC  B4D8               	btfsc	status,2,c
  4229  0029AE  D004               	goto	l432
  4230  0029B0  6C0D               	negf	___awdiv@quotient,c
  4231  0029B2  1E0E               	comf	___awdiv@quotient+1,f,c
  4232  0029B4  B0D8               	btfsc	status,0,c
  4233  0029B6  2A0E               	incf	___awdiv@quotient+1,f,c
  4234  0029B8                     l432:
  4235  0029B8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4236  0029BC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4237  0029C0  0012               	return	
  4238  0029C2                     __end_of___awdiv:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           postinc2	equ	0xFDE
  4249                           postdec2	equ	0xFDD
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function __tdiv_to_l_ *****************
  4255 ;; Defined at:
  4256 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  f1              3    0[COMRAM] float 
  4259 ;;  f2              3    3[COMRAM] float 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  quot            4    9[COMRAM] unsigned long 
  4262 ;;  exp1            1   14[COMRAM] unsigned char 
  4263 ;;  cntr            1   13[COMRAM] unsigned char 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  4    0[COMRAM] unsigned long 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4273 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4274 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4275 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4276 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4277 ;;Total ram usage:       15 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_printf
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text10
  4287  0022D8                     __ptext10:
  4288                           	opt stack 0
  4289  0022D8                     __tdiv_to_l_:
  4290                           	opt stack 29
  4291                           
  4292                           ;incstack = 0
  4293  0022D8  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4294  0022DC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4295  0022DE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4296  0022E0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4297  0022E2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4298  0022E4  E301               	bnc	u2191
  4299  0022E6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4300  0022E8                     u2191:
  4301  0022E8  5007               	movf	??__tdiv_to_l_,w,c
  4302  0022EA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4303  0022EC  500F               	movf	__tdiv_to_l_@exp1,w,c
  4304  0022EE  A4D8               	btfss	status,2,c
  4305  0022F0  D009               	goto	l559
  4306  0022F2  0E00               	movlw	0
  4307  0022F4  6E01               	movwf	?__tdiv_to_l_,c
  4308  0022F6  0E00               	movlw	0
  4309  0022F8  6E02               	movwf	?__tdiv_to_l_+1,c
  4310  0022FA  0E00               	movlw	0
  4311  0022FC  6E03               	movwf	?__tdiv_to_l_+2,c
  4312  0022FE  0E00               	movlw	0
  4313  002300  6E04               	movwf	?__tdiv_to_l_+3,c
  4314  002302  0012               	return	
  4315  002304                     l559:
  4316  002304  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4317  002308  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4318  00230A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4319  00230C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4320  00230E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4321  002310  E301               	bnc	u2211
  4322  002312  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4323  002314                     u2211:
  4324  002314  5007               	movf	??__tdiv_to_l_,w,c
  4325  002316  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4326  002318  500E               	movf	__tdiv_to_l_@cntr,w,c
  4327  00231A  A4D8               	btfss	status,2,c
  4328  00231C  D009               	goto	l561
  4329  00231E  0E00               	movlw	0
  4330  002320  6E01               	movwf	?__tdiv_to_l_,c
  4331  002322  0E00               	movlw	0
  4332  002324  6E02               	movwf	?__tdiv_to_l_+1,c
  4333  002326  0E00               	movlw	0
  4334  002328  6E03               	movwf	?__tdiv_to_l_+2,c
  4335  00232A  0E00               	movlw	0
  4336  00232C  6E04               	movwf	?__tdiv_to_l_+3,c
  4337  00232E  0012               	return	
  4338  002330                     l561:
  4339  002330  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4340  002332  0EFF               	movlw	255
  4341  002334  1601               	andwf	__tdiv_to_l_@f1,f,c
  4342  002336  0EFF               	movlw	255
  4343  002338  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4344  00233A  0E00               	movlw	0
  4345  00233C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4346  00233E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4347  002340  0EFF               	movlw	255
  4348  002342  1604               	andwf	__tdiv_to_l_@f2,f,c
  4349  002344  0EFF               	movlw	255
  4350  002346  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4351  002348  0E00               	movlw	0
  4352  00234A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4353  00234C  0E00               	movlw	0
  4354  00234E  6E0A               	movwf	__tdiv_to_l_@quot,c
  4355  002350  0E00               	movlw	0
  4356  002352  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4357  002354  0E00               	movlw	0
  4358  002356  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4359  002358  0E00               	movlw	0
  4360  00235A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4361  00235C  0E7F               	movlw	127
  4362  00235E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4363  002360  500E               	movf	__tdiv_to_l_@cntr,w,c
  4364  002362  0F98               	addlw	152
  4365  002364  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4366  002366  0E18               	movlw	24
  4367  002368  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4368  00236A                     l562:
  4369  00236A  90D8               	bcf	status,0,c
  4370  00236C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4371  00236E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4372  002370  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4373  002372  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4374  002374  5004               	movf	__tdiv_to_l_@f2,w,c
  4375  002376  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4376  002378  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4377  00237A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4378  00237C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4379  00237E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4380  002380  A0D8               	btfss	status,0,c
  4381  002382  D007               	goto	l563
  4382  002384  5004               	movf	__tdiv_to_l_@f2,w,c
  4383  002386  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4384  002388  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4385  00238A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4386  00238C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4387  00238E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4388  002390  800A               	bsf	__tdiv_to_l_@quot,0,c
  4389  002392                     l563:
  4390  002392  90D8               	bcf	status,0,c
  4391  002394  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4392  002396  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4393  002398  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4394  00239A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4395  00239C  D7E6               	goto	l562
  4396  00239E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4397  0023A0  D016               	goto	l565
  4398  0023A2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4399  0023A4  0A80               	xorlw	128
  4400  0023A6  0F97               	addlw	151
  4401  0023A8  B0D8               	btfsc	status,0,c
  4402  0023AA  D009               	goto	l566
  4403  0023AC  0E00               	movlw	0
  4404  0023AE  6E01               	movwf	?__tdiv_to_l_,c
  4405  0023B0  0E00               	movlw	0
  4406  0023B2  6E02               	movwf	?__tdiv_to_l_+1,c
  4407  0023B4  0E00               	movlw	0
  4408  0023B6  6E03               	movwf	?__tdiv_to_l_+2,c
  4409  0023B8  0E00               	movlw	0
  4410  0023BA  6E04               	movwf	?__tdiv_to_l_+3,c
  4411  0023BC  0012               	return	
  4412  0023BE                     l566:
  4413  0023BE  90D8               	bcf	status,0,c
  4414  0023C0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4415  0023C2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4416  0023C4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4417  0023C6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4418  0023C8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4419  0023CA  D7F9               	goto	l566
  4420  0023CC  D015               	goto	u2270
  4421  0023CE                     l565:
  4422  0023CE  0E17               	movlw	23
  4423  0023D0  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4424  0023D2  D00F               	goto	l571
  4425  0023D4  0E00               	movlw	0
  4426  0023D6  6E01               	movwf	?__tdiv_to_l_,c
  4427  0023D8  0E00               	movlw	0
  4428  0023DA  6E02               	movwf	?__tdiv_to_l_+1,c
  4429  0023DC  0E00               	movlw	0
  4430  0023DE  6E03               	movwf	?__tdiv_to_l_+2,c
  4431  0023E0  0E00               	movlw	0
  4432  0023E2  6E04               	movwf	?__tdiv_to_l_+3,c
  4433  0023E4  0012               	return	
  4434  0023E6  90D8               	bcf	status,0,c
  4435  0023E8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4436  0023EA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4437  0023EC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4438  0023EE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4439  0023F0  060F               	decf	__tdiv_to_l_@exp1,f,c
  4440  0023F2                     l571:
  4441  0023F2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4442  0023F4  A4D8               	btfss	status,2,c
  4443  0023F6  D7F7               	goto	l572
  4444  0023F8                     u2270:
  4445  0023F8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4446  0023FC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4447  002400  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4448  002404  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4449  002408  0012               	return		;funcret
  4450  00240A                     __end_of__tdiv_to_l_:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           fsr2h	equ	0xFDA
  4463                           fsr2l	equ	0xFD9
  4464                           status	equ	0xFD8
  4465                           
  4466 ;; *************** function __div_to_l_ *****************
  4467 ;; Defined at:
  4468 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  f1              3    0[COMRAM] unsigned long 
  4471 ;;  f2              3    3[COMRAM] unsigned long 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  quot            4    6[COMRAM] unsigned long 
  4474 ;;  exp1            1   11[COMRAM] unsigned char 
  4475 ;;  cntr            1   10[COMRAM] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  4    0[COMRAM] unsigned long 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4485 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4486 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4488 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4489 ;;Total ram usage:       12 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_printf
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text11
  4499  00240A                     __ptext11:
  4500                           	opt stack 0
  4501  00240A                     __div_to_l_:
  4502                           	opt stack 29
  4503                           
  4504                           ;incstack = 0
  4505  00240A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4506  00240C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4507  00240E  6E0C               	movwf	__div_to_l_@exp1,c
  4508  002410  500C               	movf	__div_to_l_@exp1,w,c
  4509  002412  A4D8               	btfss	status,2,c
  4510  002414  D009               	goto	l455
  4511  002416  0E00               	movlw	0
  4512  002418  6E01               	movwf	?__div_to_l_,c
  4513  00241A  0E00               	movlw	0
  4514  00241C  6E02               	movwf	?__div_to_l_+1,c
  4515  00241E  0E00               	movlw	0
  4516  002420  6E03               	movwf	?__div_to_l_+2,c
  4517  002422  0E00               	movlw	0
  4518  002424  6E04               	movwf	?__div_to_l_+3,c
  4519  002426  0012               	return	
  4520  002428                     l455:
  4521  002428  3406               	rlcf	__div_to_l_@f2+2,w,c
  4522  00242A  3407               	rlcf	__div_to_l_@f2+3,w,c
  4523  00242C  6E0B               	movwf	__div_to_l_@cntr,c
  4524  00242E  500B               	movf	__div_to_l_@cntr,w,c
  4525  002430  A4D8               	btfss	status,2,c
  4526  002432  D009               	goto	l457
  4527  002434  0E00               	movlw	0
  4528  002436  6E01               	movwf	?__div_to_l_,c
  4529  002438  0E00               	movlw	0
  4530  00243A  6E02               	movwf	?__div_to_l_+1,c
  4531  00243C  0E00               	movlw	0
  4532  00243E  6E03               	movwf	?__div_to_l_+2,c
  4533  002440  0E00               	movlw	0
  4534  002442  6E04               	movwf	?__div_to_l_+3,c
  4535  002444  0012               	return	
  4536  002446                     l457:
  4537  002446  8E03               	bsf	__div_to_l_@f1+2,7,c
  4538  002448  0EFF               	movlw	255
  4539  00244A  1601               	andwf	__div_to_l_@f1,f,c
  4540  00244C  0EFF               	movlw	255
  4541  00244E  1602               	andwf	__div_to_l_@f1+1,f,c
  4542  002450  0EFF               	movlw	255
  4543  002452  1603               	andwf	__div_to_l_@f1+2,f,c
  4544  002454  0E00               	movlw	0
  4545  002456  1604               	andwf	__div_to_l_@f1+3,f,c
  4546  002458  8E06               	bsf	__div_to_l_@f2+2,7,c
  4547  00245A  0EFF               	movlw	255
  4548  00245C  1604               	andwf	__div_to_l_@f2,f,c
  4549  00245E  0EFF               	movlw	255
  4550  002460  1605               	andwf	__div_to_l_@f2+1,f,c
  4551  002462  0EFF               	movlw	255
  4552  002464  1606               	andwf	__div_to_l_@f2+2,f,c
  4553  002466  0E00               	movlw	0
  4554  002468  1607               	andwf	__div_to_l_@f2+3,f,c
  4555  00246A  0E00               	movlw	0
  4556  00246C  6E07               	movwf	__div_to_l_@quot,c
  4557  00246E  0E00               	movlw	0
  4558  002470  6E08               	movwf	__div_to_l_@quot+1,c
  4559  002472  0E00               	movlw	0
  4560  002474  6E09               	movwf	__div_to_l_@quot+2,c
  4561  002476  0E00               	movlw	0
  4562  002478  6E0A               	movwf	__div_to_l_@quot+3,c
  4563  00247A  0E7F               	movlw	127
  4564  00247C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4565  00247E  500B               	movf	__div_to_l_@cntr,w,c
  4566  002480  0FA0               	addlw	160
  4567  002482  5E0C               	subwf	__div_to_l_@exp1,f,c
  4568  002484  0E20               	movlw	32
  4569  002486  6E0B               	movwf	__div_to_l_@cntr,c
  4570  002488  90D8               	bcf	status,0,c
  4571  00248A  3607               	rlcf	__div_to_l_@quot,f,c
  4572  00248C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4573  00248E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4574  002490  360A               	rlcf	__div_to_l_@quot+3,f,c
  4575  002492  5004               	movf	__div_to_l_@f2,w,c
  4576  002494  5C01               	subwf	__div_to_l_@f1,w,c
  4577  002496  5005               	movf	__div_to_l_@f2+1,w,c
  4578  002498  5802               	subwfb	__div_to_l_@f1+1,w,c
  4579  00249A  5006               	movf	__div_to_l_@f2+2,w,c
  4580  00249C  5803               	subwfb	__div_to_l_@f1+2,w,c
  4581  00249E  5007               	movf	__div_to_l_@f2+3,w,c
  4582  0024A0  5804               	subwfb	__div_to_l_@f1+3,w,c
  4583  0024A2  A0D8               	btfss	status,0,c
  4584  0024A4  D009               	goto	l459
  4585  0024A6  5004               	movf	__div_to_l_@f2,w,c
  4586  0024A8  5E01               	subwf	__div_to_l_@f1,f,c
  4587  0024AA  5005               	movf	__div_to_l_@f2+1,w,c
  4588  0024AC  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4589  0024AE  5006               	movf	__div_to_l_@f2+2,w,c
  4590  0024B0  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4591  0024B2  5007               	movf	__div_to_l_@f2+3,w,c
  4592  0024B4  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4593  0024B6  8007               	bsf	__div_to_l_@quot,0,c
  4594  0024B8                     l459:
  4595  0024B8  90D8               	bcf	status,0,c
  4596  0024BA  3601               	rlcf	__div_to_l_@f1,f,c
  4597  0024BC  3602               	rlcf	__div_to_l_@f1+1,f,c
  4598  0024BE  3603               	rlcf	__div_to_l_@f1+2,f,c
  4599  0024C0  3604               	rlcf	__div_to_l_@f1+3,f,c
  4600  0024C2  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4601  0024C4  D7E1               	goto	l458
  4602  0024C6  AE0C               	btfss	__div_to_l_@exp1,7,c
  4603  0024C8  D016               	goto	l461
  4604  0024CA  500C               	movf	__div_to_l_@exp1,w,c
  4605  0024CC  0A80               	xorlw	128
  4606  0024CE  0F9F               	addlw	159
  4607  0024D0  B0D8               	btfsc	status,0,c
  4608  0024D2  D009               	goto	l462
  4609  0024D4  0E00               	movlw	0
  4610  0024D6  6E01               	movwf	?__div_to_l_,c
  4611  0024D8  0E00               	movlw	0
  4612  0024DA  6E02               	movwf	?__div_to_l_+1,c
  4613  0024DC  0E00               	movlw	0
  4614  0024DE  6E03               	movwf	?__div_to_l_+2,c
  4615  0024E0  0E00               	movlw	0
  4616  0024E2  6E04               	movwf	?__div_to_l_+3,c
  4617  0024E4  0012               	return	
  4618  0024E6                     l462:
  4619  0024E6  90D8               	bcf	status,0,c
  4620  0024E8  320A               	rrcf	__div_to_l_@quot+3,f,c
  4621  0024EA  3209               	rrcf	__div_to_l_@quot+2,f,c
  4622  0024EC  3208               	rrcf	__div_to_l_@quot+1,f,c
  4623  0024EE  3207               	rrcf	__div_to_l_@quot,f,c
  4624  0024F0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4625  0024F2  D7F9               	goto	l462
  4626  0024F4  D015               	goto	u2340
  4627  0024F6                     l461:
  4628  0024F6  0E1F               	movlw	31
  4629  0024F8  640C               	cpfsgt	__div_to_l_@exp1,c
  4630  0024FA  D00F               	goto	l467
  4631  0024FC  0E00               	movlw	0
  4632  0024FE  6E01               	movwf	?__div_to_l_,c
  4633  002500  0E00               	movlw	0
  4634  002502  6E02               	movwf	?__div_to_l_+1,c
  4635  002504  0E00               	movlw	0
  4636  002506  6E03               	movwf	?__div_to_l_+2,c
  4637  002508  0E00               	movlw	0
  4638  00250A  6E04               	movwf	?__div_to_l_+3,c
  4639  00250C  0012               	return	
  4640  00250E  90D8               	bcf	status,0,c
  4641  002510  3607               	rlcf	__div_to_l_@quot,f,c
  4642  002512  3608               	rlcf	__div_to_l_@quot+1,f,c
  4643  002514  3609               	rlcf	__div_to_l_@quot+2,f,c
  4644  002516  360A               	rlcf	__div_to_l_@quot+3,f,c
  4645  002518  060C               	decf	__div_to_l_@exp1,f,c
  4646  00251A                     l467:
  4647  00251A  500C               	movf	__div_to_l_@exp1,w,c
  4648  00251C  A4D8               	btfss	status,2,c
  4649  00251E  D7F7               	goto	l468
  4650  002520                     u2340:
  4651  002520  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4652  002524  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4653  002528  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4654  00252C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4655  002530  0012               	return		;funcret
  4656  002532                     __end_of__div_to_l_:
  4657                           	opt stack 0
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodh	equ	0xFF4
  4663                           prodl	equ	0xFF3
  4664                           postinc0	equ	0xFEE
  4665                           wreg	equ	0xFE8
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function ___lltoft *****************
  4673 ;; Defined at:
  4674 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  c               4    8[COMRAM] unsigned long 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  exp             1   16[COMRAM] unsigned char 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  3    8[COMRAM] float 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;Total ram usage:        9 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    1
  4695 ;; This function calls:
  4696 ;;		___ftpack
  4697 ;; This function is called by:
  4698 ;;		_printf
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text12
  4703  002B1A                     __ptext12:
  4704                           	opt stack 0
  4705  002B1A                     ___lltoft:
  4706                           	opt stack 28
  4707                           
  4708                           ;incstack = 0
  4709  002B1A  0E8E               	movlw	142
  4710  002B1C  6E11               	movwf	___lltoft@exp,c
  4711  002B1E  D006               	goto	l666
  4712  002B20  90D8               	bcf	status,0,c
  4713  002B22  320C               	rrcf	___lltoft@c+3,f,c
  4714  002B24  320B               	rrcf	___lltoft@c+2,f,c
  4715  002B26  320A               	rrcf	___lltoft@c+1,f,c
  4716  002B28  3209               	rrcf	___lltoft@c,f,c
  4717  002B2A  2A11               	incf	___lltoft@exp,f,c
  4718  002B2C                     l666:
  4719  002B2C  0E00               	movlw	0
  4720  002B2E  1409               	andwf	___lltoft@c,w,c
  4721  002B30  6E0D               	movwf	??___lltoft& (0+255),c
  4722  002B32  0E00               	movlw	0
  4723  002B34  140A               	andwf	___lltoft@c+1,w,c
  4724  002B36  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4725  002B38  0E00               	movlw	0
  4726  002B3A  140B               	andwf	___lltoft@c+2,w,c
  4727  002B3C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4728  002B3E  0EFF               	movlw	255
  4729  002B40  140C               	andwf	___lltoft@c+3,w,c
  4730  002B42  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4731  002B44  500D               	movf	??___lltoft,w,c
  4732  002B46  100E               	iorwf	??___lltoft+1,w,c
  4733  002B48  100F               	iorwf	??___lltoft+2,w,c
  4734  002B4A  1010               	iorwf	??___lltoft+3,w,c
  4735  002B4C  A4D8               	btfss	status,2,c
  4736  002B4E  D7E8               	goto	l667
  4737  002B50  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4738  002B54  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4739  002B58  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4740  002B5C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4741  002B60  0E00               	movlw	0
  4742  002B62  6E05               	movwf	___ftpack@sign,c
  4743  002B64  EC00  F014         	call	___ftpack	;wreg free
  4744  002B68  C001  F009         	movff	?___ftpack,?___lltoft
  4745  002B6C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4746  002B70  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4747  002B74  0012               	return	
  4748  002B76                     __end_of___lltoft:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           postinc0	equ	0xFEE
  4757                           wreg	equ	0xFE8
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function ___llmod *****************
  4765 ;; Defined at:
  4766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  dividend        4   13[COMRAM] unsigned long 
  4769 ;;  divisor         4   17[COMRAM] unsigned long 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  counter         1   21[COMRAM] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;                  4   13[COMRAM] unsigned long 
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4781 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4785 ;;Total ram usage:        9 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_printf
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text13
  4795  002AB4                     __ptext13:
  4796                           	opt stack 0
  4797  002AB4                     ___llmod:
  4798                           	opt stack 29
  4799                           
  4800                           ;incstack = 0
  4801  002AB4  5012               	movf	___llmod@divisor,w,c
  4802  002AB6  1013               	iorwf	___llmod@divisor+1,w,c
  4803  002AB8  1014               	iorwf	___llmod@divisor+2,w,c
  4804  002ABA  1015               	iorwf	___llmod@divisor+3,w,c
  4805  002ABC  B4D8               	btfsc	status,2,c
  4806  002ABE  D024               	goto	l660
  4807  002AC0  0E01               	movlw	1
  4808  002AC2  6E16               	movwf	___llmod@counter,c
  4809  002AC4  D006               	goto	l655
  4810  002AC6  90D8               	bcf	status,0,c
  4811  002AC8  3612               	rlcf	___llmod@divisor,f,c
  4812  002ACA  3613               	rlcf	___llmod@divisor+1,f,c
  4813  002ACC  3614               	rlcf	___llmod@divisor+2,f,c
  4814  002ACE  3615               	rlcf	___llmod@divisor+3,f,c
  4815  002AD0  2A16               	incf	___llmod@counter,f,c
  4816  002AD2                     l655:
  4817  002AD2  AE15               	btfss	___llmod@divisor+3,7,c
  4818  002AD4  D7F8               	goto	l656
  4819  002AD6                     u2520:
  4820  002AD6  5012               	movf	___llmod@divisor,w,c
  4821  002AD8  5C0E               	subwf	___llmod@dividend,w,c
  4822  002ADA  5013               	movf	___llmod@divisor+1,w,c
  4823  002ADC  580F               	subwfb	___llmod@dividend+1,w,c
  4824  002ADE  5014               	movf	___llmod@divisor+2,w,c
  4825  002AE0  5810               	subwfb	___llmod@dividend+2,w,c
  4826  002AE2  5015               	movf	___llmod@divisor+3,w,c
  4827  002AE4  5811               	subwfb	___llmod@dividend+3,w,c
  4828  002AE6  A0D8               	btfss	status,0,c
  4829  002AE8  D008               	goto	l659
  4830  002AEA  5012               	movf	___llmod@divisor,w,c
  4831  002AEC  5E0E               	subwf	___llmod@dividend,f,c
  4832  002AEE  5013               	movf	___llmod@divisor+1,w,c
  4833  002AF0  5A0F               	subwfb	___llmod@dividend+1,f,c
  4834  002AF2  5014               	movf	___llmod@divisor+2,w,c
  4835  002AF4  5A10               	subwfb	___llmod@dividend+2,f,c
  4836  002AF6  5015               	movf	___llmod@divisor+3,w,c
  4837  002AF8  5A11               	subwfb	___llmod@dividend+3,f,c
  4838  002AFA                     l659:
  4839  002AFA  90D8               	bcf	status,0,c
  4840  002AFC  3215               	rrcf	___llmod@divisor+3,f,c
  4841  002AFE  3214               	rrcf	___llmod@divisor+2,f,c
  4842  002B00  3213               	rrcf	___llmod@divisor+1,f,c
  4843  002B02  3212               	rrcf	___llmod@divisor,f,c
  4844  002B04  2E16               	decfsz	___llmod@counter,f,c
  4845  002B06  D7E7               	goto	u2520
  4846  002B08                     l660:
  4847  002B08  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4848  002B0C  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4849  002B10  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4850  002B14  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4851  002B18  0012               	return		;funcret
  4852  002B1A                     __end_of___llmod:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function ___lldiv *****************
  4869 ;; Defined at:
  4870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  dividend        4    0[COMRAM] unsigned long 
  4873 ;;  divisor         4    4[COMRAM] unsigned long 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  quotient        4    8[COMRAM] unsigned long 
  4876 ;;  counter         1   12[COMRAM] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  4    0[COMRAM] unsigned long 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4886 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4889 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4890 ;;Total ram usage:       13 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_printf
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text14
  4900  0029C2                     __ptext14:
  4901                           	opt stack 0
  4902  0029C2                     ___lldiv:
  4903                           	opt stack 29
  4904                           
  4905                           ;incstack = 0
  4906  0029C2  0E00               	movlw	0
  4907  0029C4  6E09               	movwf	___lldiv@quotient,c
  4908  0029C6  0E00               	movlw	0
  4909  0029C8  6E0A               	movwf	___lldiv@quotient+1,c
  4910  0029CA  0E00               	movlw	0
  4911  0029CC  6E0B               	movwf	___lldiv@quotient+2,c
  4912  0029CE  0E00               	movlw	0
  4913  0029D0  6E0C               	movwf	___lldiv@quotient+3,c
  4914  0029D2  5005               	movf	___lldiv@divisor,w,c
  4915  0029D4  1006               	iorwf	___lldiv@divisor+1,w,c
  4916  0029D6  1007               	iorwf	___lldiv@divisor+2,w,c
  4917  0029D8  1008               	iorwf	___lldiv@divisor+3,w,c
  4918  0029DA  B4D8               	btfsc	status,2,c
  4919  0029DC  D02A               	goto	l650
  4920  0029DE  0E01               	movlw	1
  4921  0029E0  6E0D               	movwf	___lldiv@counter,c
  4922  0029E2  D006               	goto	l645
  4923  0029E4  90D8               	bcf	status,0,c
  4924  0029E6  3605               	rlcf	___lldiv@divisor,f,c
  4925  0029E8  3606               	rlcf	___lldiv@divisor+1,f,c
  4926  0029EA  3607               	rlcf	___lldiv@divisor+2,f,c
  4927  0029EC  3608               	rlcf	___lldiv@divisor+3,f,c
  4928  0029EE  2A0D               	incf	___lldiv@counter,f,c
  4929  0029F0                     l645:
  4930  0029F0  AE08               	btfss	___lldiv@divisor+3,7,c
  4931  0029F2  D7F8               	goto	l646
  4932  0029F4                     u2490:
  4933  0029F4  90D8               	bcf	status,0,c
  4934  0029F6  3609               	rlcf	___lldiv@quotient,f,c
  4935  0029F8  360A               	rlcf	___lldiv@quotient+1,f,c
  4936  0029FA  360B               	rlcf	___lldiv@quotient+2,f,c
  4937  0029FC  360C               	rlcf	___lldiv@quotient+3,f,c
  4938  0029FE  5005               	movf	___lldiv@divisor,w,c
  4939  002A00  5C01               	subwf	___lldiv@dividend,w,c
  4940  002A02  5006               	movf	___lldiv@divisor+1,w,c
  4941  002A04  5802               	subwfb	___lldiv@dividend+1,w,c
  4942  002A06  5007               	movf	___lldiv@divisor+2,w,c
  4943  002A08  5803               	subwfb	___lldiv@dividend+2,w,c
  4944  002A0A  5008               	movf	___lldiv@divisor+3,w,c
  4945  002A0C  5804               	subwfb	___lldiv@dividend+3,w,c
  4946  002A0E  A0D8               	btfss	status,0,c
  4947  002A10  D009               	goto	l649
  4948  002A12  5005               	movf	___lldiv@divisor,w,c
  4949  002A14  5E01               	subwf	___lldiv@dividend,f,c
  4950  002A16  5006               	movf	___lldiv@divisor+1,w,c
  4951  002A18  5A02               	subwfb	___lldiv@dividend+1,f,c
  4952  002A1A  5007               	movf	___lldiv@divisor+2,w,c
  4953  002A1C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4954  002A1E  5008               	movf	___lldiv@divisor+3,w,c
  4955  002A20  5A04               	subwfb	___lldiv@dividend+3,f,c
  4956  002A22  8009               	bsf	___lldiv@quotient,0,c
  4957  002A24                     l649:
  4958  002A24  90D8               	bcf	status,0,c
  4959  002A26  3208               	rrcf	___lldiv@divisor+3,f,c
  4960  002A28  3207               	rrcf	___lldiv@divisor+2,f,c
  4961  002A2A  3206               	rrcf	___lldiv@divisor+1,f,c
  4962  002A2C  3205               	rrcf	___lldiv@divisor,f,c
  4963  002A2E  2E0D               	decfsz	___lldiv@counter,f,c
  4964  002A30  D7E1               	goto	u2490
  4965  002A32                     l650:
  4966  002A32  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4967  002A36  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4968  002A3A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4969  002A3E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4970  002A42  0012               	return		;funcret
  4971  002A44                     __end_of___lldiv:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           postinc2	equ	0xFDE
  4982                           postdec2	equ	0xFDD
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function ___fttol *****************
  4988 ;; Defined at:
  4989 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  f1              3   42[COMRAM] float 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  lval            4   52[COMRAM] unsigned long 
  4994 ;;  exp1            1   56[COMRAM] unsigned char 
  4995 ;;  sign1           1   51[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  4   42[COMRAM] long 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5006 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5007 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5008 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5009 ;;Total ram usage:       15 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_printf
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text15
  5019  002626                     __ptext15:
  5020                           	opt stack 0
  5021  002626                     ___fttol:
  5022                           	opt stack 29
  5023                           
  5024                           ;incstack = 0
  5025  002626  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5026  00262A  6A30               	clrf	(??___fttol+1)& (0+255),c
  5027  00262C  6A31               	clrf	(??___fttol+2)& (0+255),c
  5028  00262E  342C               	rlcf	___fttol@f1+1,w,c
  5029  002630  362F               	rlcf	??___fttol& (0+255),f,c
  5030  002632  E301               	bnc	u2401
  5031  002634  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5032  002636                     u2401:
  5033  002636  502F               	movf	??___fttol,w,c
  5034  002638  6E39               	movwf	___fttol@exp1,c
  5035  00263A  5039               	movf	___fttol@exp1,w,c
  5036  00263C  A4D8               	btfss	status,2,c
  5037  00263E  D009               	goto	l604
  5038  002640  0E00               	movlw	0
  5039  002642  6E2B               	movwf	?___fttol,c
  5040  002644  0E00               	movlw	0
  5041  002646  6E2C               	movwf	?___fttol+1,c
  5042  002648  0E00               	movlw	0
  5043  00264A  6E2D               	movwf	?___fttol+2,c
  5044  00264C  0E00               	movlw	0
  5045  00264E  6E2E               	movwf	?___fttol+3,c
  5046  002650  0012               	return	
  5047  002652                     l604:
  5048  002652  0E17               	movlw	23
  5049  002654  6E2F               	movwf	??___fttol& (0+255),c
  5050  002656  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5051  00265A  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5052  00265E  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5053  002662  282F               	incf	??___fttol,w,c
  5054  002664  6E33               	movwf	(??___fttol+4)& (0+255),c
  5055  002666  D004               	goto	u2420
  5056  002668                     u2425:
  5057  002668  90D8               	bcf	status,0,c
  5058  00266A  3232               	rrcf	??___fttol+3,f,c
  5059  00266C  3231               	rrcf	??___fttol+2,f,c
  5060  00266E  3230               	rrcf	??___fttol+1,f,c
  5061  002670                     u2420:
  5062  002670  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5063  002672  D7FA               	goto	u2425
  5064  002674  5030               	movf	??___fttol+1,w,c
  5065  002676  6E34               	movwf	___fttol@sign1,c
  5066  002678  8E2C               	bsf	___fttol@f1+1,7,c
  5067  00267A  0EFF               	movlw	255
  5068  00267C  162B               	andwf	___fttol@f1,f,c
  5069  00267E  0EFF               	movlw	255
  5070  002680  162C               	andwf	___fttol@f1+1,f,c
  5071  002682  0E00               	movlw	0
  5072  002684  162D               	andwf	___fttol@f1+2,f,c
  5073  002686  502B               	movf	___fttol@f1,w,c
  5074  002688  6E35               	movwf	___fttol@lval,c
  5075  00268A  502C               	movf	___fttol@f1+1,w,c
  5076  00268C  6E36               	movwf	___fttol@lval+1,c
  5077  00268E  502D               	movf	___fttol@f1+2,w,c
  5078  002690  6E37               	movwf	___fttol@lval+2,c
  5079  002692  6A38               	clrf	___fttol@lval+3,c
  5080  002694  0E8E               	movlw	142
  5081  002696  5E39               	subwf	___fttol@exp1,f,c
  5082  002698  AE39               	btfss	___fttol@exp1,7,c
  5083  00269A  D016               	goto	l606
  5084  00269C  5039               	movf	___fttol@exp1,w,c
  5085  00269E  0A80               	xorlw	128
  5086  0026A0  0F8F               	addlw	143
  5087  0026A2  B0D8               	btfsc	status,0,c
  5088  0026A4  D009               	goto	l607
  5089  0026A6  0E00               	movlw	0
  5090  0026A8  6E2B               	movwf	?___fttol,c
  5091  0026AA  0E00               	movlw	0
  5092  0026AC  6E2C               	movwf	?___fttol+1,c
  5093  0026AE  0E00               	movlw	0
  5094  0026B0  6E2D               	movwf	?___fttol+2,c
  5095  0026B2  0E00               	movlw	0
  5096  0026B4  6E2E               	movwf	?___fttol+3,c
  5097  0026B6  0012               	return	
  5098  0026B8                     l607:
  5099  0026B8  90D8               	bcf	status,0,c
  5100  0026BA  3238               	rrcf	___fttol@lval+3,f,c
  5101  0026BC  3237               	rrcf	___fttol@lval+2,f,c
  5102  0026BE  3236               	rrcf	___fttol@lval+1,f,c
  5103  0026C0  3235               	rrcf	___fttol@lval,f,c
  5104  0026C2  3E39               	incfsz	___fttol@exp1,f,c
  5105  0026C4  D7F9               	goto	l607
  5106  0026C6  D015               	goto	u2460
  5107  0026C8                     l606:
  5108  0026C8  0E17               	movlw	23
  5109  0026CA  6439               	cpfsgt	___fttol@exp1,c
  5110  0026CC  D00F               	goto	l612
  5111  0026CE  0E00               	movlw	0
  5112  0026D0  6E2B               	movwf	?___fttol,c
  5113  0026D2  0E00               	movlw	0
  5114  0026D4  6E2C               	movwf	?___fttol+1,c
  5115  0026D6  0E00               	movlw	0
  5116  0026D8  6E2D               	movwf	?___fttol+2,c
  5117  0026DA  0E00               	movlw	0
  5118  0026DC  6E2E               	movwf	?___fttol+3,c
  5119  0026DE  0012               	return	
  5120  0026E0  90D8               	bcf	status,0,c
  5121  0026E2  3635               	rlcf	___fttol@lval,f,c
  5122  0026E4  3636               	rlcf	___fttol@lval+1,f,c
  5123  0026E6  3637               	rlcf	___fttol@lval+2,f,c
  5124  0026E8  3638               	rlcf	___fttol@lval+3,f,c
  5125  0026EA  0639               	decf	___fttol@exp1,f,c
  5126  0026EC                     l612:
  5127  0026EC  5039               	movf	___fttol@exp1,w,c
  5128  0026EE  A4D8               	btfss	status,2,c
  5129  0026F0  D7F7               	goto	l613
  5130  0026F2                     u2460:
  5131  0026F2  5034               	movf	___fttol@sign1,w,c
  5132  0026F4  B4D8               	btfsc	status,2,c
  5133  0026F6  D008               	goto	l615
  5134  0026F8  1E38               	comf	___fttol@lval+3,f,c
  5135  0026FA  1E37               	comf	___fttol@lval+2,f,c
  5136  0026FC  1E36               	comf	___fttol@lval+1,f,c
  5137  0026FE  6C35               	negf	___fttol@lval,c
  5138  002700  0E00               	movlw	0
  5139  002702  2236               	addwfc	___fttol@lval+1,f,c
  5140  002704  2237               	addwfc	___fttol@lval+2,f,c
  5141  002706  2238               	addwfc	___fttol@lval+3,f,c
  5142  002708                     l615:
  5143  002708  C035  F02B         	movff	___fttol@lval,?___fttol
  5144  00270C  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5145  002710  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5146  002714  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5147  002718  0012               	return	
  5148  00271A                     __end_of___fttol:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           postinc0	equ	0xFEE
  5157                           wreg	equ	0xFE8
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function ___ftsub *****************
  5165 ;; Defined at:
  5166 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  f1              3   57[COMRAM] float 
  5169 ;;  f2              3   60[COMRAM] float 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  3   57[COMRAM] float 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5181 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5184 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5185 ;;Total ram usage:        6 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    2
  5188 ;; This function calls:
  5189 ;;		___ftadd
  5190 ;; This function is called by:
  5191 ;;		_printf
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text16
  5196  002BC2                     __ptext16:
  5197                           	opt stack 0
  5198  002BC2                     ___ftsub:
  5199                           	opt stack 27
  5200                           
  5201                           ;incstack = 0
  5202  002BC2  503D               	movf	___ftsub@f2,w,c
  5203  002BC4  103E               	iorwf	___ftsub@f2+1,w,c
  5204  002BC6  103F               	iorwf	___ftsub@f2+2,w,c
  5205  002BC8  B4D8               	btfsc	status,2,c
  5206  002BCA  D006               	goto	l600
  5207  002BCC  0E00               	movlw	0
  5208  002BCE  1A3D               	xorwf	___ftsub@f2,f,c
  5209  002BD0  0E00               	movlw	0
  5210  002BD2  1A3E               	xorwf	___ftsub@f2+1,f,c
  5211  002BD4  0E80               	movlw	128
  5212  002BD6  1A3F               	xorwf	___ftsub@f2+2,f,c
  5213  002BD8                     l600:
  5214  002BD8  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5215  002BDC  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5216  002BE0  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5217  002BE4  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5218  002BE8  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5219  002BEC  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5220  002BF0  EC96  F010         	call	___ftadd	;wreg free
  5221  002BF4  C02E  F03A         	movff	?___ftadd,?___ftsub
  5222  002BF8  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5223  002BFC  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5224  002C00  0012               	return	
  5225  002C02                     __end_of___ftsub:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function ___ftadd *****************
  5242 ;; Defined at:
  5243 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  f1              3   45[COMRAM] float 
  5246 ;;  f2              3   48[COMRAM] float 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  exp1            1   56[COMRAM] unsigned char 
  5249 ;;  exp2            1   55[COMRAM] unsigned char 
  5250 ;;  sign            1   54[COMRAM] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  3   45[COMRAM] float 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5260 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5262 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5263 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5264 ;;Total ram usage:       12 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    1
  5267 ;; This function calls:
  5268 ;;		___ftpack
  5269 ;; This function is called by:
  5270 ;;		_main
  5271 ;;		_printf
  5272 ;;		___ftsub
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text17
  5277  00212C                     __ptext17:
  5278                           	opt stack 0
  5279  00212C                     ___ftadd:
  5280                           	opt stack 27
  5281                           
  5282                           ;incstack = 0
  5283  00212C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5284  002130  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5285  002132  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5286  002134  342F               	rlcf	___ftadd@f1+1,w,c
  5287  002136  3634               	rlcf	??___ftadd& (0+255),f,c
  5288  002138  E301               	bnc	u1701
  5289  00213A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5290  00213C                     u1701:
  5291  00213C  5034               	movf	??___ftadd,w,c
  5292  00213E  6E39               	movwf	___ftadd@exp1,c
  5293  002140  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5294  002144  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5295  002146  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5296  002148  3432               	rlcf	___ftadd@f2+1,w,c
  5297  00214A  3634               	rlcf	??___ftadd& (0+255),f,c
  5298  00214C  E301               	bnc	u1711
  5299  00214E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5300  002150                     u1711:
  5301  002150  5034               	movf	??___ftadd,w,c
  5302  002152  6E38               	movwf	___ftadd@exp2,c
  5303  002154  5039               	movf	___ftadd@exp1,w,c
  5304  002156  B4D8               	btfsc	status,2,c
  5305  002158  D00B               	goto	u1740
  5306  00215A  5038               	movf	___ftadd@exp2,w,c
  5307  00215C  5C39               	subwf	___ftadd@exp1,w,c
  5308  00215E  B0D8               	btfsc	status,0,c
  5309  002160  D00E               	goto	l518
  5310  002162  5039               	movf	___ftadd@exp1,w,c
  5311  002164  0800               	sublw	0
  5312  002166  2438               	addwf	___ftadd@exp2,w,c
  5313  002168  6E34               	movwf	??___ftadd& (0+255),c
  5314  00216A  0E18               	movlw	24
  5315  00216C  6434               	cpfsgt	??___ftadd,c
  5316  00216E  D007               	goto	l518
  5317  002170                     u1740:
  5318  002170  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5319  002174  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5320  002178  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5321  00217C  0012               	return	
  5322  00217E                     l518:
  5323  00217E  5038               	movf	___ftadd@exp2,w,c
  5324  002180  B4D8               	btfsc	status,2,c
  5325  002182  D00B               	goto	u1770
  5326  002184  5039               	movf	___ftadd@exp1,w,c
  5327  002186  5C38               	subwf	___ftadd@exp2,w,c
  5328  002188  B0D8               	btfsc	status,0,c
  5329  00218A  D00E               	goto	l522
  5330  00218C  5038               	movf	___ftadd@exp2,w,c
  5331  00218E  0800               	sublw	0
  5332  002190  2439               	addwf	___ftadd@exp1,w,c
  5333  002192  6E34               	movwf	??___ftadd& (0+255),c
  5334  002194  0E18               	movlw	24
  5335  002196  6434               	cpfsgt	??___ftadd,c
  5336  002198  D007               	goto	l522
  5337  00219A                     u1770:
  5338  00219A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5339  00219E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5340  0021A2  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5341  0021A6  0012               	return	
  5342  0021A8                     l522:
  5343  0021A8  0E06               	movlw	6
  5344  0021AA  6E37               	movwf	___ftadd@sign,c
  5345  0021AC  BE30               	btfsc	___ftadd@f1+2,7,c
  5346  0021AE  8E37               	bsf	___ftadd@sign,7,c
  5347  0021B0  BE33               	btfsc	___ftadd@f2+2,7,c
  5348  0021B2  8C37               	bsf	___ftadd@sign,6,c
  5349  0021B4  8E2F               	bsf	___ftadd@f1+1,7,c
  5350  0021B6  0EFF               	movlw	255
  5351  0021B8  162E               	andwf	___ftadd@f1,f,c
  5352  0021BA  0EFF               	movlw	255
  5353  0021BC  162F               	andwf	___ftadd@f1+1,f,c
  5354  0021BE  0E00               	movlw	0
  5355  0021C0  1630               	andwf	___ftadd@f1+2,f,c
  5356  0021C2  8E32               	bsf	___ftadd@f2+1,7,c
  5357  0021C4  0EFF               	movlw	255
  5358  0021C6  1631               	andwf	___ftadd@f2,f,c
  5359  0021C8  0EFF               	movlw	255
  5360  0021CA  1632               	andwf	___ftadd@f2+1,f,c
  5361  0021CC  0E00               	movlw	0
  5362  0021CE  1633               	andwf	___ftadd@f2+2,f,c
  5363  0021D0  5038               	movf	___ftadd@exp2,w,c
  5364  0021D2  5C39               	subwf	___ftadd@exp1,w,c
  5365  0021D4  B0D8               	btfsc	status,0,c
  5366  0021D6  D01B               	goto	l527
  5367  0021D8                     u1800:
  5368  0021D8  90D8               	bcf	status,0,c
  5369  0021DA  3631               	rlcf	___ftadd@f2,f,c
  5370  0021DC  3632               	rlcf	___ftadd@f2+1,f,c
  5371  0021DE  3633               	rlcf	___ftadd@f2+2,f,c
  5372  0021E0  0638               	decf	___ftadd@exp2,f,c
  5373  0021E2  5039               	movf	___ftadd@exp1,w,c
  5374  0021E4  1838               	xorwf	___ftadd@exp2,w,c
  5375  0021E6  B4D8               	btfsc	status,2,c
  5376  0021E8  D00D               	goto	l532
  5377  0021EA  0637               	decf	___ftadd@sign,f,c
  5378  0021EC  C037  F034         	movff	___ftadd@sign,??___ftadd
  5379  0021F0  0E07               	movlw	7
  5380  0021F2  1634               	andwf	??___ftadd,f,c
  5381  0021F4  B4D8               	btfsc	status,2,c
  5382  0021F6  D006               	goto	l532
  5383  0021F8  D7EF               	goto	u1800
  5384  0021FA  90D8               	bcf	status,0,c
  5385  0021FC  3230               	rrcf	___ftadd@f1+2,f,c
  5386  0021FE  322F               	rrcf	___ftadd@f1+1,f,c
  5387  002200  322E               	rrcf	___ftadd@f1,f,c
  5388  002202  2A39               	incf	___ftadd@exp1,f,c
  5389  002204                     l532:
  5390  002204  5038               	movf	___ftadd@exp2,w,c
  5391  002206  1839               	xorwf	___ftadd@exp1,w,c
  5392  002208  B4D8               	btfsc	status,2,c
  5393  00220A  D01F               	goto	u1870
  5394  00220C  D7F6               	goto	l533
  5395  00220E                     l527:
  5396  00220E  5039               	movf	___ftadd@exp1,w,c
  5397  002210  5C38               	subwf	___ftadd@exp2,w,c
  5398  002212  B0D8               	btfsc	status,0,c
  5399  002214  D01A               	goto	u1870
  5400  002216                     u1840:
  5401  002216  90D8               	bcf	status,0,c
  5402  002218  362E               	rlcf	___ftadd@f1,f,c
  5403  00221A  362F               	rlcf	___ftadd@f1+1,f,c
  5404  00221C  3630               	rlcf	___ftadd@f1+2,f,c
  5405  00221E  0639               	decf	___ftadd@exp1,f,c
  5406  002220  5039               	movf	___ftadd@exp1,w,c
  5407  002222  1838               	xorwf	___ftadd@exp2,w,c
  5408  002224  B4D8               	btfsc	status,2,c
  5409  002226  D00D               	goto	l541
  5410  002228  0637               	decf	___ftadd@sign,f,c
  5411  00222A  C037  F034         	movff	___ftadd@sign,??___ftadd
  5412  00222E  0E07               	movlw	7
  5413  002230  1634               	andwf	??___ftadd,f,c
  5414  002232  B4D8               	btfsc	status,2,c
  5415  002234  D006               	goto	l541
  5416  002236  D7EF               	goto	u1840
  5417  002238  90D8               	bcf	status,0,c
  5418  00223A  3233               	rrcf	___ftadd@f2+2,f,c
  5419  00223C  3232               	rrcf	___ftadd@f2+1,f,c
  5420  00223E  3231               	rrcf	___ftadd@f2,f,c
  5421  002240  2A38               	incf	___ftadd@exp2,f,c
  5422  002242                     l541:
  5423  002242  5038               	movf	___ftadd@exp2,w,c
  5424  002244  1839               	xorwf	___ftadd@exp1,w,c
  5425  002246  A4D8               	btfss	status,2,c
  5426  002248  D7F7               	goto	l542
  5427  00224A                     u1870:
  5428  00224A  AE37               	btfss	___ftadd@sign,7,c
  5429  00224C  D00C               	goto	l544
  5430  00224E  0EFF               	movlw	255
  5431  002250  1A2E               	xorwf	___ftadd@f1,f,c
  5432  002252  0EFF               	movlw	255
  5433  002254  1A2F               	xorwf	___ftadd@f1+1,f,c
  5434  002256  0EFF               	movlw	255
  5435  002258  1A30               	xorwf	___ftadd@f1+2,f,c
  5436  00225A  0E01               	movlw	1
  5437  00225C  262E               	addwf	___ftadd@f1,f,c
  5438  00225E  0E00               	movlw	0
  5439  002260  222F               	addwfc	___ftadd@f1+1,f,c
  5440  002262  0E00               	movlw	0
  5441  002264  2230               	addwfc	___ftadd@f1+2,f,c
  5442  002266                     l544:
  5443  002266  AC37               	btfss	___ftadd@sign,6,c
  5444  002268  D00C               	goto	l545
  5445  00226A  0EFF               	movlw	255
  5446  00226C  1A31               	xorwf	___ftadd@f2,f,c
  5447  00226E  0EFF               	movlw	255
  5448  002270  1A32               	xorwf	___ftadd@f2+1,f,c
  5449  002272  0EFF               	movlw	255
  5450  002274  1A33               	xorwf	___ftadd@f2+2,f,c
  5451  002276  0E01               	movlw	1
  5452  002278  2631               	addwf	___ftadd@f2,f,c
  5453  00227A  0E00               	movlw	0
  5454  00227C  2232               	addwfc	___ftadd@f2+1,f,c
  5455  00227E  0E00               	movlw	0
  5456  002280  2233               	addwfc	___ftadd@f2+2,f,c
  5457  002282                     l545:
  5458  002282  0E00               	movlw	0
  5459  002284  6E37               	movwf	___ftadd@sign,c
  5460  002286  502E               	movf	___ftadd@f1,w,c
  5461  002288  2631               	addwf	___ftadd@f2,f,c
  5462  00228A  502F               	movf	___ftadd@f1+1,w,c
  5463  00228C  2232               	addwfc	___ftadd@f2+1,f,c
  5464  00228E  5030               	movf	___ftadd@f1+2,w,c
  5465  002290  2233               	addwfc	___ftadd@f2+2,f,c
  5466  002292  AE33               	btfss	___ftadd@f2+2,7,c
  5467  002294  D00E               	goto	l546
  5468  002296  0EFF               	movlw	255
  5469  002298  1A31               	xorwf	___ftadd@f2,f,c
  5470  00229A  0EFF               	movlw	255
  5471  00229C  1A32               	xorwf	___ftadd@f2+1,f,c
  5472  00229E  0EFF               	movlw	255
  5473  0022A0  1A33               	xorwf	___ftadd@f2+2,f,c
  5474  0022A2  0E01               	movlw	1
  5475  0022A4  2631               	addwf	___ftadd@f2,f,c
  5476  0022A6  0E00               	movlw	0
  5477  0022A8  2232               	addwfc	___ftadd@f2+1,f,c
  5478  0022AA  0E00               	movlw	0
  5479  0022AC  2233               	addwfc	___ftadd@f2+2,f,c
  5480  0022AE  0E01               	movlw	1
  5481  0022B0  6E37               	movwf	___ftadd@sign,c
  5482  0022B2                     l546:
  5483  0022B2  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5484  0022B6  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5485  0022BA  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5486  0022BE  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5487  0022C2  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5488  0022C6  EC00  F014         	call	___ftpack	;wreg free
  5489  0022CA  C001  F02E         	movff	?___ftpack,?___ftadd
  5490  0022CE  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5491  0022D2  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5492  0022D6  0012               	return	
  5493  0022D8                     __end_of___ftadd:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           fsr2h	equ	0xFDA
  5506                           fsr2l	equ	0xFD9
  5507                           status	equ	0xFD8
  5508                           
  5509 ;; *************** function ___ftneg *****************
  5510 ;; Defined at:
  5511 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;  f1              3    0[COMRAM] float 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;		None
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  3    0[COMRAM] float 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5525 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5528 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;Total ram usage:        3 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; This function calls:
  5532 ;;		Nothing
  5533 ;; This function is called by:
  5534 ;;		_printf
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text18
  5539  002C96                     __ptext18:
  5540                           	opt stack 0
  5541  002C96                     ___ftneg:
  5542                           	opt stack 29
  5543                           
  5544                           ;incstack = 0
  5545  002C96  5001               	movf	___ftneg@f1,w,c
  5546  002C98  1002               	iorwf	___ftneg@f1+1,w,c
  5547  002C9A  1003               	iorwf	___ftneg@f1+2,w,c
  5548  002C9C  B4D8               	btfsc	status,2,c
  5549  002C9E  D006               	goto	l594
  5550  002CA0  0E00               	movlw	0
  5551  002CA2  1A01               	xorwf	___ftneg@f1,f,c
  5552  002CA4  0E00               	movlw	0
  5553  002CA6  1A02               	xorwf	___ftneg@f1+1,f,c
  5554  002CA8  0E80               	movlw	128
  5555  002CAA  1A03               	xorwf	___ftneg@f1+2,f,c
  5556  002CAC                     l594:
  5557  002CAC  C001  F001         	movff	___ftneg@f1,?___ftneg
  5558  002CB0  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5559  002CB4  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5560  002CB8  0012               	return		;funcret
  5561  002CBA                     __end_of___ftneg:
  5562                           	opt stack 0
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           fsr2h	equ	0xFDA
  5574                           fsr2l	equ	0xFD9
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function ___ftge *****************
  5578 ;; Defined at:
  5579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  ff1             3    0[COMRAM] float 
  5582 ;;  ff2             3    3[COMRAM] float 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5596 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5597 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5598 ;;Total ram usage:        9 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_printf
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text19
  5608  0028AE                     __ptext19:
  5609                           	opt stack 0
  5610  0028AE                     ___ftge:
  5611                           	opt stack 29
  5612                           
  5613                           ;incstack = 0
  5614  0028AE  AE03               	btfss	___ftge@ff1+2,7,c
  5615  0028B0  D016               	goto	l576
  5616  0028B2  C001  F007         	movff	___ftge@ff1,??___ftge
  5617  0028B6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5618  0028BA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5619  0028BE  1E07               	comf	??___ftge,f,c
  5620  0028C0  1E08               	comf	??___ftge+1,f,c
  5621  0028C2  1E09               	comf	??___ftge+2,f,c
  5622  0028C4  2A07               	incf	??___ftge,f,c
  5623  0028C6  0E00               	movlw	0
  5624  0028C8  2208               	addwfc	??___ftge+1,f,c
  5625  0028CA  2209               	addwfc	??___ftge+2,f,c
  5626  0028CC  0E00               	movlw	0
  5627  0028CE  2407               	addwf	??___ftge,w,c
  5628  0028D0  6E01               	movwf	___ftge@ff1,c
  5629  0028D2  0E00               	movlw	0
  5630  0028D4  2008               	addwfc	??___ftge+1,w,c
  5631  0028D6  6E02               	movwf	___ftge@ff1+1,c
  5632  0028D8  0E80               	movlw	128
  5633  0028DA  2009               	addwfc	??___ftge+2,w,c
  5634  0028DC  6E03               	movwf	___ftge@ff1+2,c
  5635  0028DE                     l576:
  5636  0028DE  AE06               	btfss	___ftge@ff2+2,7,c
  5637  0028E0  D016               	goto	l577
  5638  0028E2  C004  F007         	movff	___ftge@ff2,??___ftge
  5639  0028E6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5640  0028EA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5641  0028EE  1E07               	comf	??___ftge,f,c
  5642  0028F0  1E08               	comf	??___ftge+1,f,c
  5643  0028F2  1E09               	comf	??___ftge+2,f,c
  5644  0028F4  2A07               	incf	??___ftge,f,c
  5645  0028F6  0E00               	movlw	0
  5646  0028F8  2208               	addwfc	??___ftge+1,f,c
  5647  0028FA  2209               	addwfc	??___ftge+2,f,c
  5648  0028FC  0E00               	movlw	0
  5649  0028FE  2407               	addwf	??___ftge,w,c
  5650  002900  6E04               	movwf	___ftge@ff2,c
  5651  002902  0E00               	movlw	0
  5652  002904  2008               	addwfc	??___ftge+1,w,c
  5653  002906  6E05               	movwf	___ftge@ff2+1,c
  5654  002908  0E80               	movlw	128
  5655  00290A  2009               	addwfc	??___ftge+2,w,c
  5656  00290C  6E06               	movwf	___ftge@ff2+2,c
  5657  00290E                     l577:
  5658  00290E  0E00               	movlw	0
  5659  002910  1A01               	xorwf	___ftge@ff1,f,c
  5660  002912  0E00               	movlw	0
  5661  002914  1A02               	xorwf	___ftge@ff1+1,f,c
  5662  002916  0E80               	movlw	128
  5663  002918  1A03               	xorwf	___ftge@ff1+2,f,c
  5664  00291A  0E00               	movlw	0
  5665  00291C  1A04               	xorwf	___ftge@ff2,f,c
  5666  00291E  0E00               	movlw	0
  5667  002920  1A05               	xorwf	___ftge@ff2+1,f,c
  5668  002922  0E80               	movlw	128
  5669  002924  1A06               	xorwf	___ftge@ff2+2,f,c
  5670  002926  5004               	movf	___ftge@ff2,w,c
  5671  002928  5C01               	subwf	___ftge@ff1,w,c
  5672  00292A  5005               	movf	___ftge@ff2+1,w,c
  5673  00292C  5802               	subwfb	___ftge@ff1+1,w,c
  5674  00292E  5006               	movf	___ftge@ff2+2,w,c
  5675  002930  5803               	subwfb	___ftge@ff1+2,w,c
  5676  002932  B0D8               	btfsc	status,0,c
  5677  002934  D002               	goto	l1914
  5678  002936  90D8               	bcf	status,0,c
  5679  002938  0012               	return	
  5680  00293A                     l1914:
  5681  00293A  80D8               	bsf	status,0,c
  5682  00293C  0012               	return	
  5683  00293E                     __end_of___ftge:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           postinc0	equ	0xFEE
  5692                           wreg	equ	0xFE8
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function _adc_read *****************
  5700 ;; Defined at:
  5701 ;;		line 88 in file "Main.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  ch              1    wreg     unsigned char 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  ch              1    4[COMRAM] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  2    0[COMRAM] unsigned int 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5718 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5719 ;;Total ram usage:        5 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text20
  5729  002C3A                     __ptext20:
  5730                           	opt stack 0
  5731  002C3A                     _adc_read:
  5732                           	opt stack 30
  5733                           
  5734                           ;incstack = 0
  5735                           ;adc_read@ch stored from wreg
  5736  002C3A  6E05               	movwf	adc_read@ch,c
  5737                           
  5738                           ;Main.c: 91: ADCON0bits.CHS = ch;
  5739  002C3C  C005  F003         	movff	adc_read@ch,??_adc_read
  5740  002C40  4603               	rlncf	??_adc_read,f,c
  5741  002C42  4603               	rlncf	??_adc_read,f,c
  5742  002C44  50C2               	movf	4034,w,c	;volatile
  5743  002C46  1803               	xorwf	??_adc_read,w,c
  5744  002C48  0B83               	andlw	-125
  5745  002C4A  1803               	xorwf	??_adc_read,w,c
  5746  002C4C  6EC2               	movwf	4034,c	;volatile
  5747                           
  5748                           ;Main.c: 92: ADCON0bits.GO = 1;
  5749  002C4E  82C2               	bsf	4034,1,c	;volatile
  5750  002C50  B2C2               	btfsc	4034,1,c	;volatile
  5751  002C52  D7FE               	goto	l66
  5752                           
  5753                           ;Main.c: 98: delayan = (ADRESH << 8) + ADRESL;
  5754  002C54  50C4               	movf	4036,w,c	;volatile
  5755  002C56  6E04               	movwf	(??_adc_read+1)& (0+255),c
  5756  002C58  6A03               	clrf	??_adc_read& (0+255),c
  5757  002C5A  50C3               	movf	4035,w,c	;volatile
  5758  002C5C  2403               	addwf	??_adc_read,w,c
  5759  002C5E  6E52               	movwf	_delayan,c
  5760  002C60  0E00               	movlw	0
  5761  002C62  2004               	addwfc	??_adc_read+1,w,c
  5762  002C64  6E53               	movwf	_delayan+1,c
  5763                           
  5764                           ;Main.c: 99: return delayan;
  5765  002C66  C052  F001         	movff	_delayan,?_adc_read
  5766  002C6A  C053  F002         	movff	_delayan+1,?_adc_read+1
  5767  002C6E  0012               	return	
  5768  002C70                     __end_of_adc_read:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784 ;; *************** function ___lwtoft *****************
  5785 ;; Defined at:
  5786 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  c               2    8[COMRAM] unsigned int 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;		None
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  3    8[COMRAM] float 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5800 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5803 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5804 ;;Total ram usage:        3 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    1
  5807 ;; This function calls:
  5808 ;;		___ftpack
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text21
  5815  002CBA                     __ptext21:
  5816                           	opt stack 0
  5817  002CBA                     ___lwtoft:
  5818                           	opt stack 29
  5819                           
  5820                           ;incstack = 0
  5821  002CBA  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5822  002CBE  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5823  002CC2  6A03               	clrf	___ftpack@arg+2,c
  5824  002CC4  0E8E               	movlw	142
  5825  002CC6  6E04               	movwf	___ftpack@exp,c
  5826  002CC8  0E00               	movlw	0
  5827  002CCA  6E05               	movwf	___ftpack@sign,c
  5828  002CCC  EC00  F014         	call	___ftpack	;wreg free
  5829  002CD0  C001  F009         	movff	?___ftpack,?___lwtoft
  5830  002CD4  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5831  002CD8  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5832  002CDC  0012               	return	
  5833  002CDE                     __end_of___lwtoft:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postinc2	equ	0xFDE
  5844                           postdec2	equ	0xFDD
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function ___ftdiv *****************
  5850 ;; Defined at:
  5851 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  f1              3   35[COMRAM] float 
  5854 ;;  f2              3   38[COMRAM] float 
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;  f3              3   45[COMRAM] float 
  5857 ;;  sign            1   49[COMRAM] unsigned char 
  5858 ;;  exp             1   48[COMRAM] unsigned char 
  5859 ;;  cntr            1   44[COMRAM] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  3   35[COMRAM] float 
  5862 ;; Registers used:
  5863 ;;		wreg, status,2, status,0, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5870 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5871 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5872 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5873 ;;Total ram usage:       15 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    1
  5876 ;; This function calls:
  5877 ;;		___ftpack
  5878 ;; This function is called by:
  5879 ;;		_main
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text22
  5884  00271A                     __ptext22:
  5885                           	opt stack 0
  5886  00271A                     ___ftdiv:
  5887                           	opt stack 29
  5888                           
  5889                           ;incstack = 0
  5890  00271A  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5891  00271E  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5892  002720  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5893  002722  3425               	rlcf	___ftdiv@f1+1,w,c
  5894  002724  362A               	rlcf	??___ftdiv& (0+255),f,c
  5895  002726  E301               	bnc	u3061
  5896  002728  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5897  00272A                     u3061:
  5898  00272A  502A               	movf	??___ftdiv,w,c
  5899  00272C  6E31               	movwf	___ftdiv@exp,c
  5900  00272E  5031               	movf	___ftdiv@exp,w,c
  5901  002730  A4D8               	btfss	status,2,c
  5902  002732  D007               	goto	l551
  5903  002734  0E00               	movlw	0
  5904  002736  6E24               	movwf	?___ftdiv,c
  5905  002738  0E00               	movlw	0
  5906  00273A  6E25               	movwf	?___ftdiv+1,c
  5907  00273C  0E00               	movlw	0
  5908  00273E  6E26               	movwf	?___ftdiv+2,c
  5909  002740  0012               	return	
  5910  002742                     l551:
  5911  002742  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5912  002746  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5913  002748  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5914  00274A  3428               	rlcf	___ftdiv@f2+1,w,c
  5915  00274C  362A               	rlcf	??___ftdiv& (0+255),f,c
  5916  00274E  E301               	bnc	u3081
  5917  002750  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5918  002752                     u3081:
  5919  002752  502A               	movf	??___ftdiv,w,c
  5920  002754  6E32               	movwf	___ftdiv@sign,c
  5921  002756  5032               	movf	___ftdiv@sign,w,c
  5922  002758  A4D8               	btfss	status,2,c
  5923  00275A  D007               	goto	l553
  5924  00275C  0E00               	movlw	0
  5925  00275E  6E24               	movwf	?___ftdiv,c
  5926  002760  0E00               	movlw	0
  5927  002762  6E25               	movwf	?___ftdiv+1,c
  5928  002764  0E00               	movlw	0
  5929  002766  6E26               	movwf	?___ftdiv+2,c
  5930  002768  0012               	return	
  5931  00276A                     l553:
  5932  00276A  0E00               	movlw	0
  5933  00276C  6E2E               	movwf	___ftdiv@f3,c
  5934  00276E  0E00               	movlw	0
  5935  002770  6E2F               	movwf	___ftdiv@f3+1,c
  5936  002772  0E00               	movlw	0
  5937  002774  6E30               	movwf	___ftdiv@f3+2,c
  5938  002776  5032               	movf	___ftdiv@sign,w,c
  5939  002778  0F89               	addlw	137
  5940  00277A  5E31               	subwf	___ftdiv@exp,f,c
  5941  00277C  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5942  002780  5029               	movf	___ftdiv@f2+2,w,c
  5943  002782  1A32               	xorwf	___ftdiv@sign,f,c
  5944  002784  0E80               	movlw	128
  5945  002786  1632               	andwf	___ftdiv@sign,f,c
  5946  002788  8E25               	bsf	___ftdiv@f1+1,7,c
  5947  00278A  0EFF               	movlw	255
  5948  00278C  1624               	andwf	___ftdiv@f1,f,c
  5949  00278E  0EFF               	movlw	255
  5950  002790  1625               	andwf	___ftdiv@f1+1,f,c
  5951  002792  0E00               	movlw	0
  5952  002794  1626               	andwf	___ftdiv@f1+2,f,c
  5953  002796  8E28               	bsf	___ftdiv@f2+1,7,c
  5954  002798  0EFF               	movlw	255
  5955  00279A  1627               	andwf	___ftdiv@f2,f,c
  5956  00279C  0EFF               	movlw	255
  5957  00279E  1628               	andwf	___ftdiv@f2+1,f,c
  5958  0027A0  0E00               	movlw	0
  5959  0027A2  1629               	andwf	___ftdiv@f2+2,f,c
  5960  0027A4  0E18               	movlw	24
  5961  0027A6  6E2D               	movwf	___ftdiv@cntr,c
  5962  0027A8  90D8               	bcf	status,0,c
  5963  0027AA  362E               	rlcf	___ftdiv@f3,f,c
  5964  0027AC  362F               	rlcf	___ftdiv@f3+1,f,c
  5965  0027AE  3630               	rlcf	___ftdiv@f3+2,f,c
  5966  0027B0  5027               	movf	___ftdiv@f2,w,c
  5967  0027B2  5C24               	subwf	___ftdiv@f1,w,c
  5968  0027B4  5028               	movf	___ftdiv@f2+1,w,c
  5969  0027B6  5825               	subwfb	___ftdiv@f1+1,w,c
  5970  0027B8  5029               	movf	___ftdiv@f2+2,w,c
  5971  0027BA  5826               	subwfb	___ftdiv@f1+2,w,c
  5972  0027BC  A0D8               	btfss	status,0,c
  5973  0027BE  D007               	goto	l555
  5974  0027C0  5027               	movf	___ftdiv@f2,w,c
  5975  0027C2  5E24               	subwf	___ftdiv@f1,f,c
  5976  0027C4  5028               	movf	___ftdiv@f2+1,w,c
  5977  0027C6  5A25               	subwfb	___ftdiv@f1+1,f,c
  5978  0027C8  5029               	movf	___ftdiv@f2+2,w,c
  5979  0027CA  5A26               	subwfb	___ftdiv@f1+2,f,c
  5980  0027CC  802E               	bsf	___ftdiv@f3,0,c
  5981  0027CE                     l555:
  5982  0027CE  90D8               	bcf	status,0,c
  5983  0027D0  3624               	rlcf	___ftdiv@f1,f,c
  5984  0027D2  3625               	rlcf	___ftdiv@f1+1,f,c
  5985  0027D4  3626               	rlcf	___ftdiv@f1+2,f,c
  5986  0027D6  2E2D               	decfsz	___ftdiv@cntr,f,c
  5987  0027D8  D7E7               	goto	l554
  5988  0027DA  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  5989  0027DE  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5990  0027E2  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5991  0027E6  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  5992  0027EA  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  5993  0027EE  EC00  F014         	call	___ftpack	;wreg free
  5994  0027F2  C001  F024         	movff	?___ftpack,?___ftdiv
  5995  0027F6  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  5996  0027FA  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  5997  0027FE  0012               	return	
  5998  002800                     __end_of___ftdiv:
  5999                           	opt stack 0
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           postinc0	equ	0xFEE
  6007                           wreg	equ	0xFE8
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function ___awtoft *****************
  6015 ;; Defined at:
  6016 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  c               2    8[COMRAM] int 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  sign            1   11[COMRAM] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  3    8[COMRAM] float 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6030 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6034 ;;Total ram usage:        4 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    1
  6037 ;; This function calls:
  6038 ;;		___ftpack
  6039 ;; This function is called by:
  6040 ;;		_main
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text23
  6045  002C02                     __ptext23:
  6046                           	opt stack 0
  6047  002C02                     ___awtoft:
  6048                           	opt stack 29
  6049                           
  6050                           ;incstack = 0
  6051  002C02  0E00               	movlw	0
  6052  002C04  6E0C               	movwf	___awtoft@sign,c
  6053  002C06  AE0A               	btfss	___awtoft@c+1,7,c
  6054  002C08  D006               	goto	l451
  6055  002C0A  6C09               	negf	___awtoft@c,c
  6056  002C0C  1E0A               	comf	___awtoft@c+1,f,c
  6057  002C0E  B0D8               	btfsc	status,0,c
  6058  002C10  2A0A               	incf	___awtoft@c+1,f,c
  6059  002C12  0E01               	movlw	1
  6060  002C14  6E0C               	movwf	___awtoft@sign,c
  6061  002C16                     l451:
  6062  002C16  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6063  002C1A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6064  002C1E  6A03               	clrf	___ftpack@arg+2,c
  6065  002C20  0E8E               	movlw	142
  6066  002C22  6E04               	movwf	___ftpack@exp,c
  6067  002C24  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6068  002C28  EC00  F014         	call	___ftpack	;wreg free
  6069  002C2C  C001  F009         	movff	?___ftpack,?___awtoft
  6070  002C30  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6071  002C34  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6072  002C38  0012               	return	
  6073  002C3A                     __end_of___awtoft:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           postinc0	equ	0xFEE
  6082                           wreg	equ	0xFE8
  6083                           postinc2	equ	0xFDE
  6084                           postdec2	equ	0xFDD
  6085                           fsr2h	equ	0xFDA
  6086                           fsr2l	equ	0xFD9
  6087                           status	equ	0xFD8
  6088                           
  6089 ;; *************** function ___ftpack *****************
  6090 ;; Defined at:
  6091 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;  arg             3    0[COMRAM] unsigned um
  6094 ;;  exp             1    3[COMRAM] unsigned char 
  6095 ;;  sign            1    4[COMRAM] unsigned char 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  3    0[COMRAM] float 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6107 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6109 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6110 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6111 ;;Total ram usage:        8 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; This function calls:
  6114 ;;		Nothing
  6115 ;; This function is called by:
  6116 ;;		___awtoft
  6117 ;;		___ftadd
  6118 ;;		___ftdiv
  6119 ;;		___ftmul
  6120 ;;		___lltoft
  6121 ;;		___lwtoft
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text24
  6126  002800                     __ptext24:
  6127                           	opt stack 0
  6128  002800                     ___ftpack:
  6129                           	opt stack 27
  6130                           
  6131                           ;incstack = 0
  6132  002800  5004               	movf	___ftpack@exp,w,c
  6133  002802  B4D8               	btfsc	status,2,c
  6134  002804  D005               	goto	u1630
  6135  002806  5001               	movf	___ftpack@arg,w,c
  6136  002808  1002               	iorwf	___ftpack@arg+1,w,c
  6137  00280A  1003               	iorwf	___ftpack@arg+2,w,c
  6138  00280C  A4D8               	btfss	status,2,c
  6139  00280E  D00C               	goto	l487
  6140  002810                     u1630:
  6141  002810  0E00               	movlw	0
  6142  002812  6E01               	movwf	?___ftpack,c
  6143  002814  0E00               	movlw	0
  6144  002816  6E02               	movwf	?___ftpack+1,c
  6145  002818  0E00               	movlw	0
  6146  00281A  6E03               	movwf	?___ftpack+2,c
  6147  00281C  0012               	return	
  6148  00281E  2A04               	incf	___ftpack@exp,f,c
  6149  002820  90D8               	bcf	status,0,c
  6150  002822  3203               	rrcf	___ftpack@arg+2,f,c
  6151  002824  3202               	rrcf	___ftpack@arg+1,f,c
  6152  002826  3201               	rrcf	___ftpack@arg,f,c
  6153  002828                     l487:
  6154  002828  0E00               	movlw	0
  6155  00282A  1401               	andwf	___ftpack@arg,w,c
  6156  00282C  6E06               	movwf	??___ftpack& (0+255),c
  6157  00282E  0E00               	movlw	0
  6158  002830  1402               	andwf	___ftpack@arg+1,w,c
  6159  002832  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6160  002834  0EFE               	movlw	254
  6161  002836  1403               	andwf	___ftpack@arg+2,w,c
  6162  002838  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6163  00283A  5006               	movf	??___ftpack,w,c
  6164  00283C  1007               	iorwf	??___ftpack+1,w,c
  6165  00283E  1008               	iorwf	??___ftpack+2,w,c
  6166  002840  B4D8               	btfsc	status,2,c
  6167  002842  D00C               	goto	l490
  6168  002844  D7EC               	goto	l488
  6169  002846  2A04               	incf	___ftpack@exp,f,c
  6170  002848  0E01               	movlw	1
  6171  00284A  2601               	addwf	___ftpack@arg,f,c
  6172  00284C  0E00               	movlw	0
  6173  00284E  2202               	addwfc	___ftpack@arg+1,f,c
  6174  002850  0E00               	movlw	0
  6175  002852  2203               	addwfc	___ftpack@arg+2,f,c
  6176  002854  90D8               	bcf	status,0,c
  6177  002856  3203               	rrcf	___ftpack@arg+2,f,c
  6178  002858  3202               	rrcf	___ftpack@arg+1,f,c
  6179  00285A  3201               	rrcf	___ftpack@arg,f,c
  6180  00285C                     l490:
  6181  00285C  0E00               	movlw	0
  6182  00285E  1401               	andwf	___ftpack@arg,w,c
  6183  002860  6E06               	movwf	??___ftpack& (0+255),c
  6184  002862  0E00               	movlw	0
  6185  002864  1402               	andwf	___ftpack@arg+1,w,c
  6186  002866  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6187  002868  0EFF               	movlw	255
  6188  00286A  1403               	andwf	___ftpack@arg+2,w,c
  6189  00286C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6190  00286E  5006               	movf	??___ftpack,w,c
  6191  002870  1007               	iorwf	??___ftpack+1,w,c
  6192  002872  1008               	iorwf	??___ftpack+2,w,c
  6193  002874  B4D8               	btfsc	status,2,c
  6194  002876  D006               	goto	l493
  6195  002878  D7E6               	goto	l491
  6196  00287A  0604               	decf	___ftpack@exp,f,c
  6197  00287C  90D8               	bcf	status,0,c
  6198  00287E  3601               	rlcf	___ftpack@arg,f,c
  6199  002880  3602               	rlcf	___ftpack@arg+1,f,c
  6200  002882  3603               	rlcf	___ftpack@arg+2,f,c
  6201  002884                     l493:
  6202  002884  BE02               	btfsc	___ftpack@arg+1,7,c
  6203  002886  D003               	goto	u1670
  6204  002888  0E02               	movlw	2
  6205  00288A  6004               	cpfslt	___ftpack@exp,c
  6206  00288C  D7F6               	goto	l494
  6207  00288E                     u1670:
  6208  00288E  A004               	btfss	___ftpack@exp,0,c
  6209  002890  9E02               	bcf	___ftpack@arg+1,7,c
  6210  002892  90D8               	bcf	status,0,c
  6211  002894  3204               	rrcf	___ftpack@exp,f,c
  6212  002896  5004               	movf	___ftpack@exp,w,c
  6213  002898  1203               	iorwf	___ftpack@arg+2,f,c
  6214  00289A  5005               	movf	___ftpack@sign,w,c
  6215  00289C  A4D8               	btfss	status,2,c
  6216  00289E  8E03               	bsf	___ftpack@arg+2,7,c
  6217  0028A0  C001  F001         	movff	___ftpack@arg,?___ftpack
  6218  0028A4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6219  0028A8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6220  0028AC  0012               	return	
  6221  0028AE                     __end_of___ftpack:
  6222                           	opt stack 0
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           postinc0	equ	0xFEE
  6230                           wreg	equ	0xFE8
  6231                           postinc2	equ	0xFDE
  6232                           postdec2	equ	0xFDD
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           tblptru	equ	0xFF8
  6237                           tblptrh	equ	0xFF7
  6238                           tblptrl	equ	0xFF6
  6239                           tablat	equ	0xFF5
  6240                           prodh	equ	0xFF4
  6241                           prodl	equ	0xFF3
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           fsr2h	equ	0xFDA
  6247                           fsr2l	equ	0xFD9
  6248                           status	equ	0xFD8
  6249                           
  6250                           	psect	rparam
  6251  0000                     tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           postinc0	equ	0xFEE
  6258                           wreg	equ	0xFE8
  6259                           postinc2	equ	0xFDE
  6260                           postdec2	equ	0xFDD
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    118
    Data        3
    BSS         143
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     76      83
    BANK0           160     45     116
    BANK1           256      0      68
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[5]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   69536
                                             74 COMRAM     2     2      0
                                             25 BANK0     20    20      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _adc_read
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   51388
                                             63 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12098
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11900
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5276
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4311
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3966
                                             45 COMRAM    12     6      6
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2642
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3254
                                             35 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2711
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _adc_read
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      44       8       26.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      74       5       72.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4C      53       1       87.4%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B       6        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Aug 03 11:07:17 2019

                     l57 1FE2                       l66 2C50                       l58 1FFC  
            main@MaxVolt 00C0             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
           ___ftadd@exp1 0039             ___ftadd@exp2 0038             ___ftadd@sign 0037  
                    l202 1328                      l212 1452                      l221 1546  
                    l230 16CC                      l222 1538                      l214 1476  
                    l231 16BE                      l215 1468                      l240 17A0  
                    l224 156A                      l208 13E6                      l161 1B08  
                    l241 17C2                      l233 1710                      l225 156E  
                    l162 1A34                      l234 1728                      l226 1586  
                    l218 152C                      l155 1E4E                      l251 18D0  
                    l243 17E4                      l227 16B2                      l219 14A0  
                    l252 1852                      l244 17EC                      l228 15D8  
                    l172 0FB2                      l165 1AE4                      l245 1810  
                    l173 0FC4                      l430 29A0                      l158 1F1A  
                    l166 1C34                      l246 1818                      l238 1780  
                    l190 16D6                      l182 10D6                      l431 29AA  
                    l423 2952                      l191 1118                      l175 0FF4  
                    l600 2BD8                      l432 29B8                      l424 2962  
                    l440 2A72                      l168 1CE4                      l192 115A  
                    l185 10D2                      l177 10C4                      l522 21A8  
                    l426 2980                      l194 11EC                      l186 1104  
                    l178 10AE                      l451 2C16                      l427 2978  
                    l443 2A92                      l195 1252                      l179 1076  
                    l532 2204                      l612 26EC                      l604 2652  
                    l444 2A9C                      l436 2A58                      l541 2242  
                    l533 21FA                      l613 26E0                      l461 24F6  
                    l445 2AAA                      l437 2A64                      l197 1278  
                    l542 2238                      l518 217E                      l606 26C8  
                    l462 24E6                      l198 12B8                      l551 2742  
                    l527 220E                      l615 2708                      l607 26B8  
                    l455 2428                      l439 2A7A                      l199 1380  
                    l544 2266                      l553 276A                      l545 2282  
                    l457 2446                      l561 2330                      l490 285C  
                    l554 27A8                      l546 22B2                      l650 2A32  
                    l458 2488                      l562 236A                      l491 2846  
                    l555 27CE                      l467 251A                      l459 24B8  
                    l571 23F2                      l563 2392                      l619 2CF4  
                    l660 2B08                      l468 250E                      l572 23E6  
                    l493 2884                      l645 29F0                      l565 23CE  
                    l494 287A                      l646 29E4                      l566 23BE  
                    l590 25EC                      l487 2828                      l655 2AD2  
                    l559 2304                      l583 255A                      l488 281E  
                    l576 28DE                      l656 2AC6                      l577 290E  
                    l649 2A24                      l585 2582                      l594 2CAC  
                    l666 2B2C                      l586 25B4                      l659 2AFA  
                    l667 2B20                      l587 25C4                      l589 25DC  
           putNum@F15155 004D              main@VoltCon 00C7             ___awmod@sign 0006  
                    wreg 000FE8             ___ftdiv@cntr 002D             ___ftdiv@sign 0032  
                   l2158 2CFE                     l2602 13EA                     l2622 1468  
                   l2640 1538                     l1914 293A                     l2742 1852  
                   l2582 1302                     l2574 12B8                     l2818 1FEC  
                   l2692 172C                     STR_1 0F86                     STR_2 0F77  
                   STR_3 0F92                     STR_4 0FA0                     STR_5 0F9B  
                   u2000 2984                     u3010 1820                     u2211 2314  
                   u2060 2A7E                     u3020 1836                     u3040 18E2  
                   u2401 2636                     u3130 2046                     u2420 2670  
                   u2340 2520                     u3061 272A                     u1701 213C  
                   u1630 2810                     u2270 23F8                     u1711 2150  
                   u2191 22E8                     u3207 211C                     u1800 21D8  
                   u2520 2AD6                     u3081 2752                     u2425 2668  
                   u1740 2170                     u2460 26F2                     u2700 12CA  
                   u1670 288E                     u1911 2542                     u1840 2216  
                   u2800 1484                     u1770 219A                     u2490 29F4  
                   u2730 1302                     u2650 1192                     u1931 256A  
           printf@tmpval 00AD                     u2580 1052                     u3197 20C4  
                   u1870 224A                     u2830 1554                     u2655 1188  
                   u2840 1564                     u2930 1764                     u2770 1422  
                   u2690 128A                     _RCIF 007CF5                     _main 1F5A  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
           ___param_bank 000000             ___ftmul@sign 0023             ___fttol@exp1 0039  
           ___fttol@lval 0035                    ?_main 0001          __end_of___awdiv 29C2  
        __end_of___ftadd 22D8          __end_of___awmod 2AB4          __end_of___ftdiv 2800  
        __end_of___ftneg 2CBA          __end_of___lldiv 2A44          __end_of___ftmul 2626  
        ___awdiv@divisor 0009          __end_of___llmod 2B1A          __end_of___ftsub 2C02  
        __end_of___fttol 271A          ___awdiv@counter 000B                    _RCREG 000FAE  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96             ___lltoft@exp 0011  
          ___awtoft@sign 000C          __end_of_dpowers 0F29                    _scale 1900  
        __end_of_isdigit 2CFC            ___ftpack@sign 0005                    _putch 2CFC  
                  main@i 00CC           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8             main@voltMath 00CE          __initialization 2B76  
           __end_of_main 212C                   ??_main 004B            ___fttol@sign1 0034  
          __activetblptr 000002           __CFG_PLLCFG$ON 000000     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 000E                   ?_scale 0024                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _ANCON0 000F5D                   _ANCON1 000F5C  
       ___awdiv@dividend 0007         __end_of___awtoft 2C3A                   ?_putch 0001  
       __end_of___ftpack 28AE         __end_of_adc_read 2C70         __end_of___lltoft 2B76  
         __CFG_WDTEN$OFF 000000                   _RCREG2 000F7A         __end_of___lwtoft 2CDE  
                 _RCSTA1 000FAB                   _OSCCON 000FD3                   _SPBRG1 000FAF  
                 _TXREG1 000FAD                   _TXREG2 000F79                   _TXSTA1 000FAC  
         __CFG_XINST$OFF 000000         __end_of__powers_ 0F50                   ___ftge 28AE  
                 ___wmul 2C70                ??___awdiv 000B                ??___ftadd 0034  
              ??___awmod 0005                ??___ftdiv 002A                ??___ftneg 0004  
              ??___lldiv 0009           main@adcChannel 00C3                ??___ftmul 001B  
              ??___llmod 0016                ??___ftsub 0040                ??___fttol 002F  
                 _fround 1D08                   clear_0 2B9A                   clear_1 2BA6  
                 clear_2 2BB2         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005                   _printf 0FA4    ___ftmul@f3_as_product 001F  
              ??_isdigit 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 2BB8               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 0024               ___ftdiv@f2 0027               ___ftdiv@f3 002E  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001             __pidataBANK0 2D08  
             ___lltoft@c 0009            __end_of_scale 1D08            __end_of_putch 2D08  
             ___lwtoft@c 0009               __div_to_l_ 240A          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
                ??_putch 0001               __pbssBANK0 0060               __pbssBANK1 0100  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004               adc_read@ch 0005  
                ?___ftge 0001                  ?___wmul 000F                  ?_fround 0024  
              ?___awtoft 0009                ?___ftpack 0001                  ?_printf 0040  
              ?_adc_read 0001                ?___lltoft 0009                ?___lwtoft 0009  
      __end_of__npowers_ 0F77                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090                  ___awdiv 293E                  ___ftadd 212C  
                ___awmod 2A44                  ___ftdiv 271A                  ___ftneg 2C96  
                ___lldiv 29C2          __size_of___wmul 0026                  ___ftmul 2532  
                ___llmod 2AB4                  ___ftsub 2BC2                  ___fttol 2626  
             _fround$928 002A               _fround$929 0027             __psmallconst 0F00  
                __pcinit 2B76               ??___awtoft 000C               ??___ftpack 0006  
                _delayan 0052          __size_of_fround 0252                  __ramtop 0F00  
             ??_adc_read 0003               ??___lltoft 000D                  __ptext0 1F5A  
                __ptext1 0FA4                  __ptext2 1900                  __ptext3 2CFC  
                __ptext4 2CDE                  __ptext5 1D08                  __ptext6 2C70  
                __ptext7 2532                  __ptext8 2A44                  __ptext9 293E  
        __size_of_printf 095C               ??___lwtoft 000C              ?__div_to_l_ 0001  
                _dpowers 0F01                  _isdigit 2CDE         ___awmod@dividend 0001  
                main@adc 00CA     end_of_initialization 2BB8            __Lmediumconst 0000  
        ___lldiv@divisor 0005          ___lldiv@counter 000D                  printf@c 00BC  
                printf@f 0040                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               main@F15144 00D1           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004               _printf$931 00A4            ??__tdiv_to_l_ 0007  
       __CFG_FOSC$INTIO2 000000              ___ftdiv@exp 0031              printf@width 00AB  
    __size_of__div_to_l_ 0128              ___ftmul@exp 001E           __end_of___ftge 293E  
         __end_of___wmul 2C96           __end_of_fround 1F5A           __end_of_printf 1900  
    start_initialization 2B76      __end_of__tdiv_to_l_ 240A          ___llmod@divisor 0012  
        ___llmod@counter 0016                 ??___ftge 0007                 ??___wmul 0013  
            __pdataBANK0 00D1                 ??_fround 0027                 ??_printf 0045  
             fround@prec 002D        __size_of___awtoft 0038        __size_of___ftpack 00AE  
      __size_of_adc_read 0036        __size_of___lltoft 005C              __pbssCOMRAM 004D  
      __size_of___lwtoft 0024            __pcstackBANK0 00A4                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftdiv 0024  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0015  
               ?___llmod 000E                 ?___ftsub 003A                __npowers_ 0F50  
               ?___fttol 002B              __tdiv_to_l_ 22D8             ??__div_to_l_ 0007  
            __smallconst 0F00                 _BAUDCON1 000FA7                 ?_isdigit 0001  
              _scale$930 0027           __size_of_scale 0408           __size_of_putch 000C  
         ___wmul@product 0013                 _PIR1bits 000F9E       __end_of__div_to_l_ 2532  
               _PIR3bits 000FA4                _rx_buffer 0060               _ADCON0bits 000FC2  
      ___wmul@multiplier 000F               printf@flag 00A9                _tx_buffer 0100  
             printf@fval 00B7               printf@prec 00BA                main@value 00BD  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___awtoft 2C02                 ___ftpack 2800                 _adc_read 2C3A  
               ___lltoft 2B1A              _isdigit$583 0002                 ___lwtoft 2CBA  
      main@adcResolution 00C5         __size_of_isdigit 001E                 __ptext10 22D8  
               __ptext11 240A                 __ptext20 2C3A                 __ptext12 2B1A  
               __ptext21 2CBA                 __ptext13 2AB4                 __ptext22 271A  
               __ptext14 29C2                 __ptext23 2C02                 __ptext15 2626  
               __ptext24 2800                 __ptext16 2BC2                 __ptext17 212C  
               __ptext18 2C96                 __ptext19 28AE                 __powers_ 0F29  
          __size_of_main 01D2                printf@exp 00B5                printf@val 00B1  
              putch@byte 0001              _OSCTUNEbits 000F9B                 isdigit@c 0003  
               scale@scl 002A         __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001                 printf@ap 00A7  
           ?__tdiv_to_l_ 0001         ___lldiv@quotient 0009  
